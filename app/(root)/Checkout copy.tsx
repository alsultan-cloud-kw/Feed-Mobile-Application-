// import React, { useState } from "react";
// import {
//   View,
//   Text,
//   ScrollView,
//   Image,
//   Pressable,
//   TextInput,
//   Alert,
// } from "react-native";
// import { Clock } from "lucide-react-native";
// import useCartStore from "../../store/cartStore";
// import { useRouter } from "expo-router";

// const SHIPPING_FEE = 1;
// const COUPON_CODE = "SAVE10";
// const COUPON_DISCOUNT = 0.1;

// const CheckoutPage: React.FC = () => {
//   const [couponCode, setCouponCode] = useState("");
//   const [couponApplied, setCouponApplied] = useState(false);
//   const [couponError, setCouponError] = useState("");

//   const { items, total, clearCart } = useCartStore();
//   const router = useRouter();

//   const validateCoupon = () => {
//     if (couponApplied) return;

//     if (couponCode.toUpperCase() === COUPON_CODE) {
//       setCouponApplied(true);
//       setCouponError("");
//     } else {
//       setCouponError("Invalid coupon code");
//     }
//   };

//   const calculateTotal = () => {
//     const subtotal = total;
//     return couponApplied
//       ? subtotal * (1 - COUPON_DISCOUNT) + SHIPPING_FEE
//       : subtotal + SHIPPING_FEE;
//   };

//   const handlePayment = () => {
//     Alert.alert(
//       "Checkout Confirmation",
//       "Are you sure you want to complete this purchase?",
//       [
//         {
//           text: "Cancel",
//           style: "cancel",
//         },
//         {
//           text: "Confirm",
//           onPress: () => {
//             clearCart();
//             router.replace("/order-confirmation");
//           },
//         },
//       ]
//     );
//   };

//   return (
//     <ScrollView
//       className="flex-1 bg-white px-4 py-6"
//       contentContainerStyle={{ paddingBottom: 100 }}
//     >
//       {/* Previous code remains the same */}

//       {/* Order Summary */}
//       <View className="mt-6 bg-gray-50 rounded-lg p-4">
//         <View className="flex-row justify-between mb-2">
//           <Text>Subtotal ({items.length} items)</Text>
//           <Text>{total.toFixed(2)} KWD</Text>
//         </View>
//         {couponApplied && (
//           <View className="flex-row justify-between mb-2">
//             <Text className="text-green-600">Discount (10%)</Text>
//             <Text className="text-green-600">
//               - {(total * COUPON_DISCOUNT).toFixed(2)} KWD
//             </Text>
//           </View>
//         )}
//         <View className="flex-row justify-between mb-2">
//           <Text>Shipping Fee</Text>
//           <Text>{SHIPPING_FEE.toFixed(2)} KWD</Text>
//         </View>
//         <View className="border-t border-gray-200 pt-2 mt-2">
//           <View className="flex-row justify-between">
//             <Text className="font-bold text-lg">Total</Text>
//             <Text className="font-bold text-lg">
//               {calculateTotal().toFixed(2)} KWD
//             </Text>
//           </View>
//         </View>
//       </View>

//       {/* Proceed to Payment Button */}
//       <Pressable
//         onPress={handlePayment}
//         className="mt-6 bg-red-500 rounded-lg py-4 items-center"
//       >
//         <Text className="text-white font-bold text-lg">Proceed to Payment</Text>
//       </Pressable>
//     </ScrollView>
//   );
// };

// export default CheckoutPage;

/************************************************ */

// // CheckoutPage.tsx
// import React, { useState } from "react";
// import {
//   View,
//   Text,
//   ScrollView,
//   Pressable,
//   Alert,
//   ActivityIndicator,
// } from "react-native";
// import { router } from "expo-router";
// import useCartStore from "../../store/cartStore";

// const SHIPPING_FEE = 1;

// const CheckoutPage: React.FC = () => {
//   const [isProcessing, setIsProcessing] = useState(false);
//   const { items, total, discountedTotal, appliedCoupon, clearCart } =
//     useCartStore();

//   const subtotal = total;
//   const discount = appliedCoupon
//     ? appliedCoupon.type === "percentage"
//       ? (total * appliedCoupon.amount) / 100
//       : appliedCoupon.amount
//     : 0;
//   const finalTotal = (discountedTotal || total) + SHIPPING_FEE;

//   const handlePayment = async () => {
//     if (isProcessing) return;

//     setIsProcessing(true);
//     try {
//       // Add your payment processing logic here
//       // For example, calling your payment gateway API

//       Alert.alert(
//         "Confirm Purchase",
//         `Total amount: ${finalTotal.toFixed(2)} KWD\nProceed with payment?`,
//         [
//           { text: "Cancel", style: "cancel" },
//           {
//             text: "Confirm",
//             onPress: async () => {
//               try {
//                 // Simulate payment processing
//                 await new Promise((resolve) => setTimeout(resolve, 1500));

//                 clearCart();
//                 router.replace("/(root)/OrderConfirmed");
//               } catch (error) {
//                 console.error("Payment error:", error);
//                 Alert.alert(
//                   "Payment Failed",
//                   "There was an error processing your payment. Please try again."
//                 );
//               }
//             },
//           },
//         ]
//       );
//     } catch (error) {
//       console.error("Checkout error:", error);
//       Alert.alert(
//         "Error",
//         "There was an error processing your checkout. Please try again."
//       );
//     } finally {
//       setIsProcessing(false);
//     }
//   };

//   return (
//     <ScrollView
//       className="flex-1 bg-white px-4 py-6"
//       contentContainerStyle={{ paddingBottom: 100 }}
//     >
//       <Text className="text-2xl font-bold text-gray-800 mb-6">Checkout</Text>

//       <View className="bg-gray-50 rounded-lg p-4 mb-6">
//         <Text className="text-lg font-semibold mb-4">Order Summary</Text>

//         {items.map((item) => (
//           <View key={item.documentId} className="flex-row justify-between mb-2">
//             <Text className="text-gray-600">
//               {item.name} (x{item.quantity})
//             </Text>
//             <Text className="text-gray-800">
//               {((item.salesPrice || item.price) * item.quantity).toFixed(2)} KWD
//             </Text>
//           </View>
//         ))}

//         <View className="border-t border-gray-200 mt-4 pt-4">
//           <View className="flex-row justify-between mb-2">
//             <Text>Subtotal</Text>
//             <Text>{subtotal.toFixed(2)} KWD</Text>
//           </View>

//           {appliedCoupon && (
//             <View className="flex-row justify-between mb-2">
//               <Text className="text-green-600">
//                 Discount ({appliedCoupon.code})
//               </Text>
//               <Text className="text-green-600">
//                 - {discount.toFixed(2)} KWD
//               </Text>
//             </View>
//           )}

//           <View className="flex-row justify-between mb-2">
//             <Text>Shipping Fee</Text>
//             <Text>{SHIPPING_FEE.toFixed(2)} KWD</Text>
//           </View>

//           <View className="border-t border-gray-200 mt-2 pt-2">
//             <View className="flex-row justify-between">
//               <Text className="font-bold text-lg">Total</Text>
//               <Text className="font-bold text-lg">
//                 {finalTotal.toFixed(2)} KWD
//               </Text>
//             </View>
//           </View>
//         </View>
//       </View>

//       <Pressable
//         onPress={handlePayment}
//         disabled={isProcessing}
//         className={`bg-red-500 rounded-lg py-4 items-center ${
//           isProcessing ? "opacity-50" : ""
//         }`}
//       >
//         {isProcessing ? (
//           <ActivityIndicator color="white" />
//         ) : (
//           <Text className="text-white font-bold text-lg">
//             Pay {finalTotal.toFixed(2)} KWD
//           </Text>
//         )}
//       </Pressable>
//     </ScrollView>
//   );
// };

// export default CheckoutPage;

/************************************************************ */

// // CheckoutPage.tsx
// import React, { useState, useCallback } from "react";
// import {
//   View,
//   Text,
//   ScrollView,
//   Pressable,
//   Alert,
//   ActivityIndicator,
//   StyleSheet,
//   Platform,
//   TouchableOpacity,
// } from "react-native";
// import { router, useNavigation } from "expo-router";
// import * as WebBrowser from "expo-web-browser";
// import { useFocusEffect } from "@react-navigation/native";
// import useCartStore from "../../store/cartStore";
// import BookeeyPaymentService from "../servicies/bookeeyPayment";
// import { Shield, CreditCard } from "lucide-react-native";

// // Initialize Bookeey service outside component to prevent recreation
// const bookeeyService = new BookeeyPaymentService({
//   merchantId: process.env.EXPO_PUBLIC_BOOKEEY_MERCHANT_ID!,
//   secretKey: process.env.EXPO_PUBLIC_BOOKEEY_SECRET_KEY!,
//   successUrl: `${process.env.EXPO_PUBLIC_APP_SCHEME}://order-success`,
//   failureUrl: `${process.env.EXPO_PUBLIC_APP_SCHEME}://order-failed`,
//   isSandbox: process.env.EXPO_PUBLIC_ENV !== "production",
// });

// const SHIPPING_FEE = 1;

// interface OrderSummaryProps {
//   label: string;
//   value: string;
//   isTotal?: boolean;
//   isDiscount?: boolean;
// }

// const OrderSummaryRow: React.FC<OrderSummaryProps> = ({
//   label,
//   value,
//   isTotal,
//   isDiscount,
// }) => (
//   <View style={styles.summaryRow}>
//     <Text
//       style={[
//         styles.summaryLabel,
//         isTotal && styles.totalLabel,
//         isDiscount && styles.discountLabel,
//       ]}
//     >
//       {label}
//     </Text>
//     <Text
//       style={[
//         styles.summaryValue,
//         isTotal && styles.totalValue,
//         isDiscount && styles.discountLabel,
//       ]}
//     >
//       {value}
//     </Text>
//   </View>
// );

// const CheckoutPage: React.FC = () => {
//   const navigation = useNavigation();
//   const [isProcessing, setIsProcessing] = useState(false);
//   const [paymentError, setPaymentError] = useState<string | null>(null);
//   const { items, total, discountedTotal, appliedCoupon, clearCart } =
//     useCartStore();

//   // Prevent going back during payment processing
//   useFocusEffect(
//     useCallback(() => {
//       navigation.setOptions({
//         gestureEnabled: !isProcessing,
//       });
//     }, [isProcessing])
//   );

//   const subtotal = total;
//   const discount = appliedCoupon
//     ? appliedCoupon.type === "percentage"
//       ? (total * appliedCoupon.amount) / 100
//       : appliedCoupon.amount
//     : 0;
//   const finalTotal = (discountedTotal || total) + SHIPPING_FEE;

//   const handlePaymentResult = async (url: string) => {
//     try {
//       const params = new URLSearchParams(url.split("?")[1]);
//       const merchantTxnId = params.get("merchantTxnId");
//       const errorCode = params.get("errorCode");

//       if (errorCode === "0" && merchantTxnId) {
//         // Verify payment status with backend
//         const statusResponse = await bookeeyService.checkPaymentStatus(
//           merchantTxnId
//         );
//         const paymentStatus = statusResponse.PaymentStatus[0];

//         if (paymentStatus.finalStatus === "success") {
//           clearCart();
//           router.replace("/(root)/OrderConfirmed");
//         } else {
//           throw new Error(paymentStatus.StatusDescription || "Payment failed");
//         }
//       } else {
//         const errorMessage = params.get("errorMessage");
//         throw new Error(errorMessage || "Payment was not successful");
//       }
//     } catch (error: any) {
//       setPaymentError(error.message);
//       Alert.alert("Payment Failed", error.message);
//     }
//   };

//   const handlePayment = async () => {
//     if (isProcessing) return;
//     setPaymentError(null);
//     setIsProcessing(true);

//     try {
//       const orderId = `ORD${Date.now()}`;
//       const response = await bookeeyService.initiatePayment(finalTotal, {
//         platform: Platform.OS.toUpperCase(),
//         orderId,
//       });

//       if (response.PayUrl) {
//         const result = await WebBrowser.openAuthSessionAsync(
//           response.PayUrl,
//           process.env.EXPO_PUBLIC_APP_SCHEME!
//         );

//         if (result.type === "success" && result.url) {
//           await handlePaymentResult(result.url);
//         } else {
//           throw new Error("Payment was cancelled");
//         }
//       } else {
//         throw new Error("Could not initiate payment");
//       }
//     } catch (error: any) {
//       console.error("Payment error:", error);
//       setPaymentError(error.message);
//       Alert.alert(
//         "Payment Error",
//         "There was an error processing your payment. Please try again."
//       );
//     } finally {
//       setIsProcessing(false);
//     }
//   };

//   if (items.length === 0) {
//     router.replace("/(root)/Cart");
//     return null;
//   }

//   return (
//     <ScrollView
//       style={styles.container}
//       contentContainerStyle={styles.contentContainer}
//     >
//       <Text style={styles.title}>Checkout</Text>

//       {/* Order Summary Card */}
//       <View style={styles.card}>
//         <Text style={styles.cardTitle}>Order Summary</Text>

//         {items.map((item) => (
//           <View key={item.documentId} style={styles.itemRow}>
//             <Text style={styles.itemName}>
//               {item.name} (x{item.quantity})
//             </Text>
//             <Text style={styles.itemPrice}>
//               {((item.salesPrice || item.price) * item.quantity).toFixed(2)} KWD
//             </Text>
//           </View>
//         ))}

//         <View style={styles.summaryContainer}>
//           <OrderSummaryRow
//             label="Subtotal"
//             value={`${subtotal.toFixed(2)} KWD`}
//           />

//           {appliedCoupon && (
//             <OrderSummaryRow
//               label={`Discount (${appliedCoupon.code})`}
//               value={`- ${discount.toFixed(2)} KWD`}
//               isDiscount
//             />
//           )}

//           <OrderSummaryRow
//             label="Shipping Fee"
//             value={`${SHIPPING_FEE.toFixed(2)} KWD`}
//           />

//           <OrderSummaryRow
//             label="Total"
//             value={`${finalTotal.toFixed(2)} KWD`}
//             isTotal
//           />
//         </View>
//       </View>

//       {/* Security Notice */}
//       <View style={styles.securityNotice}>
//         <Shield size={20} color="#4B5563" />
//         <Text style={styles.securityText}>
//           Secure payment processed by Bookeey
//         </Text>
//       </View>

//       {/* Payment Button */}
//       <View className=" bg-green-600 flex justify-center items-center w-full h-10 rounded-full">
//         <TouchableOpacity onPress={handlePayment} disabled={isProcessing}>
//           {isProcessing ? (
//             <ActivityIndicator color="white" />
//           ) : (
//             <View className="flex flex-row items-center justify-center space-x-2">
//               <CreditCard size={20} color="white" />
//               <Text className="text-white text-center text-lg">
//                 Pay {finalTotal.toFixed(2)} KWD
//               </Text>
//             </View>
//           )}
//         </TouchableOpacity>
//       </View>

//       {paymentError && <Text style={styles.errorText}>{paymentError}</Text>}
//     </ScrollView>
//   );
// };

// const styles = StyleSheet.create({
//   container: {
//     flex: 1,
//     backgroundColor: "#f9fafb",
//   },
//   contentContainer: {
//     padding: 16,
//     paddingBottom: 100,
//   },
//   title: {
//     fontSize: 24,
//     fontWeight: "bold",
//     color: "#1f2937",
//     marginBottom: 20,
//   },
//   card: {
//     backgroundColor: "white",
//     borderRadius: 12,
//     padding: 16,
//     marginBottom: 16,
//     ...Platform.select({
//       ios: {
//         shadowColor: "#000",
//         shadowOffset: { width: 0, height: 2 },
//         shadowOpacity: 0.1,
//         shadowRadius: 4,
//       },
//       android: {
//         elevation: 3,
//       },
//     }),
//   },
//   cardTitle: {
//     fontSize: 18,
//     fontWeight: "600",
//     color: "#374151",
//     marginBottom: 16,
//   },
//   itemRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     marginBottom: 8,
//   },
//   itemName: {
//     flex: 1,
//     fontSize: 14,
//     color: "#4b5563",
//   },
//   itemPrice: {
//     fontSize: 14,
//     fontWeight: "500",
//     color: "#374151",
//   },
//   summaryContainer: {
//     marginTop: 16,
//     paddingTop: 16,
//     borderTopWidth: 1,
//     borderTopColor: "#e5e7eb",
//   },
//   summaryRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     marginBottom: 8,
//   },
//   summaryLabel: {
//     fontSize: 14,
//     color: "#4b5563",
//   },
//   summaryValue: {
//     fontSize: 14,
//     fontWeight: "500",
//     color: "#374151",
//   },
//   totalLabel: {
//     fontSize: 16,
//     fontWeight: "600",
//     color: "#1f2937",
//   },
//   totalValue: {
//     fontSize: 16,
//     fontWeight: "600",
//     color: "#1f2937",
//   },
//   discountLabel: {
//     color: "#059669",
//   },
//   securityNotice: {
//     flexDirection: "row",
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 20,
//     gap: 8,
//   },
//   securityText: {
//     fontSize: 14,
//     color: "#4B5563",
//   },
//   payButton: {
//     backgroundColor: "#ef4444",
//     borderRadius: 12,
//     padding: 16,
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 8,
//   },
//   payButtonPressed: {
//     backgroundColor: "#dc2626",
//   },
//   payButtonDisabled: {
//     opacity: 0.5,
//   },
//   payButtonContent: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 8,
//   },
//   payButtonText: {
//     color: "white",
//     fontSize: 16,
//     fontWeight: "600",
//   },
//   errorText: {
//     color: "#dc2626",
//     textAlign: "center",
//     marginTop: 8,
//   },
// });

// export default CheckoutPage;

/********************************************** */

// // app/(root)/Checkout.tsx
// import React, { useState, useCallback } from "react";
// import {
//   View,
//   Text,
//   ScrollView,
//   Alert,
//   ActivityIndicator,
//   StyleSheet,
//   Platform,
//   TouchableOpacity,
//   SafeAreaView,
// } from "react-native";
// import { router, useNavigation } from "expo-router";
// import * as WebBrowser from "expo-web-browser";
// import { useFocusEffect } from "@react-navigation/native";
// import { Shield, CreditCard } from "lucide-react-native";
// import Toast from "react-native-toast-message";
// import useCartStore from "../../store/cartStore";
// import { paymentApi } from "../servicies/api/payment";
// import { OrderSummaryRow } from "../Components/OrderSummary";

// const SHIPPING_FEE = 1;

// export default function CheckoutPage() {
//   const navigation = useNavigation();
//   const [isProcessing, setIsProcessing] = useState(false);
//   const [paymentError, setPaymentError] = useState<string | null>(null);
//   const { items, total, discountedTotal, appliedCoupon, clearCart } =
//     useCartStore();

//   useFocusEffect(
//     useCallback(() => {
//       navigation.setOptions({
//         gestureEnabled: !isProcessing,
//       });
//     }, [isProcessing])
//   );

//   const subtotal = total;
//   const discount = appliedCoupon
//     ? appliedCoupon.type === "percentage"
//       ? (total * appliedCoupon.amount) / 100
//       : appliedCoupon.amount
//     : 0;
//   const finalTotal = (discountedTotal || total) + SHIPPING_FEE;

//   const handlePaymentResult = async (url: string) => {
//     try {
//       const params = new URLSearchParams(url.split("?")[1]);
//       const merchantTxnId = params.get("merchantTxnId");
//       const errorCode = params.get("errorCode");

//       if (errorCode === "0" && merchantTxnId) {
//         const verificationResult = await paymentApi.verifyPayment(
//           merchantTxnId
//         );

//         if (verificationResult.finalStatus === "success") {
//           clearCart();
//           Toast.show({
//             type: "success",
//             text1: "Payment Successful",
//             text2: "Your order has been confirmed!",
//           });
//           router.replace("/(root)/order-success");
//         } else {
//           throw new Error(
//             verificationResult.StatusDescription || "Payment failed"
//           );
//         }
//       } else {
//         throw new Error(
//           params.get("errorMessage") || "Payment was not successful"
//         );
//       }
//     } catch (error: any) {
//       setPaymentError(error.message);
//       Toast.show({
//         type: "error",
//         text1: "Payment Failed",
//         text2: error.message,
//       });
//       router.replace("/(root)/order-failed");
//     }
//   };

//   const handlePayment = async () => {
//     if (isProcessing) return;
//     setPaymentError(null);
//     setIsProcessing(true);

//     try {
//       const response = await paymentApi.initiatePayment(
//         finalTotal,
//         items,
//         Platform.OS.toUpperCase()
//       );

//       if (response.paymentUrl) {
//         const result = await WebBrowser.openAuthSessionAsync(
//           response.paymentUrl,
//           "myapp://payment"
//         );

//         if (result.type === "success" && result.url) {
//           await handlePaymentResult(result.url);
//         } else if (result.type === "cancel") {
//           Toast.show({
//             type: "info",
//             text1: "Payment Cancelled",
//             text2: "You cancelled the payment process",
//           });
//           router.replace("/(root)/order-failed");
//         }
//       } else {
//         throw new Error("Could not initiate payment");
//       }
//     } catch (error: any) {
//       console.error("Payment error:", error);
//       setPaymentError(error.message);
//       Toast.show({
//         type: "error",
//         text1: "Payment Error",
//         text2: error.message,
//       });
//     } finally {
//       setIsProcessing(false);
//     }
//   };

//   if (items.length === 0) {
//     router.replace("/(root)/Cart");
//     return null;
//   }

//   return (
//     <SafeAreaView style={styles.safeArea}>
//       <ScrollView
//         style={styles.container}
//         contentContainerStyle={styles.contentContainer}
//       >
//         <Text style={styles.title}>Checkout</Text>

//         <View style={styles.card}>
//           <Text style={styles.cardTitle}>Order Summary</Text>

//           {items.map((item) => (
//             <View key={item.documentId} style={styles.itemRow}>
//               <Text style={styles.itemName}>
//                 {item.name} (x{item.quantity})
//               </Text>
//               <Text style={styles.itemPrice}>
//                 {((item.salesPrice || item.price) * item.quantity).toFixed(2)}{" "}
//                 KWD
//               </Text>
//             </View>
//           ))}

//           <View style={styles.summaryContainer}>
//             <OrderSummaryRow
//               label="Subtotal"
//               value={`${subtotal.toFixed(2)} KWD`}
//             />

//             {appliedCoupon && (
//               <OrderSummaryRow
//                 label={`Discount (${appliedCoupon.code})`}
//                 value={`- ${discount.toFixed(2)} KWD`}
//                 isDiscount
//               />
//             )}

//             <OrderSummaryRow
//               label="Shipping Fee"
//               value={`${SHIPPING_FEE.toFixed(2)} KWD`}
//             />

//             <OrderSummaryRow
//               label="Total"
//               value={`${finalTotal.toFixed(2)} KWD`}
//               isTotal
//             />
//           </View>
//         </View>

//         <View style={styles.securityNotice}>
//           <Shield size={20} color="#4B5563" />
//           <Text style={styles.securityText}>
//             Secure payment processed by Bookeey
//           </Text>
//         </View>

//         <TouchableOpacity
//           style={[styles.payButton, isProcessing && styles.payButtonDisabled]}
//           onPress={handlePayment}
//           disabled={isProcessing}
//         >
//           {isProcessing ? (
//             <ActivityIndicator color="white" />
//           ) : (
//             <View style={styles.payButtonContent}>
//               <CreditCard size={20} color="white" />
//               <Text style={styles.payButtonText}>
//                 Pay {finalTotal.toFixed(2)} KWD
//               </Text>
//             </View>
//           )}
//         </TouchableOpacity>

//         {paymentError && <Text style={styles.errorText}>{paymentError}</Text>}
//       </ScrollView>
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: {
//     flex: 1,
//     backgroundColor: "#f9fafb",
//   },
//   container: {
//     flex: 1,
//   },
//   contentContainer: {
//     padding: 16,
//     paddingBottom: 100,
//   },
//   title: {
//     fontSize: 24,
//     fontFamily: "Cairo-Bold",
//     color: "#1f2937",
//     marginBottom: 20,
//   },
//   card: {
//     backgroundColor: "white",
//     borderRadius: 12,
//     padding: 16,
//     marginBottom: 16,
//     ...Platform.select({
//       ios: {
//         shadowColor: "#000",
//         shadowOffset: { width: 0, height: 2 },
//         shadowOpacity: 0.1,
//         shadowRadius: 4,
//       },
//       android: {
//         elevation: 3,
//       },
//     }),
//   },
//   cardTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//     marginBottom: 16,
//   },
//   itemRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     marginBottom: 8,
//   },
//   itemName: {
//     flex: 1,
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4b5563",
//   },
//   itemPrice: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   summaryContainer: {
//     marginTop: 16,
//     paddingTop: 16,
//     borderTopWidth: 1,
//     borderTopColor: "#e5e7eb",
//   },
//   securityNotice: {
//     flexDirection: "row",
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 20,
//     gap: 8,
//   },
//   securityText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4B5563",
//   },
//   payButton: {
//     backgroundColor: "#10B981",
//     borderRadius: 25,
//     padding: 16,
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 8,
//   },
//   payButtonDisabled: {
//     opacity: 0.5,
//   },
//   payButtonContent: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 8,
//   },
//   payButtonText: {
//     color: "white",
//     fontSize: 16,
//     fontFamily: "Cairo-Bold",
//   },
//   errorText: {
//     color: "#DC2626",
//     textAlign: "center",
//     marginTop: 8,
//     fontFamily: "Cairo",
//   },
// });

/************************************** */

// // app/(root)/Checkout.tsx
// import React, { useState, useCallback, useEffect } from "react";
// import {
//   View,
//   Text,
//   ScrollView,
//   Alert,
//   ActivityIndicator,
//   StyleSheet,
//   Platform,
//   TouchableOpacity,
//   SafeAreaView,
//   BackHandler,
// } from "react-native";
// import { router, useNavigation } from "expo-router";
// import * as WebBrowser from "expo-web-browser";
// import { useFocusEffect } from "@react-navigation/native";
// import { Shield, CreditCard, ArrowLeft } from "lucide-react-native";
// import Toast from "react-native-toast-message";
// import NetInfo from "@react-native-community/netinfo";
// import useCartStore from "../../store/cartStore";
// import { paymentApi } from "../servicies/api/payment";
// import { OrderSummaryRow } from "../Components/OrderSummary";

// const SHIPPING_FEE = 1;
// const DEBUG = process.env.EXPO_PUBLIC_DEBUG === "true";

// export default function CheckoutPage() {
//   const navigation = useNavigation();
//   const [isProcessing, setIsProcessing] = useState(false);
//   const [paymentError, setPaymentError] = useState<string | null>(null);
//   const { items, total, discountedTotal, appliedCoupon, clearCart } =
//     useCartStore();

//   useEffect(() => {
//     const backHandler = BackHandler.addEventListener(
//       "hardwareBackPress",
//       () => {
//         if (isProcessing) {
//           Alert.alert("Cancel Payment?", "Are you sure you want to cancel?", [
//             { text: "No", style: "cancel" },
//             {
//               text: "Yes",
//               style: "destructive",
//               onPress: () => router.replace("/(root)/order-failed"),
//             },
//           ]);
//           return true;
//         }
//         return false;
//       }
//     );
//     return () => backHandler.remove();
//   }, [isProcessing]);

//   useFocusEffect(
//     useCallback(() => {
//       navigation.setOptions({
//         gestureEnabled: !isProcessing,
//         headerLeft: () => (
//           <TouchableOpacity
//             onPress={() => router.back()}
//             disabled={isProcessing}
//           >
//             <ArrowLeft color={isProcessing ? "#9CA3AF" : "#E53935"} size={24} />
//           </TouchableOpacity>
//         ),
//       });
//     }, [isProcessing])
//   );

//   const subtotal = total;
//   const discount = appliedCoupon
//     ? appliedCoupon.type === "percentage"
//       ? (total * appliedCoupon.amount) / 100
//       : appliedCoupon.amount
//     : 0;
//   const finalTotal = (discountedTotal || total) + SHIPPING_FEE;

//   const handlePaymentResult = async (url: string) => {
//     try {
//       const params = new URLSearchParams(url.split("?")[1]);
//       const merchantTxnId = params.get("merchantTxnId");
//       const errorCode = params.get("errorCode");

//       if (errorCode === "0" && merchantTxnId) {
//         const verificationResult = await paymentApi.verifyPayment(
//           merchantTxnId
//         );

//         if (verificationResult.finalStatus === "success") {
//           clearCart();
//           Toast.show({
//             type: "success",
//             text1: "Payment Successful",
//             text2: "Your order has been confirmed!",
//           });
//           router.replace("/(root)/order-success");
//         } else {
//           throw new Error(
//             verificationResult.StatusDescription || "Payment failed"
//           );
//         }
//       } else {
//         throw new Error(
//           params.get("errorMessage") || "Payment was not successful"
//         );
//       }
//     } catch (error: any) {
//       setPaymentError(error.message);
//       Toast.show({
//         type: "error",
//         text1: "Payment Failed",
//         text2: error.message,
//       });
//       router.replace("/(root)/order-failed");
//     }
//   };

//   const handlePayment = async () => {
//     if (isProcessing) return;

//     const netInfo = await NetInfo.fetch();
//     if (!netInfo.isConnected) {
//       Toast.show({
//         type: "error",
//         text1: "No Internet Connection",
//         text2: "Please check your connection and try again",
//       });
//       return;
//     }

//     setPaymentError(null);
//     setIsProcessing(true);

//     try {
//       const formattedItems = items.map((item) => ({
//         id: item.documentId,
//         name: item.name,
//         quantity: item.quantity,
//         price: Number((item.salesPrice || item.price).toFixed(3)),
//       }));

//       const response = await paymentApi.initiatePayment(
//         Number(finalTotal.toFixed(3)),
//         formattedItems,
//         Platform.OS.toUpperCase()
//       );

//       if (response.paymentUrl) {
//         const result = await WebBrowser.openAuthSessionAsync(
//           response.paymentUrl,
//           "myapp://payment"
//         );

//         if (result.type === "success" && result.url) {
//           await handlePaymentResult(result.url);
//         } else if (result.type === "cancel") {
//           Toast.show({
//             type: "info",
//             text1: "Payment Cancelled",
//             text2: "You cancelled the payment process",
//           });
//           router.replace("/(root)/order-failed");
//         }
//       } else {
//         throw new Error("Could not initiate payment");
//       }
//     } catch (error: any) {
//       if (DEBUG) console.error("Payment error:", error);
//       const errorMessage = error.response?.data?.error || error.message;
//       setPaymentError(errorMessage);
//       Toast.show({
//         type: "error",
//         text1: "Payment Error",
//         text2: errorMessage,
//       });
//     } finally {
//       setIsProcessing(false);
//     }
//   };

//   if (items.length === 0) {
//     router.replace("/(root)/Cart");
//     return null;
//   }

//   return (
//     <SafeAreaView style={styles.safeArea}>
//       <ScrollView
//         style={styles.container}
//         contentContainerStyle={styles.contentContainer}
//       >
//         <Text style={styles.title}>Checkout</Text>
//         <View style={styles.card}>
//           <Text style={styles.cardTitle}>Order Summary</Text>
//           {items.map((item) => (
//             <View key={item.documentId} style={styles.itemRow}>
//               <Text style={styles.itemName}>
//                 {item.name} (x{item.quantity})
//               </Text>
//               <Text style={styles.itemPrice}>
//                 {((item.salesPrice || item.price) * item.quantity).toFixed(3)}{" "}
//                 KWD
//               </Text>
//             </View>
//           ))}
//           <View style={styles.summaryContainer}>
//             <OrderSummaryRow
//               label="Subtotal"
//               value={`${subtotal.toFixed(3)} KWD`}
//             />
//             {appliedCoupon && (
//               <OrderSummaryRow
//                 label={`Discount (${appliedCoupon.code})`}
//                 value={`- ${discount.toFixed(3)} KWD`}
//                 isDiscount
//               />
//             )}
//             <OrderSummaryRow
//               label="Shipping Fee"
//               value={`${SHIPPING_FEE.toFixed(3)} KWD`}
//             />
//             <OrderSummaryRow
//               label="Total"
//               value={`${finalTotal.toFixed(3)} KWD`}
//               isTotal
//             />
//           </View>
//         </View>

//         <View style={styles.securityNotice}>
//           <Shield size={20} color="#4B5563" />
//           <Text style={styles.securityText}>
//             Secure payment processed by Bookeey
//           </Text>
//         </View>

//         <TouchableOpacity
//           style={[styles.payButton, isProcessing && styles.payButtonDisabled]}
//           onPress={handlePayment}
//           disabled={isProcessing}
//         >
//           {isProcessing ? (
//             <ActivityIndicator color="white" />
//           ) : (
//             <View style={styles.payButtonContent}>
//               <CreditCard size={20} color="white" />
//               <Text style={styles.payButtonText}>
//                 Pay {finalTotal.toFixed(3)} KWD
//               </Text>
//             </View>
//           )}
//         </TouchableOpacity>

//         {paymentError && <Text style={styles.errorText}>{paymentError}</Text>}
//       </ScrollView>
//     </SafeAreaView>
//   );
// }
// const styles = StyleSheet.create({
//   safeArea: {
//     flex: 1,
//     backgroundColor: "#f9fafb",
//   },
//   container: {
//     flex: 1,
//   },
//   contentContainer: {
//     padding: 16,
//     paddingBottom: 100,
//   },
//   title: {
//     fontSize: 24,
//     fontFamily: "Cairo-Bold",
//     color: "#1f2937",
//     marginBottom: 20,
//   },
//   card: {
//     backgroundColor: "white",
//     borderRadius: 12,
//     padding: 16,
//     marginBottom: 16,
//     ...Platform.select({
//       ios: {
//         shadowColor: "#000",
//         shadowOffset: { width: 0, height: 2 },
//         shadowOpacity: 0.1,
//         shadowRadius: 4,
//       },
//       android: {
//         elevation: 3,
//       },
//     }),
//   },
//   cardTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//     marginBottom: 16,
//   },
//   itemRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     marginBottom: 8,
//   },
//   itemName: {
//     flex: 1,
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4b5563",
//   },
//   itemPrice: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   summaryContainer: {
//     marginTop: 16,
//     paddingTop: 16,
//     borderTopWidth: 1,
//     borderTopColor: "#e5e7eb",
//   },
//   securityNotice: {
//     flexDirection: "row",
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 20,
//     gap: 8,
//   },
//   securityText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4B5563",
//   },
//   payButton: {
//     backgroundColor: "#10B981",
//     borderRadius: 25,
//     padding: 16,
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 8,
//   },
//   payButtonDisabled: {
//     opacity: 0.5,
//   },
//   payButtonContent: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 8,
//   },
//   payButtonText: {
//     color: "white",
//     fontSize: 16,
//     fontFamily: "Cairo-Bold",
//   },
//   errorText: {
//     color: "#DC2626",
//     textAlign: "center",
//     marginTop: 8,
//     fontFamily: "Cairo",
//   },
// });

/****************************** */

// // app/(root)/Checkout.tsx
// import React, { useState, useCallback, useEffect } from "react";
// import {
//   View,
//   Text,
//   ScrollView,
//   Alert,
//   ActivityIndicator,
//   StyleSheet,
//   Platform,
//   TouchableOpacity,
//   SafeAreaView,
//   BackHandler,
// } from "react-native";
// import { router, useNavigation } from "expo-router";
// import * as WebBrowser from "expo-web-browser";
// import { useFocusEffect } from "@react-navigation/native";
// import { Shield, CreditCard, ArrowLeft } from "lucide-react-native";
// import Toast from "react-native-toast-message";
// import NetInfo from "@react-native-community/netinfo";
// import useCartStore from "../../store/cartStore";
// import { paymentApi } from "../servicies/api/payment";
// import { OrderSummaryRow } from "../Components/OrderSummary";

// const SHIPPING_FEE = 1;
// const DEBUG = process.env.EXPO_PUBLIC_DEBUG === "true";

// interface PaymentInitResponse {
//   paymentId: number;
//   merchantTxnId: string;
//   paymentUrl: string;
// }

// export default function CheckoutPage() {
//   const navigation = useNavigation();
//   const [isProcessing, setIsProcessing] = useState(false);
//   const [paymentError, setPaymentError] = useState<string | null>(null);
//   const { items, total, discountedTotal, appliedCoupon, clearCart } =
//     useCartStore();

//   // Handle back button during payment
//   useEffect(() => {
//     const backHandler = BackHandler.addEventListener(
//       "hardwareBackPress",
//       () => {
//         if (isProcessing) {
//           Alert.alert(
//             "Cancel Payment?",
//             "Are you sure you want to cancel this payment?",
//             [
//               { text: "No", style: "cancel" },
//               {
//                 text: "Yes",
//                 style: "destructive",
//                 onPress: () => {
//                   setIsProcessing(false);
//                   router.replace("/(root)/order-failed");
//                 },
//               },
//             ]
//           );
//           return true;
//         }
//         return false;
//       }
//     );
//     return () => backHandler.remove();
//   }, [isProcessing]);

//   // Handle navigation options
//   useFocusEffect(
//     useCallback(() => {
//       navigation.setOptions({
//         gestureEnabled: !isProcessing,
//         headerLeft: () => (
//           <TouchableOpacity
//             onPress={() => router.back()}
//             disabled={isProcessing}
//           >
//             <ArrowLeft color={isProcessing ? "#9CA3AF" : "#E53935"} size={24} />
//           </TouchableOpacity>
//         ),
//       });
//     }, [isProcessing])
//   );

//   // Calculate totals
//   const subtotal = total;
//   const discount = appliedCoupon
//     ? appliedCoupon.type === "percentage"
//       ? (total * appliedCoupon.amount) / 100
//       : appliedCoupon.amount
//     : 0;
//   const finalTotal = (discountedTotal || total) + SHIPPING_FEE;

//   const handlePaymentResult = async (url: string) => {
//     try {
//       const params = new URLSearchParams(url.split("?")[1]);
//       const merchantTxnId = params.get("merchantTxnId");
//       const errorCode = params.get("errorCode");

//       if (!merchantTxnId) {
//         throw new Error("Invalid payment response");
//       }

//       if (errorCode === "0") {
//         const verificationResult = await paymentApi.verifyPayment(
//           merchantTxnId
//         );

//         if (verificationResult.finalStatus === "success") {
//           clearCart();
//           Toast.show({
//             type: "success",
//             text1: "Payment Successful",
//             text2: "Your order has been confirmed!",
//             position: "top",
//           });
//           router.replace("/(root)/order-success");
//         } else {
//           throw new Error(
//             verificationResult.StatusDescription ||
//               "Payment verification failed"
//           );
//         }
//       } else {
//         throw new Error(
//           params.get("errorMessage") || "Payment was not successful"
//         );
//       }
//     } catch (error: any) {
//       setPaymentError(error.message);
//       Toast.show({
//         type: "error",
//         text1: "Payment Failed",
//         text2: error.message,
//         position: "top",
//       });
//       router.replace("/(root)/order-failed");
//     }
//   };

//   // const handlePayment = async () => {
//   //   if (isProcessing) return;

//   //   try {
//   //     // Check network connectivity
//   //     const netInfo = await NetInfo.fetch();
//   //     if (!netInfo.isConnected) {
//   //       Toast.show({
//   //         type: "error",
//   //         text1: "No Internet Connection",
//   //         text2: "Please check your connection and try again",
//   //         position: "top",
//   //       });
//   //       return;
//   //     }

//   //     setPaymentError(null);
//   //     setIsProcessing(true);

//   //     const response = await paymentApi.initiatePayment(
//   //       Number(finalTotal.toFixed(3)),
//   //       items,
//   //       Platform.OS.toUpperCase()
//   //     );

//   //     if (!response?.paymentUrl) {
//   //       throw new Error("Invalid payment URL received");
//   //     }

//   //     const result = await WebBrowser.openAuthSessionAsync(
//   //       response.paymentUrl,
//   //       "myapp://payment"
//   //     );

//   //     if (result.type === "success" && result.url) {
//   //       await handlePaymentResult(result.url);
//   //     } else if (result.type === "cancel") {
//   //       Toast.show({
//   //         type: "info",
//   //         text1: "Payment Cancelled",
//   //         text2: "You cancelled the payment process",
//   //         position: "top",
//   //       });
//   //       router.replace("/(root)/order-failed");
//   //     } else {
//   //       throw new Error("Payment process was interrupted");
//   //     }
//   //   } catch (error: any) {
//   //     const errorMessage = error.message || "Payment failed";
//   //     if (DEBUG) {
//   //       console.error("Payment error:", error);
//   //     }
//   //     setPaymentError(errorMessage);
//   //     Toast.show({
//   //       type: "error",
//   //       text1: "Payment Error",
//   //       text2: errorMessage,
//   //       position: "top",
//   //     });
//   //   } finally {
//   //     setIsProcessing(false);
//   //   }
//   // };

//   const handlePayment = async () => {
//     if (isProcessing) return;

//     try {
//       // Check network first
//       const netInfo = await NetInfo.fetch();
//       if (!netInfo.isConnected) {
//         Toast.show({
//           type: "error",
//           text1: "No Internet Connection",
//           text2: "Please check your connection and try again",
//           position: "top",
//         });
//         return;
//       }

//       setPaymentError(null);
//       setIsProcessing(true);

//       // Validate API URL
//       if (!process.env.EXPO_PUBLIC_API_URL) {
//         throw new Error("Payment configuration error");
//       }

//       // Test server connectivity
//       try {
//         await axios.get(`${process.env.EXPO_PUBLIC_API_URL}/health`, {
//           timeout: 5000,
//           headers: { "ngrok-skip-browser-warning": "true" },
//         });
//       } catch (error) {
//         throw new Error("Payment server is not accessible");
//       }

//       const response = await paymentApi.initiatePayment(
//         Number(finalTotal.toFixed(3)),
//         items,
//         Platform.OS.toUpperCase()
//       );

//       if (!response?.paymentUrl) {
//         throw new Error("Invalid payment URL received");
//       }

//       if (DEBUG) {
//         console.log("Payment URL:", response.paymentUrl);
//       }

//       const result = await WebBrowser.openAuthSessionAsync(
//         response.paymentUrl,
//         "myapp://payment"
//       );

//       if (result.type === "success" && result.url) {
//         await handlePaymentResult(result.url);
//       } else if (result.type === "cancel") {
//         Toast.show({
//           type: "info",
//           text1: "Payment Cancelled",
//           text2: "You cancelled the payment process",
//           position: "top",
//         });
//         router.replace("/(root)/order-failed");
//       } else {
//         throw new Error("Payment process was interrupted");
//       }
//     } catch (error: any) {
//       const errorMessage = error.message || "Payment failed";
//       if (DEBUG) {
//         console.error("Payment error:", {
//           message: error.message,
//           stack: error.stack,
//           timestamp: new Date().toISOString(),
//         });
//       }
//       setPaymentError(errorMessage);
//       Toast.show({
//         type: "error",
//         text1: "Payment Error",
//         text2: errorMessage,
//         position: "top",
//       });
//     } finally {
//       setIsProcessing(false);
//     }
//   };

//   // Redirect if cart is empty
//   if (items.length === 0) {
//     router.replace("/(root)/Cart");
//     return null;
//   }

//   return (
//     <SafeAreaView style={styles.safeArea}>
//       <ScrollView
//         style={styles.container}
//         contentContainerStyle={styles.contentContainer}
//       >
//         <Text style={styles.title}>Checkout</Text>

//         <View style={styles.card}>
//           <Text style={styles.cardTitle}>Order Summary</Text>
//           {items.map((item) => (
//             <View key={item.documentId} style={styles.itemRow}>
//               <Text style={styles.itemName}>
//                 {item.name} (x{item.quantity})
//               </Text>
//               <Text style={styles.itemPrice}>
//                 {((item.salesPrice || item.price) * item.quantity).toFixed(3)}{" "}
//                 KWD
//               </Text>
//             </View>
//           ))}

//           <View style={styles.summaryContainer}>
//             <OrderSummaryRow
//               label="Subtotal"
//               value={`${subtotal.toFixed(3)} KWD`}
//             />

//             {appliedCoupon && (
//               <OrderSummaryRow
//                 label={`Discount (${appliedCoupon.code})`}
//                 value={`- ${discount.toFixed(3)} KWD`}
//                 isDiscount
//               />
//             )}

//             <OrderSummaryRow
//               label="Shipping Fee"
//               value={`${SHIPPING_FEE.toFixed(3)} KWD`}
//             />
//             <OrderSummaryRow
//               label="Total"
//               value={`${finalTotal.toFixed(3)} KWD`}
//               isTotal
//             />
//           </View>
//         </View>

//         <View style={styles.securityNotice}>
//           <Shield size={20} color="#4B5563" />
//           <Text style={styles.securityText}>
//             Secure payment processed by Bookeey
//           </Text>
//         </View>

//         <TouchableOpacity
//           style={[styles.payButton, isProcessing && styles.payButtonDisabled]}
//           onPress={handlePayment}
//           disabled={isProcessing}
//         >
//           {isProcessing ? (
//             <ActivityIndicator color="white" size="small" />
//           ) : (
//             <View style={styles.payButtonContent}>
//               <CreditCard size={20} color="white" />
//               <Text style={styles.payButtonText}>
//                 Pay {finalTotal.toFixed(3)} KWD
//               </Text>
//             </View>
//           )}
//         </TouchableOpacity>

//         {paymentError && <Text style={styles.errorText}>{paymentError}</Text>}
//       </ScrollView>
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: {
//     flex: 1,
//     backgroundColor: "#f9fafb",
//   },
//   container: {
//     flex: 1,
//   },
//   contentContainer: {
//     padding: 16,
//     paddingBottom: 100,
//   },
//   title: {
//     fontSize: 24,
//     fontFamily: "Cairo-Bold",
//     color: "#1f2937",
//     marginBottom: 20,
//   },
//   card: {
//     backgroundColor: "white",
//     borderRadius: 12,
//     padding: 16,
//     marginBottom: 16,
//     ...Platform.select({
//       ios: {
//         shadowColor: "#000",
//         shadowOffset: { width: 0, height: 2 },
//         shadowOpacity: 0.1,
//         shadowRadius: 4,
//       },
//       android: {
//         elevation: 3,
//       },
//     }),
//   },
//   cardTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//     marginBottom: 16,
//   },
//   itemRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     marginBottom: 8,
//   },
//   itemName: {
//     flex: 1,
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4b5563",
//   },
//   itemPrice: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   summaryContainer: {
//     marginTop: 16,
//     paddingTop: 16,
//     borderTopWidth: 1,
//     borderTopColor: "#e5e7eb",
//   },
//   securityNotice: {
//     flexDirection: "row",
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 20,
//     gap: 8,
//   },
//   securityText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4B5563",
//   },
//   payButton: {
//     backgroundColor: "#10B981",
//     borderRadius: 25,
//     padding: 16,
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 8,
//   },
//   payButtonDisabled: {
//     opacity: 0.5,
//   },
//   payButtonContent: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 8,
//   },
//   payButtonText: {
//     color: "white",
//     fontSize: 16,
//     fontFamily: "Cairo-Bold",
//   },
//   errorText: {
//     color: "#DC2626",
//     textAlign: "center",
//     marginTop: 8,
//     fontFamily: "Cairo",
//   },
// });

/***********************************************/

// // app/(root)/Checkout.tsx
// import React, { useState, useCallback, useEffect } from "react";
// import {
//   View,
//   Text,
//   ScrollView,
//   Alert,
//   ActivityIndicator,
//   StyleSheet,
//   Platform,
//   TouchableOpacity,
//   SafeAreaView,
//   BackHandler,
//   Modal,
// } from "react-native";
// import { router, useNavigation } from "expo-router";
// import { WebView } from "react-native-webview";
// import { useFocusEffect } from "@react-navigation/native";
// import { Shield, CreditCard, ArrowLeft } from "lucide-react-native";
// import Toast from "react-native-toast-message";
// import NetInfo from "@react-native-community/netinfo";
// import useCartStore from "../../store/cartStore";
// import { paymentApi } from "../servicies/api/payment";
// import { OrderSummaryRow } from "../Components/OrderSummary";

// const SHIPPING_FEE = 1;
// const DEBUG = process.env.EXPO_PUBLIC_DEBUG === "true";
// const API_URL = "https://d43f-188-236-186-72.ngrok-free.app";

// interface PaymentInitResponse {
//   paymentId: number;
//   merchantTxnId: string;
//   paymentUrl: string;
// }

// export default function CheckoutPage() {
//   const navigation = useNavigation();
//   const [isProcessing, setIsProcessing] = useState(false);
//   const [paymentError, setPaymentError] = useState<string | null>(null);
//   const [showWebView, setShowWebView] = useState(false);
//   const [paymentUrl, setPaymentUrl] = useState<string | null>(null);
//   const { items, total, discountedTotal, appliedCoupon, clearCart } =
//     useCartStore();

//   useEffect(() => {
//     const backHandler = BackHandler.addEventListener(
//       "hardwareBackPress",
//       () => {
//         if (showWebView) {
//           Alert.alert(
//             "Cancel Payment?",
//             "Are you sure you want to cancel this payment?",
//             [
//               { text: "No", style: "cancel" },
//               {
//                 text: "Yes",
//                 style: "destructive",
//                 onPress: () => {
//                   setShowWebView(false);
//                   setPaymentUrl(null);
//                   router.replace("/(root)/order-failed");
//                 },
//               },
//             ]
//           );
//           return true;
//         }
//         return false;
//       }
//     );
//     return () => backHandler.remove();
//   }, [showWebView]);

//   useFocusEffect(
//     useCallback(() => {
//       navigation.setOptions({
//         gestureEnabled: !showWebView,
//         headerLeft: () => (
//           <TouchableOpacity
//             onPress={() => router.back()}
//             disabled={showWebView}
//           >
//             <ArrowLeft color={showWebView ? "#9CA3AF" : "#E53935"} size={24} />
//           </TouchableOpacity>
//         ),
//       });
//     }, [showWebView])
//   );

//   const subtotal = total;
//   const discount = appliedCoupon
//     ? appliedCoupon.type === "percentage"
//       ? (total * appliedCoupon.amount) / 100
//       : appliedCoupon.amount
//     : 0;
//   const finalTotal = (discountedTotal || total) + SHIPPING_FEE;

//   const handlePaymentResult = (navState: any) => {
//     if (navState.url.includes("KfastSuccess")) {
//       clearCart();
//       setShowWebView(false);
//       setPaymentUrl(null);
//       Toast.show({
//         type: "success",
//         text1: "Payment Successful",
//         text2: "Your order has been confirmed!",
//         position: "top",
//       });
//       router.replace("/(root)/order-success");
//     } else if (navState.url.includes("KfastFail")) {
//       setShowWebView(false);
//       setPaymentUrl(null);
//       Toast.show({
//         type: "error",
//         text1: "Payment Failed",
//         text2: "Please try again",
//         position: "top",
//       });
//       router.replace("/(root)/order-failed");
//     }
//   };

//   const handlePayment = async () => {
//     if (isProcessing) return;

//     try {
//       const netInfo = await NetInfo.fetch();
//       if (!netInfo.isConnected) {
//         Toast.show({
//           type: "error",
//           text1: "No Internet Connection",
//           text2: "Please check your connection and try again",
//           position: "top",
//         });
//         return;
//       }

//       setIsProcessing(true);
//       setPaymentError(null);

//       const payload = {
//         amount: Number(finalTotal.toFixed(3)),
//         orderId: `ORD${Date.now()}${Math.random().toString(36).slice(2, 6)}`,
//         customerInfo: {
//           platform: Platform.OS.toUpperCase(),
//           items: items.map((item) => ({
//             id: item.documentId,
//             name: item.name,
//             quantity: item.quantity,
//             price: Number((item.salesPrice || item.price).toFixed(3)),
//           })),
//         },
//       };

//       const response = await fetch(`${API_URL}/api/payments/initiate`, {
//         method: "POST",
//         headers: {
//           "Content-Type": "application/json",
//           Accept: "application/json",
//           "ngrok-skip-browser-warning": "true",
//         },
//         body: JSON.stringify(payload),
//       });

//       const data = await response.json();

//       if (!data?.paymentUrl) {
//         throw new Error("Invalid payment URL received");
//       }

//       setPaymentUrl(data.paymentUrl);
//       setShowWebView(true);
//     } catch (error: any) {
//       const errorMessage = error.message || "Payment failed";
//       setPaymentError(errorMessage);
//       Toast.show({
//         type: "error",
//         text1: "Payment Error",
//         text2: errorMessage,
//         position: "top",
//       });
//     } finally {
//       setIsProcessing(false);
//     }
//   };

//   if (items.length === 0) {
//     router.replace("/(root)/Cart");
//     return null;
//   }

//   return (
//     <>
//       <SafeAreaView style={styles.safeArea}>
//         <ScrollView
//           style={styles.container}
//           contentContainerStyle={styles.contentContainer}
//         >
//           <Text style={styles.title}>Checkout</Text>

//           <View style={styles.card}>
//             <Text style={styles.cardTitle}>Order Summary</Text>
//             {items.map((item) => (
//               <View key={item.documentId} style={styles.itemRow}>
//                 <Text style={styles.itemName}>
//                   {item.name} (x{item.quantity})
//                 </Text>
//                 <Text style={styles.itemPrice}>
//                   {((item.salesPrice || item.price) * item.quantity).toFixed(3)}{" "}
//                   KWD
//                 </Text>
//               </View>
//             ))}

//             <View style={styles.summaryContainer}>
//               <OrderSummaryRow
//                 label="Subtotal"
//                 value={`${subtotal.toFixed(3)} KWD`}
//               />
//               {appliedCoupon && (
//                 <OrderSummaryRow
//                   label={`Discount (${appliedCoupon.code})`}
//                   value={`- ${discount.toFixed(3)} KWD`}
//                   isDiscount
//                 />
//               )}
//               <OrderSummaryRow
//                 label="Shipping Fee"
//                 value={`${SHIPPING_FEE.toFixed(3)} KWD`}
//               />
//               <OrderSummaryRow
//                 label="Total"
//                 value={`${finalTotal.toFixed(3)} KWD`}
//                 isTotal
//               />
//             </View>
//           </View>

//           <View style={styles.securityNotice}>
//             <Shield size={20} color="#4B5563" />
//             <Text style={styles.securityText}>
//               Secure payment processed by Bookeey
//             </Text>
//           </View>

//           <TouchableOpacity
//             style={[styles.payButton, isProcessing && styles.payButtonDisabled]}
//             onPress={handlePayment}
//             disabled={isProcessing}
//           >
//             {isProcessing ? (
//               <ActivityIndicator color="white" size="small" />
//             ) : (
//               <View style={styles.payButtonContent}>
//                 <CreditCard size={20} color="white" />
//                 <Text style={styles.payButtonText}>
//                   Pay {finalTotal.toFixed(3)} KWD
//                 </Text>
//               </View>
//             )}
//           </TouchableOpacity>

//           {paymentError && <Text style={styles.errorText}>{paymentError}</Text>}
//         </ScrollView>
//       </SafeAreaView>

//       <Modal
//         visible={showWebView}
//         animationType="slide"
//         onRequestClose={() => {
//           Alert.alert(
//             "Cancel Payment?",
//             "Are you sure you want to cancel this payment?",
//             [
//               { text: "No", style: "cancel" },
//               {
//                 text: "Yes",
//                 style: "destructive",
//                 onPress: () => {
//                   setShowWebView(false);
//                   setPaymentUrl(null);
//                   router.replace("/(root)/order-failed");
//                 },
//               },
//             ]
//           );
//         }}
//       >
//         <SafeAreaView style={styles.modalContainer}>
//           <View style={styles.webViewHeader}>
//             <TouchableOpacity
//               onPress={() => {
//                 Alert.alert(
//                   "Cancel Payment?",
//                   "Are you sure you want to cancel this payment?",
//                   [
//                     { text: "No", style: "cancel" },
//                     {
//                       text: "Yes",
//                       style: "destructive",
//                       onPress: () => {
//                         setShowWebView(false);
//                         setPaymentUrl(null);
//                         router.replace("/(root)/order-failed");
//                       },
//                     },
//                   ]
//                 );
//               }}
//               style={styles.webViewCloseButton}
//             >
//               <ArrowLeft color="#E53935" size={24} />
//             </TouchableOpacity>
//             <Text style={styles.webViewTitle}>Payment</Text>
//           </View>
//           {paymentUrl && (
//             <WebView
//               source={{ uri: paymentUrl }}
//               onNavigationStateChange={handlePaymentResult}
//               style={styles.webView}
//               incognito={true}
//               cacheEnabled={false}
//             />
//           )}
//         </SafeAreaView>
//       </Modal>
//     </>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: {
//     flex: 1,
//     backgroundColor: "#f9fafb",
//   },
//   container: {
//     flex: 1,
//   },
//   contentContainer: {
//     padding: 16,
//     paddingBottom: 100,
//   },
//   title: {
//     fontSize: 24,
//     fontFamily: "Cairo-Bold",
//     color: "#1f2937",
//     marginBottom: 20,
//   },
//   card: {
//     backgroundColor: "white",
//     borderRadius: 12,
//     padding: 16,
//     marginBottom: 16,
//     ...Platform.select({
//       ios: {
//         shadowColor: "#000",
//         shadowOffset: { width: 0, height: 2 },
//         shadowOpacity: 0.1,
//         shadowRadius: 4,
//       },
//       android: {
//         elevation: 3,
//       },
//     }),
//   },
//   cardTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//     marginBottom: 16,
//   },
//   itemRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     marginBottom: 8,
//   },
//   itemName: {
//     flex: 1,
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4b5563",
//   },
//   itemPrice: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   summaryContainer: {
//     marginTop: 16,
//     paddingTop: 16,
//     borderTopWidth: 1,
//     borderTopColor: "#e5e7eb",
//   },
//   securityNotice: {
//     flexDirection: "row",
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 20,
//     gap: 8,
//   },
//   securityText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4B5563",
//   },
//   payButton: {
//     backgroundColor: "#10B981",
//     borderRadius: 25,
//     padding: 16,
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 8,
//   },
//   payButtonDisabled: {
//     opacity: 0.5,
//   },
//   payButtonContent: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 8,
//   },
//   payButtonText: {
//     color: "white",
//     fontSize: 16,
//     fontFamily: "Cairo-Bold",
//   },
//   errorText: {
//     color: "#DC2626",
//     textAlign: "center",
//     marginTop: 8,
//     fontFamily: "Cairo",
//   },
//   modalContainer: {
//     flex: 1,
//     backgroundColor: "#fff",
//   },
//   webViewHeader: {
//     height: 56,
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     borderBottomWidth: 1,
//     borderBottomColor: "#E5E7EB",
//   },
//   webViewCloseButton: {
//     padding: 8,
//   },
//   webViewTitle: {
//     marginLeft: 16,
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   webView: {
//     flex: 1,
//   },
// });

/************************************* */

// // app/(root)/Checkout.tsx
// import React, { useState, useCallback, useEffect } from "react";
// import {
//   View,
//   Text,
//   ScrollView,
//   Alert,
//   ActivityIndicator,
//   StyleSheet,
//   Platform,
//   TouchableOpacity,
//   SafeAreaView,
//   BackHandler,
//   Modal,
//   StatusBar,
// } from "react-native";
// import { router, useNavigation } from "expo-router";
// import { WebView } from "react-native-webview";
// import { useFocusEffect } from "@react-navigation/native";
// import { Shield, CreditCard, ArrowLeft, Lock } from "lucide-react-native";
// import Toast from "react-native-toast-message";
// import NetInfo from "@react-native-community/netinfo";
// import useCartStore from "../../store/cartStore";
// import { OrderSummaryRow } from "../Components/OrderSummary";

// const SHIPPING_FEE = 1;
// const DEBUG = process.env.EXPO_PUBLIC_DEBUG === "true";
// const API_URL = "https://d43f-188-236-186-72.ngrok-free.app";

// export default function CheckoutPage() {
//   const navigation = useNavigation();
//   const [isProcessing, setIsProcessing] = useState(false);
//   const [paymentError, setPaymentError] = useState<string | null>(null);
//   const [showWebView, setShowWebView] = useState(false);
//   const [paymentUrl, setPaymentUrl] = useState<string | null>(null);
//   const [isWebViewLoading, setIsWebViewLoading] = useState(true);
//   const { items, total, discountedTotal, appliedCoupon, clearCart } =
//     useCartStore();

//   const handleBackPress = useCallback(() => {
//     if (showWebView) {
//       Alert.alert(
//         "Cancel Payment?",
//         "Are you sure you want to cancel? This payment will not be processed.",
//         [
//           {
//             text: "Continue Payment",
//             style: "cancel",
//             onPress: () => {},
//           },
//           {
//             text: "Cancel Payment",
//             style: "destructive",
//             onPress: () => {
//               setShowWebView(false);
//               setPaymentUrl(null);
//               router.replace("/(root)/order-failed");
//             },
//           },
//         ]
//       );
//       return true;
//     }
//     return false;
//   }, [showWebView]);

//   useEffect(() => {
//     const backHandler = BackHandler.addEventListener(
//       "hardwareBackPress",
//       handleBackPress
//     );
//     return () => backHandler.remove();
//   }, [handleBackPress]);

//   useFocusEffect(
//     useCallback(() => {
//       navigation.setOptions({
//         gestureEnabled: !showWebView,
//         headerLeft: () => (
//           <TouchableOpacity
//             onPress={() => router.back()}
//             disabled={showWebView}
//           >
//             <ArrowLeft color={showWebView ? "#9CA3AF" : "#E53935"} size={24} />
//           </TouchableOpacity>
//         ),
//       });
//     }, [showWebView])
//   );

//   const subtotal = total;
//   const discount = appliedCoupon
//     ? appliedCoupon.type === "percentage"
//       ? (total * appliedCoupon.amount) / 100
//       : appliedCoupon.amount
//     : 0;
//   const finalTotal = (discountedTotal || total) + SHIPPING_FEE;

//   const handlePaymentResult = (navState: any) => {
//     const { url } = navState;

//     if (url.includes("KfastSuccess")) {
//       clearCart();
//       setShowWebView(false);
//       setPaymentUrl(null);
//       Toast.show({
//         type: "success",
//         text1: "Payment Successful! 🎉",
//         text2: "Thank you for your order",
//         position: "top",
//         visibilityTime: 4000,
//       });
//       router.replace("/(root)/order-success");
//     } else if (url.includes("KfastFail")) {
//       setShowWebView(false);
//       setPaymentUrl(null);
//       Toast.show({
//         type: "error",
//         text1: "Payment Failed",
//         text2: "Please try again or use a different payment method",
//         position: "top",
//         visibilityTime: 4000,
//       });
//       router.replace("/(root)/order-failed");
//     }
//   };

//   const handlePayment = async () => {
//     if (isProcessing) return;

//     try {
//       const netInfo = await NetInfo.fetch();
//       if (!netInfo.isConnected) {
//         Toast.show({
//           type: "error",
//           text1: "No Internet Connection",
//           text2: "Please check your connection and try again",
//           position: "top",
//         });
//         return;
//       }

//       setIsProcessing(true);
//       setPaymentError(null);

//       const payload = {
//         amount: Number(finalTotal.toFixed(3)),
//         orderId: `ORD${Date.now()}${Math.random().toString(36).slice(2, 6)}`,
//         customerInfo: {
//           platform: Platform.OS.toUpperCase(),
//           items: items.map((item) => ({
//             id: item.documentId,
//             name: item.name,
//             quantity: item.quantity,
//             price: Number((item.salesPrice || item.price).toFixed(3)),
//           })),
//         },
//       };

//       const response = await fetch(`${API_URL}/api/payments/initiate`, {
//         method: "POST",
//         headers: {
//           "Content-Type": "application/json",
//           Accept: "application/json",
//           "ngrok-skip-browser-warning": "true",
//         },
//         body: JSON.stringify(payload),
//       });

//       if (!response.ok) {
//         throw new Error("Payment service temporarily unavailable");
//       }

//       const data = await response.json();

//       if (!data?.paymentUrl) {
//         throw new Error("Invalid payment response");
//       }

//       setPaymentUrl(data.paymentUrl);
//       setShowWebView(true);
//     } catch (error: any) {
//       const errorMessage = error.message || "Payment failed";
//       setPaymentError(errorMessage);
//       Toast.show({
//         type: "error",
//         text1: "Payment Error",
//         text2: errorMessage,
//         position: "top",
//       });
//     } finally {
//       setIsProcessing(false);
//     }
//   };

//   if (items.length === 0) {
//     router.replace("/(root)/Cart");
//     return null;
//   }

//   return (
//     <>
//       <StatusBar barStyle="dark-content" backgroundColor="#f9fafb" />
//       <SafeAreaView style={styles.safeArea}>
//         <ScrollView
//           style={styles.container}
//           contentContainerStyle={styles.contentContainer}
//           showsVerticalScrollIndicator={false}
//         >
//           <Text style={styles.title}>Secure Checkout</Text>

//           <View style={styles.card}>
//             <Text style={styles.cardTitle}>Order Summary</Text>
//             {items.map((item) => (
//               <View key={item.documentId} style={styles.itemRow}>
//                 <Text style={styles.itemName}>
//                   {item.name} (x{item.quantity})
//                 </Text>
//                 <Text style={styles.itemPrice}>
//                   {((item.salesPrice || item.price) * item.quantity).toFixed(3)}{" "}
//                   KWD
//                 </Text>
//               </View>
//             ))}

//             <View style={styles.summaryContainer}>
//               <OrderSummaryRow
//                 label="Subtotal"
//                 value={`${subtotal.toFixed(3)} KWD`}
//               />
//               {appliedCoupon && (
//                 <OrderSummaryRow
//                   label={`Discount (${appliedCoupon.code})`}
//                   value={`- ${discount.toFixed(3)} KWD`}
//                   isDiscount
//                 />
//               )}
//               <OrderSummaryRow
//                 label="Shipping Fee"
//                 value={`${SHIPPING_FEE.toFixed(3)} KWD`}
//               />
//               <OrderSummaryRow
//                 label="Total"
//                 value={`${finalTotal.toFixed(3)} KWD`}
//                 isTotal
//               />
//             </View>
//           </View>

//           <View style={styles.securityCard}>
//             <View style={styles.securityHeader}>
//               <Lock size={20} color="#10B981" />
//               <Text style={styles.securityTitle}>Secure Payment</Text>
//             </View>
//             <Text style={styles.securityText}>
//               • SSL encrypted payment processing{"\n"}• Verified by Bookeey
//               Payment Gateway{"\n"}• Your payment details are protected
//             </Text>
//           </View>

//           <TouchableOpacity
//             style={[styles.payButton, isProcessing && styles.payButtonDisabled]}
//             onPress={handlePayment}
//             disabled={isProcessing}
//             activeOpacity={0.7}
//           >
//             {isProcessing ? (
//               <ActivityIndicator color="white" size="small" />
//             ) : (
//               <View style={styles.payButtonContent}>
//                 <CreditCard size={20} color="white" />
//                 <Text style={styles.payButtonText}>
//                   Pay {finalTotal.toFixed(3)} KWD Securely
//                 </Text>
//               </View>
//             )}
//           </TouchableOpacity>

//           {paymentError && <Text style={styles.errorText}>{paymentError}</Text>}
//         </ScrollView>
//       </SafeAreaView>

//       <Modal
//         visible={showWebView}
//         animationType="slide"
//         onRequestClose={handleBackPress}
//       >
//         <SafeAreaView style={styles.modalContainer}>
//           <View style={styles.webViewHeader}>
//             <TouchableOpacity
//               onPress={handleBackPress}
//               style={styles.webViewCloseButton}
//               hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//             >
//               <ArrowLeft color="#E53935" size={24} />
//             </TouchableOpacity>
//             <View style={styles.webViewTitleContainer}>
//               <Lock size={16} color="#10B981" />
//               <Text style={styles.webViewTitle}>Secure Payment</Text>
//             </View>
//           </View>

//           {isWebViewLoading && (
//             <View style={styles.loadingContainer}>
//               <ActivityIndicator size="large" color="#10B981" />
//               <Text style={styles.loadingText}>
//                 Loading secure payment page...
//               </Text>
//             </View>
//           )}

//           {paymentUrl && (
//             <WebView
//               source={{ uri: paymentUrl }}
//               onNavigationStateChange={handlePaymentResult}
//               onLoadStart={() => setIsWebViewLoading(true)}
//               onLoadEnd={() => setIsWebViewLoading(false)}
//               style={styles.webView}
//               incognito={true}
//               cacheEnabled={false}
//               pullToRefreshEnabled={true}
//               startInLoadingState={true}
//               // renderLoading={() => null}
//             />
//           )}
//         </SafeAreaView>
//       </Modal>
//     </>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: {
//     flex: 1,
//     backgroundColor: "#f9fafb",
//   },
//   container: {
//     flex: 1,
//   },
//   contentContainer: {
//     padding: 16,
//     paddingBottom: 100,
//   },
//   title: {
//     fontSize: 24,
//     fontFamily: "Cairo-Bold",
//     color: "#1f2937",
//     marginBottom: 20,
//   },
//   // Card Styles
//   card: {
//     backgroundColor: "white",
//     borderRadius: 12,
//     padding: 16,
//     marginBottom: 16,
//     ...Platform.select({
//       ios: {
//         shadowColor: "#000",
//         shadowOffset: { width: 0, height: 2 },
//         shadowOpacity: 0.1,
//         shadowRadius: 4,
//       },
//       android: {
//         elevation: 3,
//       },
//     }),
//   },
//   cardTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//     marginBottom: 16,
//   },
//   // Item Styles
//   itemRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     marginBottom: 8,
//   },
//   itemName: {
//     flex: 1,
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4b5563",
//   },
//   itemPrice: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   summaryContainer: {
//     marginTop: 16,
//     paddingTop: 16,
//     borderTopWidth: 1,
//     borderTopColor: "#e5e7eb",
//   },
//   // Security Styles
//   securityNotice: {
//     flexDirection: "row",
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 20,
//     gap: 8,
//   },
//   securityText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4B5563",
//   },
//   securityCard: {
//     backgroundColor: "#f0fdf4",
//     borderRadius: 12,
//     padding: 16,
//     marginBottom: 20,
//     borderWidth: 1,
//     borderColor: "#86efac",
//   },
//   securityHeader: {
//     flexDirection: "row",
//     alignItems: "center",
//     marginBottom: 8,
//     gap: 8,
//   },
//   securityTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#047857",
//   },
//   // Button Styles
//   payButton: {
//     backgroundColor: "#10B981",
//     borderRadius: 25,
//     padding: 16,
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 8,
//   },
//   payButtonDisabled: {
//     opacity: 0.5,
//   },
//   payButtonContent: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 8,
//   },
//   payButtonText: {
//     color: "white",
//     fontSize: 16,
//     fontFamily: "Cairo-Bold",
//   },
//   // Error Styles
//   errorText: {
//     color: "#DC2626",
//     textAlign: "center",
//     marginTop: 8,
//     fontFamily: "Cairo",
//   },
//   // Modal and WebView Styles
//   modalContainer: {
//     flex: 1,
//     backgroundColor: "#fff",
//   },
//   webViewHeader: {
//     height: 56,
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     borderBottomWidth: 1,
//     borderBottomColor: "#E5E7EB",
//   },
//   webViewCloseButton: {
//     padding: 8,
//   },
//   webViewTitle: {
//     marginLeft: 16,
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   webViewTitleContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 8,
//   },
//   webView: {
//     flex: 1,
//   },
//   // Loading Styles
//   loadingContainer: {
//     position: "absolute",
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//     justifyContent: "center",
//     alignItems: "center",
//     backgroundColor: "#fff",
//   },
//   loadingText: {
//     marginTop: 12,
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#374151",
//   },
// });

/***************************************************** */

// // app/(root)/Checkout.tsx
// import React, { useState, useCallback, useEffect } from "react";
// import {
//   View,
//   Text,
//   ScrollView,
//   Alert,
//   ActivityIndicator,
//   StyleSheet,
//   Platform,
//   TouchableOpacity,
//   SafeAreaView,
//   BackHandler,
//   Modal,
//   StatusBar,
// } from "react-native";
// import { router, useNavigation } from "expo-router";
// import { WebView } from "react-native-webview";
// import { useFocusEffect } from "@react-navigation/native";
// import { Shield, CreditCard, ArrowLeft, Lock } from "lucide-react-native";
// import Toast from "react-native-toast-message";
// import NetInfo from "@react-native-community/netinfo";
// import useCartStore from "../../store/cartStore";
// import { OrderSummaryRow } from "../Components/OrderSummary";

// const SHIPPING_FEE = 1;
// const DEBUG = process.env.EXPO_PUBLIC_DEBUG === "true";
// const API_URL = "https://d43f-188-236-186-72.ngrok-free.app";

// export default function CheckoutPage() {
//   const navigation = useNavigation();
//   const [isProcessing, setIsProcessing] = useState(false);
//   const [paymentError, setPaymentError] = useState<string | null>(null);
//   const [showWebView, setShowWebView] = useState(false);
//   const [paymentUrl, setPaymentUrl] = useState<string | null>(null);
//   const [isWebViewLoading, setIsWebViewLoading] = useState(true);
//   const { items, total, discountedTotal, appliedCoupon, clearCart } =
//     useCartStore();

//   const handleBackPress = useCallback(() => {
//     if (showWebView) {
//       Alert.alert(
//         "Cancel Payment?",
//         "Are you sure you want to cancel? This payment will not be processed.",
//         [
//           {
//             text: "Continue Payment",
//             style: "cancel",
//             onPress: () => {},
//           },
//           {
//             text: "Cancel Payment",
//             style: "destructive",
//             onPress: () => {
//               setShowWebView(false);
//               setPaymentUrl(null);
//               router.replace("/(root)/order-failed");
//             },
//           },
//         ]
//       );
//       return true;
//     }
//     return false;
//   }, [showWebView]);

//   useEffect(() => {
//     const backHandler = BackHandler.addEventListener(
//       "hardwareBackPress",
//       handleBackPress
//     );
//     return () => backHandler.remove();
//   }, [handleBackPress]);

//   useFocusEffect(
//     useCallback(() => {
//       navigation.setOptions({
//         gestureEnabled: !showWebView,
//         headerLeft: () => (
//           <TouchableOpacity
//             onPress={() => router.back()}
//             disabled={showWebView}
//           >
//             <ArrowLeft color={showWebView ? "#9CA3AF" : "#E53935"} size={24} />
//           </TouchableOpacity>
//         ),
//       });
//     }, [showWebView])
//   );

//   const subtotal = total;
//   const discount = appliedCoupon
//     ? appliedCoupon.type === "percentage"
//       ? (total * appliedCoupon.amount) / 100
//       : appliedCoupon.amount
//     : 0;
//   const finalTotal = (discountedTotal || total) + SHIPPING_FEE;

//   const handlePaymentResult = (navState: any) => {
//     const { url } = navState;

//     if (url.includes("KfastSuccess")) {
//       clearCart();
//       setShowWebView(false);
//       setPaymentUrl(null);
//       Toast.show({
//         type: "success",
//         text1: "Payment Successful! 🎉",
//         text2: "Thank you for your order",
//         position: "top",
//         visibilityTime: 4000,
//       });
//       router.replace("/(root)/order-success");
//     } else if (url.includes("KfastFail")) {
//       setShowWebView(false);
//       setPaymentUrl(null);
//       Toast.show({
//         type: "error",
//         text1: "Payment Failed",
//         text2: "Please try again or use a different payment method",
//         position: "top",
//         visibilityTime: 4000,
//       });
//       router.replace("/(root)/order-failed");
//     }
//   };

//   const handlePayment = async () => {
//     if (isProcessing) return;

//     try {
//       const netInfo = await NetInfo.fetch();
//       if (!netInfo.isConnected) {
//         Toast.show({
//           type: "error",
//           text1: "No Internet Connection",
//           text2: "Please check your connection and try again",
//           position: "top",
//         });
//         return;
//       }

//       setIsProcessing(true);
//       setPaymentError(null);

//       const payload = {
//         amount: Number(finalTotal.toFixed(3)),
//         orderId: `ORD${Date.now()}${Math.random().toString(36).slice(2, 6)}`,
//         customerInfo: {
//           platform: Platform.OS.toUpperCase(),
//           items: items.map((item) => ({
//             id: item.documentId,
//             name: item.name,
//             quantity: item.quantity,
//             price: Number((item.salesPrice || item.price).toFixed(3)),
//           })),
//         },
//       };

//       const response = await fetch(`${API_URL}/api/payments/initiate`, {
//         method: "POST",
//         headers: {
//           "Content-Type": "application/json",
//           Accept: "application/json",
//           "ngrok-skip-browser-warning": "true",
//         },
//         body: JSON.stringify(payload),
//       });

//       if (!response.ok) {
//         throw new Error("Payment service temporarily unavailable");
//       }

//       const data = await response.json();

//       if (!data?.paymentUrl) {
//         throw new Error("Invalid payment response");
//       }

//       setPaymentUrl(data.paymentUrl);
//       setShowWebView(true);
//     } catch (error: any) {
//       const errorMessage = error.message || "Payment failed";
//       setPaymentError(errorMessage);
//       Toast.show({
//         type: "error",
//         text1: "Payment Error",
//         text2: errorMessage,
//         position: "top",
//       });
//     } finally {
//       setIsProcessing(false);
//     }
//   };

//   if (items.length === 0) {
//     router.replace("/(root)/Cart");
//     return null;
//   }

//   return (
//     <>
//       <StatusBar barStyle="dark-content" backgroundColor="#f9fafb" />
//       <SafeAreaView style={styles.safeArea}>
//         <ScrollView
//           style={styles.container}
//           contentContainerStyle={styles.contentContainer}
//           showsVerticalScrollIndicator={false}
//         >
//           <Text style={styles.title}>Secure Checkout</Text>

//           <View style={styles.card}>
//             <Text style={styles.cardTitle}>Order Summary</Text>
//             {items.map((item) => (
//               <View key={item.documentId} style={styles.itemRow}>
//                 <Text style={styles.itemName}>
//                   {item.name} (x{item.quantity})
//                 </Text>
//                 <Text style={styles.itemPrice}>
//                   {((item.salesPrice || item.price) * item.quantity).toFixed(3)}{" "}
//                   KWD
//                 </Text>
//               </View>
//             ))}

//             <View style={styles.summaryContainer}>
//               <OrderSummaryRow
//                 label="Subtotal"
//                 value={`${subtotal.toFixed(3)} KWD`}
//               />
//               {appliedCoupon && (
//                 <OrderSummaryRow
//                   label={`Discount (${appliedCoupon.code})`}
//                   value={`- ${discount.toFixed(3)} KWD`}
//                   isDiscount
//                 />
//               )}
//               <OrderSummaryRow
//                 label="Shipping Fee"
//                 value={`${SHIPPING_FEE.toFixed(3)} KWD`}
//               />
//               <OrderSummaryRow
//                 label="Total"
//                 value={`${finalTotal.toFixed(3)} KWD`}
//                 isTotal
//               />
//             </View>
//           </View>

//           <View style={styles.securityCard}>
//             <View style={styles.securityHeader}>
//               <Lock size={20} color="#10B981" />
//               <Text style={styles.securityTitle}>Secure Payment</Text>
//             </View>
//             <Text style={styles.securityText}>
//               • SSL encrypted payment processing{"\n"}• Verified by Bookeey
//               Payment Gateway{"\n"}• Your payment details are protected
//             </Text>
//           </View>

//           <TouchableOpacity
//             style={[styles.payButton, isProcessing && styles.payButtonDisabled]}
//             onPress={handlePayment}
//             disabled={isProcessing}
//             activeOpacity={0.7}
//           >
//             {isProcessing ? (
//               <ActivityIndicator color="white" size="small" />
//             ) : (
//               <View style={styles.payButtonContent}>
//                 <CreditCard size={20} color="white" />
//                 <Text style={styles.payButtonText}>
//                   Pay {finalTotal.toFixed(3)} KWD Securely
//                 </Text>
//               </View>
//             )}
//           </TouchableOpacity>

//           {paymentError && <Text style={styles.errorText}>{paymentError}</Text>}
//         </ScrollView>
//       </SafeAreaView>

//       <Modal
//         visible={showWebView}
//         animationType="slide"
//         onRequestClose={handleBackPress}
//       >
//         <SafeAreaView style={styles.modalContainer}>
//           <View style={styles.webViewHeader}>
//             <TouchableOpacity
//               onPress={handleBackPress}
//               style={styles.webViewCloseButton}
//               hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//             >
//               <ArrowLeft color="#E53935" size={24} />
//             </TouchableOpacity>
//             <View style={styles.webViewTitleContainer}>
//               <Lock size={16} color="#10B981" />
//               <Text style={styles.webViewTitle}>Secure Payment</Text>
//             </View>
//           </View>

//           {isWebViewLoading && (
//             <View style={styles.loadingContainer}>
//               <ActivityIndicator size="large" color="#10B981" />
//               <Text style={styles.loadingText}>
//                 Loading secure payment page...
//               </Text>
//             </View>
//           )}

//           {paymentUrl && (
//             <WebView
//               source={{ uri: paymentUrl }}
//               onNavigationStateChange={handlePaymentResult}
//               onLoadStart={() => setIsWebViewLoading(true)}
//               onLoadEnd={() => setIsWebViewLoading(false)}
//               style={styles.webView}
//               incognito={true}
//               cacheEnabled={false}
//               pullToRefreshEnabled={true}
//               startInLoadingState={true}
//               // renderLoading={() => null}
//             />
//           )}
//         </SafeAreaView>
//       </Modal>
//     </>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: {
//     flex: 1,
//     backgroundColor: "#f9fafb",
//   },
//   container: {
//     flex: 1,
//   },
//   contentContainer: {
//     padding: 16,
//     paddingBottom: 100,
//   },
//   title: {
//     fontSize: 24,
//     fontFamily: "Cairo-Bold",
//     color: "#1f2937",
//     marginBottom: 20,
//   },
//   // Card Styles
//   card: {
//     backgroundColor: "white",
//     borderRadius: 12,
//     padding: 16,
//     marginBottom: 16,
//     ...Platform.select({
//       ios: {
//         shadowColor: "#000",
//         shadowOffset: { width: 0, height: 2 },
//         shadowOpacity: 0.1,
//         shadowRadius: 4,
//       },
//       android: {
//         elevation: 3,
//       },
//     }),
//   },
//   cardTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//     marginBottom: 16,
//   },
//   // Item Styles
//   itemRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     marginBottom: 8,
//   },
//   itemName: {
//     flex: 1,
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4b5563",
//   },
//   itemPrice: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   summaryContainer: {
//     marginTop: 16,
//     paddingTop: 16,
//     borderTopWidth: 1,
//     borderTopColor: "#e5e7eb",
//   },
//   // Security Styles
//   securityNotice: {
//     flexDirection: "row",
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 20,
//     gap: 8,
//   },
//   securityText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4B5563",
//   },
//   securityCard: {
//     backgroundColor: "#f0fdf4",
//     borderRadius: 12,
//     padding: 16,
//     marginBottom: 20,
//     borderWidth: 1,
//     borderColor: "#86efac",
//   },
//   securityHeader: {
//     flexDirection: "row",
//     alignItems: "center",
//     marginBottom: 8,
//     gap: 8,
//   },
//   securityTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#047857",
//   },
//   // Button Styles
//   payButton: {
//     backgroundColor: "#10B981",
//     borderRadius: 25,
//     padding: 16,
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 8,
//   },
//   payButtonDisabled: {
//     opacity: 0.5,
//   },
//   payButtonContent: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 8,
//   },
//   payButtonText: {
//     color: "white",
//     fontSize: 16,
//     fontFamily: "Cairo-Bold",
//   },
//   // Error Styles
//   errorText: {
//     color: "#DC2626",
//     textAlign: "center",
//     marginTop: 8,
//     fontFamily: "Cairo",
//   },
//   // Modal and WebView Styles
//   modalContainer: {
//     flex: 1,
//     backgroundColor: "#fff",
//   },
//   webViewHeader: {
//     height: 56,
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     borderBottomWidth: 1,
//     borderBottomColor: "#E5E7EB",
//   },
//   webViewCloseButton: {
//     padding: 8,
//   },
//   webViewTitle: {
//     marginLeft: 16,
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   webViewTitleContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 8,
//   },
//   webView: {
//     flex: 1,
//   },
//   // Loading Styles
//   loadingContainer: {
//     position: "absolute",
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//     justifyContent: "center",
//     alignItems: "center",
//     backgroundColor: "#fff",
//   },
//   loadingText: {
//     marginTop: 12,
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#374151",
//   },
// });

/**************************************************** */
// //Test Works

// // app/(root)/Checkout.tsx
// import React, { useState, useCallback, useEffect } from "react";
// import {
//   View,
//   Text,
//   ScrollView,
//   Alert,
//   ActivityIndicator,
//   StyleSheet,
//   Platform,
//   TouchableOpacity,
//   SafeAreaView,
//   BackHandler,
//   Modal,
//   StatusBar,
// } from "react-native";
// import { router, useNavigation } from "expo-router";
// import { WebView } from "react-native-webview";
// import { useFocusEffect } from "@react-navigation/native";
// import { Shield, CreditCard, ArrowLeft, Lock } from "lucide-react-native";
// import Toast from "react-native-toast-message";
// import NetInfo from "@react-native-community/netinfo";
// import useCartStore from "../../store/cartStore";
// import { OrderSummaryRow } from "../Components/OrderSummary";
// import useShippingFee from "../hooks/useShippingFee";

// // const SHIPPING_FEE = 1;

// const DEBUG = process.env.EXPO_PUBLIC_DEBUG === "true";
// const API_URL = "https://f36b-37-36-175-221.ngrok-free.app";

// // Injection script for WebView
// const injectScript = `
// (function() {
//     // Skip ngrok warning
//     document.cookie = "ngrok-skip-browser-warning=true";

//     // Auto-click the ngrok warning button if present
//     const button = document.querySelector('.button');
//     if (button) {
//         button.click();
//     }

//     // Monitor payment status
//     const observer = new MutationObserver(function(mutations) {
//         mutations.forEach(function(mutation) {
//             if (mutation.target.textContent.includes('Payment Successful')) {
//                 window.ReactNativeWebView.postMessage('PAYMENT_SUCCESS');
//             } else if (mutation.target.textContent.includes('Payment Failed')) {
//                 window.ReactNativeWebView.postMessage('PAYMENT_FAILED');
//             }
//         });
//     });

//     observer.observe(document.body, {
//         childList: true,
//         subtree: true
//     });
// })();
// `;

// const PaymentLoadingOverlay = () => (
//   <View style={styles.loadingOverlay}>
//     <View style={styles.loadingCard}>
//       <ActivityIndicator size="large" color="#10B981" />
//       <Text style={styles.loadingTitle}>Processing Payment</Text>
//       <Text style={styles.loadingSubtext}>Please don't close this window</Text>
//     </View>
//   </View>
// );

// export default function CheckoutPage() {
//   //Dynamic Shipping Feed
//   const {
//     shippingFee,
//     loading: isLoadingShippingFee,
//     error: shippingFeeError,
//   } = useShippingFee();
//   const navigation = useNavigation();
//   const [isProcessing, setIsProcessing] = useState(false);
//   const [paymentError, setPaymentError] = useState<string | null>(null);
//   const [showWebView, setShowWebView] = useState(false);
//   const [paymentUrl, setPaymentUrl] = useState<string | null>(null);
//   const [isWebViewLoading, setIsWebViewLoading] = useState(true);
//   const { items, total, discountedTotal, appliedCoupon, clearCart } =
//     useCartStore();

//   const handleBackPress = useCallback(() => {
//     if (showWebView) {
//       Alert.alert(
//         "Cancel Payment?",
//         "Are you sure you want to cancel? This payment will not be processed.",
//         [
//           {
//             text: "Continue Payment",
//             style: "cancel",
//             onPress: () => {},
//           },
//           {
//             text: "Cancel Payment",
//             style: "destructive",
//             onPress: () => {
//               setShowWebView(false);
//               setPaymentUrl(null);
//               router.replace("/(root)/order-failed");
//             },
//           },
//         ]
//       );
//       return true;
//     }
//     return false;
//   }, [showWebView]);

//   useEffect(() => {
//     const backHandler = BackHandler.addEventListener(
//       "hardwareBackPress",
//       handleBackPress
//     );
//     return () => backHandler.remove();
//   }, [handleBackPress]);

//   useFocusEffect(
//     useCallback(() => {
//       navigation.setOptions({
//         gestureEnabled: !showWebView,
//         headerLeft: () => (
//           <TouchableOpacity
//             onPress={() => router.back()}
//             disabled={showWebView}
//           >
//             <ArrowLeft color={showWebView ? "#9CA3AF" : "#E53935"} size={24} />
//           </TouchableOpacity>
//         ),
//       });
//     }, [showWebView])
//   );

//   const subtotal = total;
//   const discount = appliedCoupon
//     ? appliedCoupon.type === "percentage"
//       ? (total * appliedCoupon.amount) / 100
//       : appliedCoupon.amount
//     : 0;
//   const finalTotal = (discountedTotal || total) + shippingFee;

//   const handlePaymentSuccess = () => {
//     clearCart();
//     setShowWebView(false);
//     setPaymentUrl(null);
//     Toast.show({
//       type: "success",
//       text1: "Payment Successful! 🎉",
//       text2: "Thank you for your order",
//       position: "top",
//       visibilityTime: 4000,
//     });
//     router.replace("/(root)/order-success");
//   };

//   const handlePaymentFailure = () => {
//     setShowWebView(false);
//     setPaymentUrl(null);
//     Toast.show({
//       type: "error",
//       text1: "Payment Failed",
//       text2: "Please try again or use a different payment method",
//       position: "top",
//       visibilityTime: 4000,
//     });
//     router.replace("/(root)/order-failed");
//   };

//   const handlePaymentError = (errorMessage: string) => {
//     setPaymentError(errorMessage);
//     Toast.show({
//       type: "error",
//       text1: "Payment Error",
//       text2: errorMessage || "An error occurred during payment",
//       position: "top",
//     });
//   };

//   const handlePayment = async () => {
//     if (isProcessing) return;

//     try {
//       const netInfo = await NetInfo.fetch();
//       if (!netInfo.isConnected) {
//         Toast.show({
//           type: "error",
//           text1: "No Internet Connection",
//           text2: "Please check your connection and try again",
//           position: "top",
//         });
//         return;
//       }

//       setIsProcessing(true);
//       setPaymentError(null);

//       const payload = {
//         amount: Number(finalTotal.toFixed(3)),
//         orderId: `ORD${Date.now()}${Math.random().toString(36).slice(2, 6)}`,
//         customerInfo: {
//           platform: Platform.OS.toUpperCase(),
//           items: items.map((item) => ({
//             id: item.documentId,
//             name: item.name,
//             quantity: item.quantity,
//             price: Number((item.salesPrice || item.price).toFixed(3)),
//           })),
//         },
//       };

//       const response = await fetch(`${API_URL}/api/payments/initiate`, {
//         method: "POST",
//         headers: {
//           "Content-Type": "application/json",
//           Accept: "application/json",
//           "ngrok-skip-browser-warning": "true",
//         },
//         body: JSON.stringify(payload),
//       });

//       if (!response.ok) {
//         throw new Error("Payment service temporarily unavailable");
//       }

//       const data = await response.json();

//       if (!data?.paymentUrl) {
//         throw new Error("Invalid payment response");
//       }

//       setPaymentUrl(data.paymentUrl);
//       setShowWebView(true);
//     } catch (error: any) {
//       const errorMessage = error.message || "Payment failed";
//       setPaymentError(errorMessage);
//       Toast.show({
//         type: "error",
//         text1: "Payment Error",
//         text2: errorMessage,
//         position: "top",
//       });
//     } finally {
//       setIsProcessing(false);
//     }
//   };

//   if (items.length === 0) {
//     router.replace("/(root)/Cart");
//     return null;
//   }

//   return (
//     <>
//       <StatusBar barStyle="dark-content" backgroundColor="#f9fafb" />
//       <SafeAreaView style={styles.safeArea}>
//         <ScrollView
//           style={styles.container}
//           contentContainerStyle={styles.contentContainer}
//           showsVerticalScrollIndicator={false}
//         >
//           <Text style={styles.title}>Secure Checkout</Text>

//           <View style={styles.card}>
//             <Text style={styles.cardTitle}>Order Summary</Text>
//             {items.map((item) => (
//               <View key={item.documentId} style={styles.itemRow}>
//                 <Text style={styles.itemName}>
//                   {item.name} (x{item.quantity})
//                 </Text>
//                 <Text style={styles.itemPrice}>
//                   {((item.salesPrice || item.price) * item.quantity).toFixed(3)}{" "}
//                   KWD
//                 </Text>
//               </View>
//             ))}
//             {/* <View style={styles.summaryContainer}>
//               <OrderSummaryRow
//                 label="Subtotal"
//                 value={`${subtotal.toFixed(3)} KWD`}
//               />
//               {appliedCoupon && (
//                 <OrderSummaryRow
//                   label={`Discount (${appliedCoupon.code})`}
//                   value={`- ${discount.toFixed(3)} KWD`}
//                   isDiscount
//                 />
//               )}
//               <OrderSummaryRow
//                 label="Shipping Fee"
//                 value={`${shippingFee.toFixed(3)} KWD`}
//               />
//               <OrderSummaryRow
//                 label="Total"
//                 value={`${finalTotal.toFixed(3)} KWD`}
//                 isTotal
//               />
//             </View> */}

//             <View style={styles.summaryContainer}>
//               <OrderSummaryRow
//                 label="Subtotal"
//                 value={`${subtotal.toFixed(3)} KWD`}
//               />
//               {appliedCoupon && (
//                 <OrderSummaryRow
//                   label={`Discount (${appliedCoupon.code})`}
//                   value={`- ${discount.toFixed(3)} KWD`}
//                   isDiscount
//                 />
//               )}
//               <View style={styles.shippingFeeRow}>
//                 <Text style={styles.summaryLabel}>Shipping Fee</Text>
//                 <View style={styles.shippingFeeValueContainer}>
//                   {isLoadingShippingFee ? (
//                     <ActivityIndicator
//                       size="small"
//                       color="#10B981"
//                       style={styles.shippingFeeLoader}
//                     />
//                   ) : shippingFeeError ? (
//                     <TouchableOpacity
//                       onPress={() =>
//                         Toast.show({
//                           type: "error",
//                           text1: "Shipping Fee Error",
//                           text2:
//                             "Failed to load shipping fee. Please try again later.",
//                           position: "top",
//                         })
//                       }
//                     >
//                       <Text style={styles.errorValue}>Error loading fee</Text>
//                     </TouchableOpacity>
//                   ) : (
//                     <Text style={styles.summaryValue}>{`${shippingFee.toFixed(
//                       3
//                     )} KWD`}</Text>
//                   )}
//                 </View>
//               </View>
//               <OrderSummaryRow
//                 label="Total"
//                 value={`${finalTotal.toFixed(3)} KWD`}
//                 isTotal
//               />
//             </View>
//           </View>

//           <View style={styles.securityCard}>
//             <View style={styles.securityHeader}>
//               <Lock size={20} color="#10B981" />
//               <Text style={styles.securityTitle}>Secure Payment</Text>
//             </View>
//             <Text style={styles.securityText}>
//               • SSL encrypted payment processing{"\n"}• Verified by Bookeey
//               Payment Gateway{"\n"}• Your payment details are protected
//             </Text>
//           </View>

//           <TouchableOpacity
//             style={[styles.payButton, isProcessing && styles.payButtonDisabled]}
//             onPress={handlePayment}
//             disabled={isProcessing}
//             activeOpacity={0.7}
//           >
//             {isProcessing ? (
//               <ActivityIndicator color="white" size="small" />
//             ) : (
//               <View style={styles.payButtonContent}>
//                 <CreditCard size={20} color="white" />
//                 <Text style={styles.payButtonText}>
//                   Pay {finalTotal.toFixed(3)} KWD Securely
//                 </Text>
//               </View>
//             )}
//           </TouchableOpacity>

//           {paymentError && <Text style={styles.errorText}>{paymentError}</Text>}
//         </ScrollView>
//       </SafeAreaView>

//       <Modal
//         visible={showWebView}
//         animationType="slide"
//         onRequestClose={handleBackPress}
//       >
//         <SafeAreaView style={styles.modalContainer}>
//           <View style={styles.webViewHeader}>
//             <TouchableOpacity
//               onPress={handleBackPress}
//               style={styles.webViewCloseButton}
//               hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//             >
//               <ArrowLeft color="#E53935" size={24} />
//             </TouchableOpacity>
//             <View style={styles.webViewTitleContainer}>
//               <Lock size={16} color="#10B981" />
//               <Text style={styles.webViewTitle}>Secure Payment</Text>
//             </View>
//           </View>

//           {isWebViewLoading && (
//             <View style={styles.loadingContainer}>
//               <ActivityIndicator size="large" color="#10B981" />
//               <Text style={styles.loadingText}>
//                 Loading secure payment page...
//               </Text>
//             </View>
//           )}

//           {paymentUrl && (
//             <WebView
//               source={{
//                 uri: paymentUrl,
//                 headers: {
//                   "ngrok-skip-browser-warning": "true",
//                 },
//               }}
//               injectedJavaScript={injectScript}
//               onMessage={(event) => {
//                 const { data } = event.nativeEvent;
//                 if (data === "PAYMENT_SUCCESS") {
//                   handlePaymentSuccess();
//                 } else if (data === "PAYMENT_FAILED") {
//                   handlePaymentFailure();
//                 }
//               }}
//               onNavigationStateChange={(navState) => {
//                 console.log("Navigation State:", navState);
//                 if (
//                   navState.url.includes("KfastSuccess") ||
//                   navState.url.includes("success")
//                 ) {
//                   handlePaymentSuccess();
//                 } else if (
//                   navState.url.includes("KfastFail") ||
//                   navState.url.includes("fail")
//                 ) {
//                   handlePaymentFailure();
//                 }
//               }}
//               onLoadStart={() => setIsWebViewLoading(true)}
//               onLoadEnd={() => setIsWebViewLoading(false)}
//               onError={(syntheticEvent) => {
//                 const { nativeEvent } = syntheticEvent;
//                 console.warn("WebView error:", nativeEvent);
//                 handlePaymentError(nativeEvent.description);
//               }}
//               onHttpError={(syntheticEvent) => {
//                 const { nativeEvent } = syntheticEvent;
//                 console.warn("WebView HTTP error:", nativeEvent);
//                 handlePaymentError("Connection error");
//               }}
//               style={styles.webView}
//               incognito={true}
//               cacheEnabled={false}
//               domStorageEnabled={true}
//               javaScriptEnabled={true}
//               startInLoadingState={true}
//               renderLoading={() => <PaymentLoadingOverlay />}
//             />
//           )}
//         </SafeAreaView>
//       </Modal>
//     </>
//   );
// }

// const styles = StyleSheet.create({
//   // Base Styles
//   safeArea: {
//     flex: 1,
//     backgroundColor: "#f9fafb",
//   },
//   container: {
//     flex: 1,
//   },
//   contentContainer: {
//     padding: 16,
//     paddingBottom: 100,
//   },
//   title: {
//     fontSize: 24,
//     fontFamily: "Cairo-Bold",
//     color: "#1f2937",
//     marginBottom: 20,
//   },

//   // Card Styles
//   card: {
//     backgroundColor: "white",
//     borderRadius: 12,
//     padding: 16,
//     marginBottom: 16,
//     ...Platform.select({
//       ios: {
//         shadowColor: "#000",
//         shadowOffset: { width: 0, height: 2 },
//         shadowOpacity: 0.1,
//         shadowRadius: 4,
//       },
//       android: {
//         elevation: 3,
//       },
//     }),
//   },
//   cardTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//     marginBottom: 16,
//   },

//   // Item Styles
//   itemRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     marginBottom: 8,
//   },
//   itemName: {
//     flex: 1,
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4b5563",
//   },
//   itemPrice: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   summaryContainer: {
//     marginTop: 16,
//     paddingTop: 16,
//     borderTopWidth: 1,
//     borderTopColor: "#e5e7eb",
//   },

//   // Security Styles
//   securityNotice: {
//     flexDirection: "row",
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 20,
//     gap: 8,
//   },
//   securityText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4B5563",
//   },
//   securityCard: {
//     backgroundColor: "#f0fdf4",
//     borderRadius: 12,
//     padding: 16,
//     marginBottom: 20,
//     borderWidth: 1,
//     borderColor: "#86efac",
//   },
//   securityHeader: {
//     flexDirection: "row",
//     alignItems: "center",
//     marginBottom: 8,
//     gap: 8,
//   },
//   securityTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#047857",
//   },

//   // Button Styles
//   payButton: {
//     backgroundColor: "#10B981",
//     borderRadius: 25,
//     padding: 16,
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 8,
//   },
//   payButtonDisabled: {
//     opacity: 0.5,
//   },
//   payButtonContent: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 8,
//   },
//   payButtonText: {
//     color: "white",
//     fontSize: 16,
//     fontFamily: "Cairo-Bold",
//   },

//   // Error Styles
//   errorText: {
//     color: "#DC2626",
//     textAlign: "center",
//     marginTop: 8,
//     fontFamily: "Cairo",
//   },

//   // Modal and WebView Styles
//   modalContainer: {
//     flex: 1,
//     backgroundColor: "#fff",
//   },
//   webViewHeader: {
//     height: 56,
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     borderBottomWidth: 1,
//     borderBottomColor: "#E5E7EB",
//   },
//   webViewCloseButton: {
//     padding: 8,
//   },
//   webViewTitle: {
//     marginLeft: 16,
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   webViewTitleContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 8,
//   },
//   webView: {
//     flex: 1,
//   },

//   // Loading Styles
//   loadingContainer: {
//     position: "absolute",
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//     justifyContent: "center",
//     alignItems: "center",
//     backgroundColor: "#fff",
//   },
//   loadingText: {
//     marginTop: 12,
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#374151",
//   },

//   // New Loading Overlay Styles
//   loadingOverlay: {
//     position: "absolute",
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//     backgroundColor: "rgba(255,255,255,0.95)",
//     justifyContent: "center",
//     alignItems: "center",
//     zIndex: 1000,
//   },
//   loadingCard: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     shadowColor: "#000",
//     shadowOffset: {
//       width: 0,
//       height: 2,
//     },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//     width: "80%",
//   },
//   loadingTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//     marginBottom: 8,
//   },
//   loadingSubtext: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//   },
//   shippingFeeRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginVertical: 4,
//   },
//   shippingFeeValueContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     minWidth: 80, // Ensure consistent width during loading
//     justifyContent: "flex-end",
//   },
//   shippingFeeLoader: {
//     marginLeft: 8,
//   },
//   summaryLabel: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4b5563",
//   },
//   summaryValue: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//     textAlign: "right",
//   },
//   errorValue: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#DC2626",
//     textAlign: "right",
//   },
// });

/****************************************************/

// // app/(root)/Checkout.tsx
// import React, { useState, useCallback, useEffect } from "react";
// import {
//   View,
//   Text,
//   ScrollView,
//   Alert,
//   ActivityIndicator,
//   StyleSheet,
//   Platform,
//   TouchableOpacity,
//   SafeAreaView,
//   BackHandler,
//   Modal,
//   StatusBar,
// } from "react-native";
// import { router, useNavigation } from "expo-router";
// import { WebView } from "react-native-webview";
// import { useFocusEffect } from "@react-navigation/native";
// import { Shield, CreditCard, ArrowLeft, Lock } from "lucide-react-native";
// import Toast from "react-native-toast-message";
// import NetInfo from "@react-native-community/netinfo";
// import useCartStore from "../../store/cartStore";
// import { OrderSummaryRow } from "../Components/OrderSummary";
// import useShippingFee from "../hooks/useShippingFee";

// // const SHIPPING_FEE = 1;

// const DEBUG = process.env.EXPO_PUBLIC_DEBUG === "true";
// const API_URL = process.env.EXPO_PUBLIC_STRAPI_API_URL;

// // Injection script for WebView
// const injectScript = `
// (function() {
//     // Skip ngrok warning
//     document.cookie = "ngrok-skip-browser-warning=true";

//     // Auto-click the ngrok warning button if present
//     const button = document.querySelector('.button');
//     if (button) {
//         button.click();
//     }

//     // Monitor payment status
//     const observer = new MutationObserver(function(mutations) {
//         mutations.forEach(function(mutation) {
//             if (mutation.target.textContent.includes('Payment Successful')) {
//                 window.ReactNativeWebView.postMessage('PAYMENT_SUCCESS');
//             } else if (mutation.target.textContent.includes('Payment Failed')) {
//                 window.ReactNativeWebView.postMessage('PAYMENT_FAILED');
//             }
//         });
//     });

//     observer.observe(document.body, {
//         childList: true,
//         subtree: true
//     });
// })();
// `;

// const PaymentLoadingOverlay = () => (
//   <View style={styles.loadingOverlay}>
//     <View style={styles.loadingCard}>
//       <ActivityIndicator size="large" color="#10B981" />
//       <Text style={styles.loadingTitle}>Processing Payment</Text>
//       <Text style={styles.loadingSubtext}>Please don't close this window</Text>
//     </View>
//   </View>
// );

// export default function CheckoutPage() {
//   //Dynamic Shipping Feed
//   const {
//     shippingFee,
//     loading: isLoadingShippingFee,
//     error: shippingFeeError,
//   } = useShippingFee();
//   const navigation = useNavigation();
//   const [isProcessing, setIsProcessing] = useState(false);
//   const [paymentError, setPaymentError] = useState<string | null>(null);
//   const [showWebView, setShowWebView] = useState(false);
//   const [paymentUrl, setPaymentUrl] = useState<string | null>(null);
//   const [isWebViewLoading, setIsWebViewLoading] = useState(true);
//   const { items, total, discountedTotal, appliedCoupon, clearCart } =
//     useCartStore();

//   const handleBackPress = useCallback(() => {
//     if (showWebView) {
//       Alert.alert(
//         "Cancel Payment?",
//         "Are you sure you want to cancel? This payment will not be processed.",
//         [
//           {
//             text: "Continue Payment",
//             style: "cancel",
//             onPress: () => {},
//           },
//           {
//             text: "Cancel Payment",
//             style: "destructive",
//             onPress: () => {
//               setShowWebView(false);
//               setPaymentUrl(null);
//               router.replace("/(root)/order-failed");
//             },
//           },
//         ]
//       );
//       return true;
//     }
//     return false;
//   }, [showWebView]);

//   useEffect(() => {
//     const backHandler = BackHandler.addEventListener(
//       "hardwareBackPress",
//       handleBackPress
//     );
//     return () => backHandler.remove();
//   }, [handleBackPress]);

//   useFocusEffect(
//     useCallback(() => {
//       navigation.setOptions({
//         gestureEnabled: !showWebView,
//         headerLeft: () => (
//           <TouchableOpacity
//             onPress={() => router.back()}
//             disabled={showWebView}
//           >
//             <ArrowLeft color={showWebView ? "#9CA3AF" : "#E53935"} size={24} />
//           </TouchableOpacity>
//         ),
//       });
//     }, [showWebView])
//   );

//   const subtotal = total;
//   const discount = appliedCoupon
//     ? appliedCoupon.type === "percentage"
//       ? (total * appliedCoupon.amount) / 100
//       : appliedCoupon.amount
//     : 0;
//   const finalTotal = (discountedTotal || total) + shippingFee;

//   const handlePaymentSuccess = () => {
//     clearCart();
//     setShowWebView(false);
//     setPaymentUrl(null);
//     Toast.show({
//       type: "success",
//       text1: "Payment Successful! 🎉",
//       text2: "Thank you for your order",
//       position: "top",
//       visibilityTime: 4000,
//     });
//     router.replace("/(root)/order-success");
//   };

//   const handlePaymentFailure = () => {
//     setShowWebView(false);
//     setPaymentUrl(null);
//     Toast.show({
//       type: "error",
//       text1: "Payment Failed",
//       text2: "Please try again or use a different payment method",
//       position: "top",
//       visibilityTime: 4000,
//     });
//     router.replace("/(root)/order-failed");
//   };

//   const handlePaymentError = (errorMessage: string) => {
//     setPaymentError(errorMessage);
//     Toast.show({
//       type: "error",
//       text1: "Payment Error",
//       text2: errorMessage || "An error occurred during payment",
//       position: "top",
//     });
//   };

//   const handlePayment = async () => {
//     if (isProcessing) return;

//     try {
//       const netInfo = await NetInfo.fetch();
//       if (!netInfo.isConnected) {
//         Toast.show({
//           type: "error",
//           text1: "No Internet Connection",
//           text2: "Please check your connection and try again",
//           position: "top",
//         });
//         return;
//       }

//       setIsProcessing(true);
//       setPaymentError(null);

//       const payload = {
//         amount: Number(finalTotal.toFixed(3)),
//         orderId: `ORD${Date.now()}${Math.random().toString(36).slice(2, 6)}`,
//         customerInfo: {
//           platform: Platform.OS.toUpperCase(),
//           items: items.map((item) => ({
//             id: item.documentId,
//             name: item.name,
//             quantity: item.quantity,
//             price: Number((item.salesPrice || item.price).toFixed(3)),
//           })),
//         },
//       };

//       const response = await fetch(`${API_URL}/api/payments/initiate`, {
//         method: "POST",
//         headers: {
//           "Content-Type": "application/json",
//           Accept: "application/json",
//           "ngrok-skip-browser-warning": "true",
//         },
//         body: JSON.stringify(payload),
//       });

//       if (!response.ok) {
//         throw new Error("Payment service temporarily unavailable");
//       }

//       const data = await response.json();

//       if (!data?.paymentUrl) {
//         throw new Error("Invalid payment response");
//       }

//       setPaymentUrl(data.paymentUrl);
//       setShowWebView(true);
//     } catch (error: any) {
//       const errorMessage = error.message || "Payment failed";
//       setPaymentError(errorMessage);
//       Toast.show({
//         type: "error",
//         text1: "Payment Error",
//         text2: errorMessage,
//         position: "top",
//       });
//     } finally {
//       setIsProcessing(false);
//     }
//   };

//   if (items.length === 0) {
//     router.replace("/(root)/Cart");
//     return null;
//   }

//   return (
//     <>
//       <StatusBar barStyle="dark-content" backgroundColor="#f9fafb" />
//       <SafeAreaView style={styles.safeArea}>
//         <ScrollView
//           style={styles.container}
//           contentContainerStyle={styles.contentContainer}
//           showsVerticalScrollIndicator={false}
//         >
//           <Text style={styles.title}>Secure Checkout</Text>

//           <View style={styles.card}>
//             <Text style={styles.cardTitle}>Order Summary</Text>
//             {items.map((item) => (
//               <View key={item.documentId} style={styles.itemRow}>
//                 <Text style={styles.itemName}>
//                   {item.name} (x{item.quantity})
//                 </Text>
//                 <Text style={styles.itemPrice}>
//                   {((item.salesPrice || item.price) * item.quantity).toFixed(3)}{" "}
//                   KWD
//                 </Text>
//               </View>
//             ))}

//             {/* This is the shipping feed row*/}
//             <View style={styles.summaryContainer}>
//               <OrderSummaryRow
//                 label="Subtotal"
//                 value={`${subtotal.toFixed(3)} KWD`}
//               />
//               {appliedCoupon && (
//                 <OrderSummaryRow
//                   label={`Discount (${appliedCoupon.code})`}
//                   value={`- ${discount.toFixed(3)} KWD`}
//                   isDiscount
//                 />
//               )}
//               <View style={styles.shippingFeeRow}>
//                 <Text style={styles.summaryLabel}>Shipping Fee</Text>
//                 <View style={styles.shippingFeeValueContainer}>
//                   {isLoadingShippingFee ? (
//                     <ActivityIndicator
//                       size="small"
//                       color="#10B981"
//                       style={styles.shippingFeeLoader}
//                     />
//                   ) : shippingFeeError ? (
//                     <TouchableOpacity
//                       onPress={() =>
//                         Toast.show({
//                           type: "error",
//                           text1: "Shipping Fee Error",
//                           text2:
//                             "Failed to load shipping fee. Please try again later.",
//                           position: "top",
//                         })
//                       }
//                     >
//                       <Text style={styles.errorValue}>Error loading fee</Text>
//                     </TouchableOpacity>
//                   ) : (
//                     <Text style={styles.summaryValue}>{`${shippingFee.toFixed(
//                       3
//                     )} KWD`}</Text>
//                   )}
//                 </View>
//               </View>

//               {/* Styles.totalRow */}
//               <OrderSummaryRow
//                 label="Total"
//                 value={`${finalTotal.toFixed(3)} KWD`}
//                 isTotal
//                 isLoading={isLoadingShippingFee}
//               />
//             </View>
//           </View>

//           <View style={styles.securityCard}>
//             <View style={styles.securityHeader}>
//               <Lock size={20} color="#10B981" />
//               <Text style={styles.securityTitle}>Secure Payment</Text>
//             </View>
//             <Text style={styles.securityText}>
//               • SSL encrypted payment processing{"\n"}• Verified by Bookeey
//               Payment Gateway{"\n"}• Your payment details are protected
//             </Text>
//           </View>

//           {/* Update the pay button section */}
//           <TouchableOpacity
//             style={[
//               styles.payButton,
//               (isProcessing || isLoadingShippingFee) &&
//                 styles.payButtonDisabled,
//             ]}
//             onPress={handlePayment}
//             disabled={isProcessing || isLoadingShippingFee}
//             activeOpacity={0.7}
//           >
//             {isProcessing || isLoadingShippingFee ? (
//               <ActivityIndicator color="white" size="small" />
//             ) : (
//               <View style={styles.payButtonContent}>
//                 <CreditCard size={20} color="white" />
//                 <Text style={styles.payButtonText}>
//                   Pay {finalTotal.toFixed(3)} KWD Securely
//                 </Text>
//               </View>
//             )}
//           </TouchableOpacity>
//           {paymentError && <Text style={styles.errorText}>{paymentError}</Text>}
//         </ScrollView>
//       </SafeAreaView>

//       <Modal
//         visible={showWebView}
//         animationType="slide"
//         onRequestClose={handleBackPress}
//       >
//         <SafeAreaView style={styles.modalContainer}>
//           <View style={styles.webViewHeader}>
//             <TouchableOpacity
//               onPress={handleBackPress}
//               style={styles.webViewCloseButton}
//               hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//             >
//               <ArrowLeft color="#E53935" size={24} />
//             </TouchableOpacity>
//             <View style={styles.webViewTitleContainer}>
//               <Lock size={16} color="#10B981" />
//               <Text style={styles.webViewTitle}>Secure Payment</Text>
//             </View>
//           </View>

//           {isWebViewLoading && (
//             <View style={styles.loadingContainer}>
//               <ActivityIndicator size="large" color="#10B981" />
//               <Text style={styles.loadingText}>
//                 Loading secure payment page...
//               </Text>
//             </View>
//           )}

//           {paymentUrl && (
//             <WebView
//               source={{
//                 uri: paymentUrl,
//                 headers: {
//                   "ngrok-skip-browser-warning": "true",
//                 },
//               }}
//               injectedJavaScript={injectScript}
//               onMessage={(event) => {
//                 const { data } = event.nativeEvent;
//                 if (data === "PAYMENT_SUCCESS") {
//                   handlePaymentSuccess();
//                 } else if (data === "PAYMENT_FAILED") {
//                   handlePaymentFailure();
//                 }
//               }}
//               onNavigationStateChange={(navState) => {
//                 console.log("Navigation State:", navState);
//                 if (
//                   navState.url.includes("KfastSuccess") ||
//                   navState.url.includes("success")
//                 ) {
//                   handlePaymentSuccess();
//                 } else if (
//                   navState.url.includes("KfastFail") ||
//                   navState.url.includes("fail")
//                 ) {
//                   handlePaymentFailure();
//                 }
//               }}
//               onLoadStart={() => setIsWebViewLoading(true)}
//               onLoadEnd={() => setIsWebViewLoading(false)}
//               onError={(syntheticEvent) => {
//                 const { nativeEvent } = syntheticEvent;
//                 console.warn("WebView error:", nativeEvent);
//                 handlePaymentError(nativeEvent.description);
//               }}
//               onHttpError={(syntheticEvent) => {
//                 const { nativeEvent } = syntheticEvent;
//                 console.warn("WebView HTTP error:", nativeEvent);
//                 handlePaymentError("Connection error");
//               }}
//               style={styles.webView}
//               incognito={true}
//               cacheEnabled={false}
//               domStorageEnabled={true}
//               javaScriptEnabled={true}
//               startInLoadingState={true}
//               renderLoading={() => <PaymentLoadingOverlay />}
//             />
//           )}
//         </SafeAreaView>
//       </Modal>
//     </>
//   );
// }

// const styles = StyleSheet.create({
//   // Base Styles
//   safeArea: {
//     flex: 1,
//     backgroundColor: "#f9fafb",
//   },
//   container: {
//     flex: 1,
//   },
//   contentContainer: {
//     padding: 16,
//     paddingBottom: 100,
//   },
//   title: {
//     fontSize: 24,
//     fontFamily: "Cairo-Bold",
//     color: "#1f2937",
//     marginBottom: 20,
//   },
//   totalRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginTop: 8,
//     paddingTop: 8,
//     borderTopWidth: 1,
//     borderTopColor: "#e5e7eb",
//   },
//   totalLabel: {
//     fontSize: 16,
//     fontFamily: "Cairo-Bold",
//     color: "#1f2937",
//   },
//   totalValue: {
//     fontSize: 16,
//     fontFamily: "Cairo-Bold",
//     color: "#1f2937",
//     textAlign: "right",
//   },
//   totalValueContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     minWidth: 100, // Ensure consistent width during loading
//     justifyContent: "flex-end",
//   },
//   totalLoader: {
//     marginLeft: 8,
//   },

//   // Update existing styles
//   payButton: {
//     backgroundColor: "#10B981",
//     borderRadius: 25,
//     padding: 16,
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 8,
//   },
//   payButtonDisabled: {
//     opacity: 0.5,
//     backgroundColor: "#10B981",
//   },
//   payButtonContent: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 8,
//     justifyContent: "center",
//     minWidth: 200, // Ensure consistent width during loading
//   },
//   payButtonText: {
//     color: "white",
//     fontSize: 16,
//     fontFamily: "Cairo-Bold",
//   },
//   // Card Styles
//   card: {
//     backgroundColor: "white",
//     borderRadius: 12,
//     padding: 16,
//     marginBottom: 16,
//     ...Platform.select({
//       ios: {
//         shadowColor: "#000",
//         shadowOffset: { width: 0, height: 2 },
//         shadowOpacity: 0.1,
//         shadowRadius: 4,
//       },
//       android: {
//         elevation: 3,
//       },
//     }),
//   },
//   cardTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//     marginBottom: 16,
//   },

//   // Item Styles
//   itemRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     marginBottom: 8,
//   },
//   itemName: {
//     flex: 1,
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4b5563",
//   },
//   itemPrice: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   summaryContainer: {
//     marginTop: 16,
//     paddingTop: 16,
//     borderTopWidth: 1,
//     borderTopColor: "#e5e7eb",
//   },

//   // Security Styles
//   securityNotice: {
//     flexDirection: "row",
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 20,
//     gap: 8,
//   },
//   securityText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4B5563",
//   },
//   securityCard: {
//     backgroundColor: "#f0fdf4",
//     borderRadius: 12,
//     padding: 16,
//     marginBottom: 20,
//     borderWidth: 1,
//     borderColor: "#86efac",
//   },
//   securityHeader: {
//     flexDirection: "row",
//     alignItems: "center",
//     marginBottom: 8,
//     gap: 8,
//   },
//   securityTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#047857",
//   },

//   // Error Styles
//   errorText: {
//     color: "#DC2626",
//     textAlign: "center",
//     marginTop: 8,
//     fontFamily: "Cairo",
//   },

//   // Modal and WebView Styles
//   modalContainer: {
//     flex: 1,
//     backgroundColor: "#fff",
//   },
//   webViewHeader: {
//     height: 56,
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     borderBottomWidth: 1,
//     borderBottomColor: "#E5E7EB",
//   },
//   webViewCloseButton: {
//     padding: 8,
//   },
//   webViewTitle: {
//     marginLeft: 16,
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   webViewTitleContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 8,
//   },
//   webView: {
//     flex: 1,
//   },

//   // Loading Styles
//   loadingContainer: {
//     position: "absolute",
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//     justifyContent: "center",
//     alignItems: "center",
//     backgroundColor: "#fff",
//   },
//   loadingText: {
//     marginTop: 12,
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#374151",
//   },

//   // New Loading Overlay Styles
//   loadingOverlay: {
//     position: "absolute",
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//     backgroundColor: "rgba(255,255,255,0.95)",
//     justifyContent: "center",
//     alignItems: "center",
//     zIndex: 1000,
//   },
//   loadingCard: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     shadowColor: "#000",
//     shadowOffset: {
//       width: 0,
//       height: 2,
//     },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//     width: "80%",
//   },
//   loadingTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//     marginBottom: 8,
//   },
//   loadingSubtext: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//   },
//   shippingFeeRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginVertical: 4,
//   },
//   shippingFeeValueContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     minWidth: 80, // Ensure consistent width during loading
//     justifyContent: "flex-end",
//   },
//   shippingFeeLoader: {
//     marginLeft: 8,
//   },
//   summaryLabel: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4b5563",
//   },
//   summaryValue: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//     textAlign: "right",
//   },
//   errorValue: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#DC2626",
//     textAlign: "right",
//   },
// });

/***************************************** */

// import React, { useState, useCallback, useEffect } from "react";
// import {
//   View,
//   Text,
//   ScrollView,
//   Alert,
//   ActivityIndicator,
//   StyleSheet,
//   Platform,
//   TouchableOpacity,
//   SafeAreaView,
//   BackHandler,
//   Modal,
//   StatusBar,
// } from "react-native";
// import { router, useNavigation } from "expo-router";
// import { WebView } from "react-native-webview";
// import { useFocusEffect } from "@react-navigation/native";
// import { Shield, CreditCard, ArrowLeft, Lock } from "lucide-react-native";
// import Toast from "react-native-toast-message";
// import NetInfo from "@react-native-community/netinfo";
// import useCartStore from "../../store/cartStore";
// import { OrderSummaryRow } from "../Components/OrderSummary";
// import useShippingFee from "../hooks/useShippingFee";

// const DEBUG = process.env.EXPO_PUBLIC_DEBUG === "true";
// const API_URL = process.env.EXPO_PUBLIC_STRAPI_API_URL;
// const PAYMENT_API_URL =
//   "https://pg.bookeey.com/internalapi/api/payment/requestLink";

// const injectScript = `
// (function() {
//     document.cookie = "ngrok-skip-browser-warning=true";
//     const button = document.querySelector('.button');
//     if (button) {
//         button.click();
//     }
//     const observer = new MutationObserver(function(mutations) {
//         mutations.forEach(function(mutation) {
//             if (mutation.target.textContent.includes('Payment Successful')) {
//                 window.ReactNativeWebView.postMessage('PAYMENT_SUCCESS');
//             } else if (mutation.target.textContent.includes('Payment Failed')) {
//                 window.ReactNativeWebView.postMessage('PAYMENT_FAILED');
//             }
//         });
//     });
//     observer.observe(document.body, { childList: true, subtree: true });
// })();
// `;

// const PaymentLoadingOverlay = () => (
//   <View style={styles.loadingOverlay}>
//     <View style={styles.loadingCard}>
//       <ActivityIndicator size="large" color="#10B981" />
//       <Text style={styles.loadingTitle}>Processing Payment</Text>
//       <Text style={styles.loadingSubtext}>Please don't close this window</Text>
//     </View>
//   </View>
// );

// export default function CheckoutPage() {
//   const {
//     shippingFee,
//     loading: isLoadingShippingFee,
//     error: shippingFeeError,
//   } = useShippingFee();
//   const navigation = useNavigation();
//   const [isProcessing, setIsProcessing] = useState(false);
//   const [paymentError, setPaymentError] = useState(null);
//   const [showWebView, setShowWebView] = useState(false);
//   const [paymentUrl, setPaymentUrl] = useState(null);
//   const [isWebViewLoading, setIsWebViewLoading] = useState(true);
//   const { items, total, discountedTotal, appliedCoupon, clearCart } =
//     useCartStore();

//   const handleBackPress = useCallback(() => {
//     if (showWebView) {
//       Alert.alert(
//         "Cancel Payment?",
//         "Are you sure you want to cancel? This payment will not be processed.",
//         [
//           { text: "Continue Payment", style: "cancel" },
//           {
//             text: "Cancel Payment",
//             style: "destructive",
//             onPress: () => {
//               setShowWebView(false);
//               setPaymentUrl(null);
//               router.replace("/(root)/order-failed");
//             },
//           },
//         ]
//       );
//       return true;
//     }
//     router.back();
//     return true;
//   }, [showWebView]);

//   useEffect(() => {
//     const backHandler = BackHandler.addEventListener(
//       "hardwareBackPress",
//       handleBackPress
//     );
//     return () => backHandler.remove();
//   }, [handleBackPress]);

//   useFocusEffect(
//     useCallback(() => {
//       navigation.setOptions({
//         gestureEnabled: !showWebView,
//         headerLeft: () => (
//           <TouchableOpacity
//             onPress={() => router.back()}
//             disabled={showWebView}
//           >
//             <ArrowLeft color={showWebView ? "#9CA3AF" : "#E53935"} size={24} />
//           </TouchableOpacity>
//         ),
//       });
//     }, [showWebView])
//   );

//   const subtotal = total;
//   const discount = appliedCoupon
//     ? appliedCoupon.type === "percentage"
//       ? (total * appliedCoupon.amount) / 100
//       : appliedCoupon.amount
//     : 0;
//   const finalTotal = (discountedTotal || total) + shippingFee;

//   const handlePaymentSuccess = () => {
//     clearCart();
//     setShowWebView(false);
//     setPaymentUrl(null);
//     Toast.show({
//       type: "success",
//       text1: "Payment Successful! 🎉",
//       text2: "Thank you for your order",
//       position: "top",
//       visibilityTime: 4000,
//     });
//     router.replace("/(root)/order-success");
//   };

//   const handlePaymentFailure = () => {
//     setShowWebView(false);
//     setPaymentUrl(null);
//     Toast.show({
//       type: "error",
//       text1: "Payment Failed",
//       text2: "Please try again or use a different payment method",
//       position: "top",
//       visibilityTime: 4000,
//     });
//     router.replace("/(root)/order-failed");
//   };

//   const handlePaymentError = (errorMessage) => {
//     setPaymentError(errorMessage);
//     Toast.show({
//       type: "error",
//       text1: "Payment Error",
//       text2: errorMessage || "An error occurred during payment",
//       position: "top",
//     });
//   };

//   const handlePayment = async () => {
//     if (isProcessing) return;

//     try {
//       const netInfo = await NetInfo.fetch();
//       if (!netInfo.isConnected) {
//         Toast.show({
//           type: "error",
//           text1: "No Internet Connection",
//           text2: "Please check your connection and try again",
//           position: "top",
//         });
//         return;
//       }

//       setIsProcessing(true);
//       setPaymentError(null);

//       const merchTxnUID = `ORD${Date.now()}${Math.random()
//         .toString(36)
//         .slice(2, 6)}`;
//       const txnHDR = `${Date.now()}${Math.floor(Math.random() * 10000)}`;

//       const payload = {
//         DBRqst: "PY_ECom",
//         Do_Appinfo: {
//           APIVer: "2.1",
//           APPTyp: "MOB",
//           AppVer: "1.0",
//           Country: "KW",
//           OS: Platform.OS === "ios" ? "iOS" : "Android",
//         },
//         Do_MerchDtl: {
//           BKY_PRDENUM: "ECom",
//           FURL: "https://yourdomain.com/paymentfailure",
//           MerchUID: "Mer2000012",
//           SURL: "https://yourdomain.com/paymentsuccess",
//         },
//         Do_PyrDtl: {},
//         Do_TxnDtl: [
//           {
//             SubMerchUID: "Mer2000012",
//             Txn_AMT: finalTotal.toFixed(3),
//           },
//         ],
//         Do_TxnHdr: {
//           Merch_Txn_UID: merchTxnUID,
//           PayFor: "ECom",
//           PayMethod: "KNET",
//           Txn_HDR: txnHDR,
//           hashMac: "your_hashmac_calculation_here",
//         },
//       };

//       const response = await fetch(PAYMENT_API_URL, {
//         method: "POST",
//         headers: {
//           "Content-Type": "application/json",
//           Accept: "application/json",
//         },
//         body: JSON.stringify(payload),
//       });

//       if (!response.ok) {
//         throw new Error("Payment service unavailable");
//       }

//       const data = await response.json();

//       if (!data?.PayUrl || !data.PayUrl.startsWith("https://")) {
//         throw new Error("Invalid or insecure payment URL");
//       }

//       setPaymentUrl(data.PayUrl);
//       setShowWebView(true);
//     } catch (error) {
//       const errorMessage = error.message || "Payment failed";
//       setPaymentError(errorMessage);
//       Toast.show({
//         type: "error",
//         text1: "Payment Error",
//         text2: errorMessage,
//         position: "top",
//       });
//     } finally {
//       setIsProcessing(false);
//     }
//   };

//   if (items.length === 0) {
//     router.replace("/(root)/Cart");
//     return null;
//   }

//   return (
//     <>
//       <StatusBar barStyle="dark-content" backgroundColor="#f9fafb" />
//       <SafeAreaView style={styles.safeArea}>
//         <ScrollView
//           style={styles.container}
//           contentContainerStyle={styles.contentContainer}
//         >
//           <Text style={styles.title}>Secure Checkout</Text>

//           <View style={styles.card}>
//             <Text style={styles.cardTitle}>Order Summary</Text>
//             {items.map((item) => (
//               <View key={item.documentId} style={styles.itemRow}>
//                 <Text style={styles.itemName}>
//                   {item.name} (x{item.quantity})
//                 </Text>
//                 <Text style={styles.itemPrice}>
//                   {((item.salesPrice || item.price) * item.quantity).toFixed(3)}{" "}
//                   KWD
//                 </Text>
//               </View>
//             ))}
//             <View style={styles.summaryContainer}>
//               <OrderSummaryRow
//                 label="Subtotal"
//                 value={`${subtotal.toFixed(3)} KWD`}
//               />
//               {appliedCoupon && (
//                 <OrderSummaryRow
//                   label={`Discount (${appliedCoupon.code})`}
//                   value={`- ${discount.toFixed(3)} KWD`}
//                   isDiscount
//                 />
//               )}
//               <View style={styles.shippingFeeRow}>
//                 <Text style={styles.summaryLabel}>Shipping Fee</Text>
//                 <View style={styles.shippingFeeValueContainer}>
//                   {isLoadingShippingFee ? (
//                     <ActivityIndicator size="small" color="#10B981" />
//                   ) : shippingFeeError ? (
//                     <Text style={styles.errorValue}>Error loading fee</Text>
//                   ) : (
//                     <Text style={styles.summaryValue}>{`${shippingFee.toFixed(
//                       3
//                     )} KWD`}</Text>
//                   )}
//                 </View>
//               </View>
//               <OrderSummaryRow
//                 label="Total"
//                 value={`${finalTotal.toFixed(3)} KWD`}
//                 isTotal
//                 isLoading={isLoadingShippingFee}
//               />
//             </View>
//           </View>

//           <View style={styles.securityCard}>
//             <View style={styles.securityHeader}>
//               <Lock size={20} color="#10B981" />
//               <Text style={styles.securityTitle}>Secure Payment</Text>
//             </View>
//             <Text style={styles.securityText}>
//               • SSL encrypted payment processing{"\n"}• Verified by Bookeey
//               Payment Gateway{"\n"}• Your payment details are protected
//             </Text>
//           </View>

//           <TouchableOpacity
//             style={[
//               styles.payButton,
//               (isProcessing || isLoadingShippingFee) &&
//                 styles.payButtonDisabled,
//             ]}
//             onPress={handlePayment}
//             disabled={isProcessing || isLoadingShippingFee}
//           >
//             {isProcessing || isLoadingShippingFee ? (
//               <ActivityIndicator color="white" size="small" />
//             ) : (
//               <View style={styles.payButtonContent}>
//                 <CreditCard size={20} color="white" />
//                 <Text style={styles.payButtonText}>
//                   Pay {finalTotal.toFixed(3)} KWD Securely
//                 </Text>
//               </View>
//             )}
//           </TouchableOpacity>
//           {paymentError && <Text style={styles.errorText}>{paymentError}</Text>}
//         </ScrollView>
//       </SafeAreaView>

//       <Modal
//         visible={showWebView}
//         animationType="slide"
//         onRequestClose={handleBackPress}
//       >
//         <SafeAreaView style={styles.modalContainer}>
//           <View style={styles.webViewHeader}>
//             <TouchableOpacity
//               onPress={handleBackPress}
//               style={styles.webViewCloseButton}
//             >
//               <ArrowLeft color="#E53935" size={24} />
//             </TouchableOpacity>
//             <View style={styles.webViewTitleContainer}>
//               <Lock size={16} color="#10B981" />
//               <Text style={styles.webViewTitle}>Secure Payment</Text>
//             </View>
//           </View>

//           {isWebViewLoading && <PaymentLoadingOverlay />}

//           {paymentUrl && (
//             <WebView
//               source={{ uri: paymentUrl }}
//               injectedJavaScript={injectScript}
//               onMessage={(event) => {
//                 const { data } = event.nativeEvent;
//                 if (data === "PAYMENT_SUCCESS") {
//                   handlePaymentSuccess();
//                 } else if (data === "PAYMENT_FAILED") {
//                   handlePaymentFailure();
//                 }
//               }}
//               onNavigationStateChange={(navState) => {
//                 if (
//                   navState.url.includes("paymentsuccess") &&
//                   navState.url.includes("errorCode=0")
//                 ) {
//                   handlePaymentSuccess();
//                 } else if (
//                   navState.url.includes("paymentfailure") &&
//                   navState.url.includes("errorCode=1")
//                 ) {
//                   handlePaymentFailure();
//                 }
//               }}
//               onLoadStart={() => setIsWebViewLoading(true)}
//               onLoadEnd={() => setIsWebViewLoading(false)}
//               onError={(syntheticEvent) => {
//                 handlePaymentError(syntheticEvent.nativeEvent.description);
//               }}
//               onHttpError={() => {
//                 handlePaymentError("Connection error");
//               }}
//               style={styles.webView}
//               incognito={true}
//               cacheEnabled={false}
//               domStorageEnabled={true}
//               javaScriptEnabled={true}
//               startInLoadingState={true}
//             />
//           )}
//         </SafeAreaView>
//       </Modal>
//     </>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: { flex: 1, backgroundColor: "#f9fafb" },
//   container: { flex: 1 },
//   contentContainer: { padding: 16, paddingBottom: 100 },
//   title: {
//     fontSize: 24,
//     fontFamily: "Cairo-Bold",
//     color: "#1f2937",
//     marginBottom: 20,
//   },
//   card: {
//     backgroundColor: "white",
//     borderRadius: 12,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   cardTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//     marginBottom: 16,
//   },
//   itemRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     marginBottom: 8,
//   },
//   itemName: { flex: 1, fontSize: 14, fontFamily: "Cairo", color: "#4b5563" },
//   itemPrice: { fontSize: 14, fontFamily: "Cairo-SemiBold", color: "#374151" },
//   summaryContainer: {
//     marginTop: 16,
//     paddingTop: 16,
//     borderTopWidth: 1,
//     borderTopColor: "#e5e7eb",
//   },
//   securityCard: {
//     backgroundColor: "#f0fdf4",
//     borderRadius: 12,
//     padding: 16,
//     marginBottom: 20,
//     borderWidth: 1,
//     borderColor: "#86efac",
//   },
//   securityHeader: {
//     flexDirection: "row",
//     alignItems: "center",
//     marginBottom: 8,
//     gap: 8,
//   },
//   securityTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#047857",
//   },
//   securityText: { fontSize: 14, fontFamily: "Cairo", color: "#4B5563" },
//   payButton: {
//     backgroundColor: "#10B981",
//     borderRadius: 12,
//     padding: 16,
//     alignItems: "center",
//     justifyContent: "center",
//   },
//   payButtonDisabled: { opacity: 0.6 },
//   payButtonContent: { flexDirection: "row", alignItems: "center", gap: 8 },
//   payButtonText: { color: "white", fontSize: 16, fontFamily: "Cairo-Bold" },
//   errorText: {
//     color: "#DC2626",
//     textAlign: "center",
//     marginTop: 8,
//     fontFamily: "Cairo",
//   },
//   modalContainer: { flex: 1, backgroundColor: "#fff" },
//   webViewHeader: {
//     height: 56,
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     borderBottomWidth: 1,
//     borderBottomColor: "#E5E7EB",
//   },
//   webViewCloseButton: { padding: 8 },
//   webViewTitleContainer: { flexDirection: "row", alignItems: "center", gap: 8 },
//   webViewTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   webView: { flex: 1 },
//   loadingOverlay: {
//     position: "absolute",
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//     backgroundColor: "rgba(255,255,255,0.95)",
//     justifyContent: "center",
//     alignItems: "center",
//   },
//   loadingCard: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//   },
//   loadingTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   loadingSubtext: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//   },
//   shippingFeeRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginVertical: 4,
//   },
//   shippingFeeValueContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     justifyContent: "flex-end",
//   },
//   summaryLabel: { fontSize: 14, fontFamily: "Cairo", color: "#4b5563" },
//   summaryValue: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   errorValue: { fontSize: 14, fontFamily: "Cairo", color: "#DC2626" },
// });

/*************************** */

// import React, { useState, useCallback, useEffect } from "react";
// import {
//   View,
//   Text,
//   ScrollView,
//   Alert,
//   ActivityIndicator,
//   StyleSheet,
//   Platform,
//   TouchableOpacity,
//   SafeAreaView,
//   BackHandler,
//   Modal,
//   StatusBar,
//   Pressable,
// } from "react-native";
// import { router, useNavigation } from "expo-router";
// import { WebView } from "react-native-webview";
// import { useFocusEffect } from "@react-navigation/native";
// import {
//   Shield,
//   CreditCard,
//   ArrowLeft,
//   Lock,
//   ChevronLeft,
// } from "lucide-react-native";
// import Toast from "react-native-toast-message";
// import NetInfo from "@react-native-community/netinfo";
// import useCartStore from "../../store/cartStore";
// import { OrderSummaryRow } from "../Components/OrderSummary";
// import useShippingFee from "../hooks/useShippingFee";
// import { useSafeAreaInsets } from "react-native-safe-area-context";

// const DEBUG = process.env.EXPO_PUBLIC_DEBUG === "true";
// const API_URL = process.env.EXPO_PUBLIC_STRAPI_API_URL;
// const PAYMENT_API_URL =
//   "https://demo.bookeey.com/pgapi/api/payment/requestLink";

// const injectScript = `
// (function() {
//     document.cookie = "ngrok-skip-browser-warning=true";
//     const button = document.querySelector('.button');
//     if (button) {
//         button.click();
//     }
//     const observer = new MutationObserver(function(mutations) {
//         mutations.forEach(function(mutation) {
//             if (mutation.target.textContent.includes('Payment Successful')) {
//                 window.ReactNativeWebView.postMessage('PAYMENT_SUCCESS');
//             } else if (mutation.target.textContent.includes('Payment Failed')) {
//                 window.ReactNativeWebView.postMessage('PAYMENT_FAILED');
//             }
//         });
//     });
//     observer.observe(document.body, { childList: true, subtree: true });
// })();
// `;

// const PaymentLoadingOverlay = () => (
//   <View style={styles.loadingOverlay}>
//     <View style={styles.loadingCard}>
//       <ActivityIndicator size="large" color="#10B981" />
//       <Text style={styles.loadingTitle}>Processing Payment</Text>
//       <Text style={styles.loadingSubtext}>Please don't close this window</Text>
//     </View>
//   </View>
// );

// export default function CheckoutPage() {
//   const insets = useSafeAreaInsets();
//   const {
//     shippingFee,
//     loading: isLoadingShippingFee,
//     error: shippingFeeError,
//   } = useShippingFee();

//   const navigation = useNavigation();
//   const [isProcessing, setIsProcessing] = useState(false);
//   const [paymentError, setPaymentError] = useState(null);
//   const [showWebView, setShowWebView] = useState(false);
//   const [paymentUrl, setPaymentUrl] = useState(null);
//   const [isWebViewLoading, setIsWebViewLoading] = useState(true);

//   const { items, total, discountedTotal, appliedCoupon, clearCart } =
//     useCartStore();

//   const handleBackPress = useCallback(() => {
//     if (showWebView) {
//       Alert.alert(
//         "Cancel Payment?",
//         "Are you sure you want to cancel? This payment will not be processed.",
//         [
//           { text: "Continue Payment", style: "cancel" },
//           {
//             text: "Cancel Payment",
//             style: "destructive",
//             onPress: () => {
//               setShowWebView(false);
//               setPaymentUrl(null);
//               router.replace("/(root)/order-failed");
//             },
//           },
//         ]
//       );
//       return true;
//     }
//     router.push("/(root)/Cart");
//     return true;
//   }, [showWebView]);

//   useEffect(() => {
//     const backHandler = BackHandler.addEventListener(
//       "hardwareBackPress",
//       handleBackPress
//     );
//     return () => backHandler.remove();
//   }, [handleBackPress]);

//   useFocusEffect(
//     useCallback(() => {
//       navigation.setOptions({
//         gestureEnabled: !showWebView,
//         headerShown: false,
//       });
//     }, [showWebView])
//   );

//   const subtotal = total;
//   const discount = appliedCoupon
//     ? appliedCoupon.type === "percentage"
//       ? (total * appliedCoupon.amount) / 100
//       : appliedCoupon.amount
//     : 0;
//   const finalTotal = (discountedTotal || total) + shippingFee;

//   const handlePaymentSuccess = () => {
//     clearCart();
//     setShowWebView(false);
//     setPaymentUrl(null);
//     Toast.show({
//       type: "success",
//       text1: "Payment Successful! 🎉",
//       text2: "Thank you for your order",
//       position: "top",
//       visibilityTime: 4000,
//     });
//     router.replace("/(root)/order-success");
//   };

//   const handlePaymentFailure = () => {
//     setShowWebView(false);
//     setPaymentUrl(null);
//     Toast.show({
//       type: "error",
//       text1: "Payment Failed",
//       text2: "Please try again or use a different payment method",
//       position: "top",
//       visibilityTime: 4000,
//     });
//     router.replace("/(root)/order-failed");
//   };

//   const handlePaymentError = (errorMessage) => {
//     setPaymentError(errorMessage);
//     Toast.show({
//       type: "error",
//       text1: "Payment Error",
//       text2: errorMessage || "An error occurred during payment",
//       position: "top",
//     });
//   };

//   const handlePayment = async () => {
//     if (isProcessing) return;

//     try {
//       const netInfo = await NetInfo.fetch();
//       if (!netInfo.isConnected) {
//         Toast.show({
//           type: "error",
//           text1: "No Internet Connection",
//           text2: "Please check your connection and try again",
//           position: "top",
//         });
//         return;
//       }

//       setIsProcessing(true);
//       setPaymentError(null);

//       const merchTxnUID = `ORD${Date.now()}${Math.random()
//         .toString(36)
//         .slice(2, 6)}`;
//       const txnHDR = `${Date.now()}${Math.floor(Math.random() * 10000)}`;

//       const payload = {
//         DBRqst: "PY_ECom",
//         Do_Appinfo: {
//           APIVer: "2.1",
//           APPTyp: "MOB",
//           AppVer: "1.0",
//           Country: "KW",
//           OS: Platform.OS === "ios" ? "iOS" : "Android",
//         },
//         Do_MerchDtl: {
//           BKY_PRDENUM: "ECom",
//           FURL: "https://yourdomain.com/paymentfailure",
//           MerchUID: "Mer2000012",
//           SURL: "https://yourdomain.com/paymentsuccess",
//         },
//         Do_PyrDtl: {},
//         Do_TxnDtl: [
//           {
//             SubMerchUID: "Mer2000012",
//             Txn_AMT: finalTotal.toFixed(3),
//           },
//         ],
//         Do_TxnHdr: {
//           Merch_Txn_UID: merchTxnUID,
//           PayFor: "ECom",
//           PayMethod: "KNET",
//           Txn_HDR: txnHDR,
//           hashMac: "your_hashmac_calculation_here",
//         },
//       };

//       const response = await fetch(PAYMENT_API_URL, {
//         method: "POST",
//         headers: {
//           "Content-Type": "application/json",
//           Accept: "application/json",
//         },
//         body: JSON.stringify(payload),
//       });

//       if (!response.ok) {
//         throw new Error("Payment service unavailable");
//       }

//       const data = await response.json();

//       if (!data?.PayUrl || !data.PayUrl.startsWith("https://")) {
//         throw new Error("Invalid or insecure payment URL");
//       }

//       setPaymentUrl(data.PayUrl);
//       setShowWebView(true);
//     } catch (error) {
//       const errorMessage = error.message || "Payment failed";
//       setPaymentError(errorMessage);
//       Toast.show({
//         type: "error",
//         text1: "Payment Error",
//         text2: errorMessage,
//         position: "top",
//       });
//     } finally {
//       setIsProcessing(false);
//     }
//   };

//   if (items.length === 0) {
//     router.replace("/(root)/Cart");
//     return null;
//   }

//   return (
//     <SafeAreaView style={[styles.safeArea, { paddingTop: insets.top }]}>
//       <StatusBar barStyle="dark-content" backgroundColor="#f9fafb" />

//       <View style={styles.header}>
//         <TouchableOpacity
//           onPress={() => router.push("/(root)/Cart")}
//           style={styles.backButton}
//           hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//         >
//           <ChevronLeft color="#E53935" size={28} />
//         </TouchableOpacity>
//         <Text style={styles.headerTitle}>Secure Checkout</Text>
//       </View>

//       <ScrollView
//         style={styles.container}
//         contentContainerStyle={styles.contentContainer}
//         showsVerticalScrollIndicator={false}
//       >
//         <View style={styles.card}>
//           <View style={styles.cardTitleContainer}>
//             <Text style={styles.cardTitle}>Order Summary</Text>
//             <Text style={styles.itemCount}>{items.length} items</Text>
//           </View>

//           {items.map((item) => (
//             <View key={item.documentId} style={styles.itemRow}>
//               <View style={styles.itemDetails}>
//                 <Text style={styles.itemName} numberOfLines={1}>
//                   {item.name}
//                 </Text>
//                 <Text style={styles.itemQuantity}>Qty: {item.quantity}</Text>
//               </View>
//               <Text style={styles.itemPrice}>
//                 {((item.salesPrice || item.price) * item.quantity).toFixed(3)}{" "}
//                 KWD
//               </Text>
//             </View>
//           ))}

//           <View style={styles.summaryContainer}>
//             <OrderSummaryRow
//               label="Subtotal"
//               value={`${subtotal.toFixed(3)} KWD`}
//             />

//             {appliedCoupon && (
//               <OrderSummaryRow
//                 label={`Discount (${appliedCoupon.code})`}
//                 value={`- ${discount.toFixed(3)} KWD`}
//                 isDiscount
//               />
//             )}

//             <View style={styles.shippingFeeRow}>
//               <Text style={styles.summaryLabel}>Shipping Fee</Text>
//               <View style={styles.shippingFeeValueContainer}>
//                 {isLoadingShippingFee ? (
//                   <ActivityIndicator size="small" color="#10B981" />
//                 ) : shippingFeeError ? (
//                   <Text style={styles.errorValue}>Error loading fee</Text>
//                 ) : (
//                   <Text style={styles.summaryValue}>{`${shippingFee.toFixed(
//                     3
//                   )} KWD`}</Text>
//                 )}
//               </View>
//             </View>

//             <View style={styles.divider} />

//             <OrderSummaryRow
//               label="Total Amount"
//               value={`${finalTotal.toFixed(3)} KWD`}
//               isTotal
//               isLoading={isLoadingShippingFee}
//             />
//           </View>
//         </View>

//         <View style={styles.securityCard}>
//           <View style={styles.securityHeader}>
//             <Lock size={20} color="#10B981" />
//             <Text style={styles.securityTitle}>Secure Payment</Text>
//           </View>
//           <Text style={styles.securityText}>
//             • SSL encrypted payment processing{"\n"}• Verified by Bookeey
//             Payment Gateway{"\n"}• Your payment details are protected
//           </Text>
//         </View>

//         <TouchableOpacity
//           style={[
//             styles.payButton,
//             (isProcessing || isLoadingShippingFee) && styles.payButtonDisabled,
//           ]}
//           onPress={handlePayment}
//           disabled={isProcessing || isLoadingShippingFee}
//         >
//           {isProcessing ? (
//             <ActivityIndicator color="white" size="small" />
//           ) : (
//             <View style={styles.payButtonContent}>
//               <CreditCard size={20} color="white" />
//               <Text style={styles.payButtonText}>
//                 Pay {finalTotal.toFixed(3)} KWD
//               </Text>
//             </View>
//           )}
//         </TouchableOpacity>

//         {paymentError && <Text style={styles.errorText}>{paymentError}</Text>}
//       </ScrollView>

//       <Modal
//         visible={showWebView}
//         animationType="slide"
//         onRequestClose={handleBackPress}
//       >
//         <SafeAreaView style={styles.modalContainer}>
//           <View style={styles.webViewHeader}>
//             <TouchableOpacity
//               onPress={handleBackPress}
//               style={styles.webViewCloseButton}
//               hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//             >
//               <ArrowLeft color="#E53935" size={24} />
//             </TouchableOpacity>
//             <View style={styles.webViewTitleContainer}>
//               <Lock size={16} color="#10B981" />
//               <Text style={styles.webViewTitle}>Secure Payment</Text>
//             </View>
//           </View>

//           {isWebViewLoading && <PaymentLoadingOverlay />}

//           {paymentUrl && (
//             <WebView
//               source={{ uri: paymentUrl }}
//               injectedJavaScript={injectScript}
//               onMessage={(event) => {
//                 const { data } = event.nativeEvent;
//                 if (data === "PAYMENT_SUCCESS") {
//                   handlePaymentSuccess();
//                 } else if (data === "PAYMENT_FAILED") {
//                   handlePaymentFailure();
//                 }
//               }}
//               onNavigationStateChange={(navState) => {
//                 if (
//                   navState.url.includes("paymentsuccess") &&
//                   navState.url.includes("errorCode=0")
//                 ) {
//                   handlePaymentSuccess();
//                 } else if (
//                   navState.url.includes("paymentfailure") &&
//                   navState.url.includes("errorCode=1")
//                 ) {
//                   handlePaymentFailure();
//                 }
//               }}
//               onLoadStart={() => setIsWebViewLoading(true)}
//               onLoadEnd={() => setIsWebViewLoading(false)}
//               onError={(syntheticEvent) => {
//                 handlePaymentError(syntheticEvent.nativeEvent.description);
//               }}
//               onHttpError={() => {
//                 handlePaymentError("Connection error");
//               }}
//               style={styles.webView}
//               incognito={true}
//               cacheEnabled={false}
//               domStorageEnabled={true}
//               javaScriptEnabled={true}
//               startInLoadingState={true}
//             />
//           )}
//         </SafeAreaView>
//       </Modal>
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: {
//     flex: 1,
//     backgroundColor: "#f9fafb",
//   },
//   header: {
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     paddingVertical: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f0f0f0",
//   },
//   backButton: {
//     padding: 4,
//   },
//   headerTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#1f2937",
//     marginLeft: 16,
//   },
//   container: {
//     flex: 1,
//   },
//   contentContainer: {
//     padding: 16,
//     paddingBottom: 100,
//   },
//   card: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   cardTitleContainer: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 16,
//   },
//   cardTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//   },
//   itemCount: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//   },
//   itemRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 12,
//     paddingBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f1f5f9",
//   },
//   itemDetails: {
//     flex: 1,
//     paddingRight: 8,
//   },
//   itemName: {
//     fontSize: 15,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//     marginBottom: 4,
//   },
//   itemQuantity: {
//     fontSize: 13,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//   },
//   itemPrice: {
//     fontSize: 15,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//   },
//   summaryContainer: {
//     marginTop: 16,
//     paddingTop: 16,
//     borderTopWidth: 1,
//     borderTopColor: "#e5e7eb",
//   },
//   divider: {
//     height: 1,
//     backgroundColor: "#e5e7eb",
//     marginVertical: 12,
//   },
//   securityCard: {
//     backgroundColor: "#f0fdf4",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 24,
//     borderWidth: 1,
//     borderColor: "#86efac",
//   },
//   securityHeader: {
//     flexDirection: "row",
//     alignItems: "center",
//     marginBottom: 12,
//     gap: 8,
//   },
//   securityTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#047857",
//   },
//   securityText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4B5563",
//     lineHeight: 22,
//   },
//   payButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 12,
//     padding: 18,
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 12,
//   },
//   payButtonDisabled: {
//     opacity: 0.6,
//   },
//   payButtonContent: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 10,
//   },
//   payButtonText: {
//     color: "white",
//     fontSize: 16,
//     fontFamily: "Cairo-Bold",
//   },
//   errorText: {
//     color: "#DC2626",
//     textAlign: "center",
//     marginTop: 8,
//     fontFamily: "Cairo",
//   },
//   modalContainer: {
//     flex: 1,
//     backgroundColor: "#fff",
//   },
//   webViewHeader: {
//     height: 56,
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     borderBottomWidth: 1,
//     borderBottomColor: "#E5E7EB",
//     backgroundColor: "#f9fafb",
//   },
//   webViewCloseButton: {
//     padding: 8,
//   },
//   webViewTitleContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 8,
//     flex: 1,
//     justifyContent: "center",
//     marginRight: 40,
//   },
//   webViewTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   webView: {
//     flex: 1,
//   },
//   loadingOverlay: {
//     position: "absolute",
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//     backgroundColor: "rgba(255,255,255,0.95)",
//     justifyContent: "center",
//     alignItems: "center",
//     zIndex: 1000,
//   },
//   loadingCard: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//     width: "80%",
//     maxWidth: 300,
//   },
//   loadingTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   loadingSubtext: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   shippingFeeRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginVertical: 4,
//   },
//   shippingFeeValueContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     justifyContent: "flex-end",
//   },
//   summaryLabel: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4b5563",
//   },
//   summaryValue: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   errorValue: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#DC2626",
//   },
// });

/******************************* */

// import React, { useState, useCallback, useEffect } from "react";
// import {
//   View,
//   Text,
//   ScrollView,
//   Alert,
//   ActivityIndicator,
//   StyleSheet,
//   Platform,
//   TouchableOpacity,
//   SafeAreaView,
//   BackHandler,
//   Modal,
//   StatusBar,
//   Pressable,
//   Animated,
// } from "react-native";
// import { router, useNavigation } from "expo-router";
// import { WebView } from "react-native-webview";
// import { useFocusEffect } from "@react-navigation/native";
// import {
//   Shield,
//   CreditCard,
//   ArrowLeft,
//   Lock,
//   ChevronLeft,
//   CheckCircle,
//   XCircle,
// } from "lucide-react-native";
// import NetInfo from "@react-native-community/netinfo";
// import useCartStore from "../../store/cartStore";
// import { OrderSummaryRow } from "../Components/OrderSummary";
// import useShippingFee from "../hooks/useShippingFee";
// import { useSafeAreaInsets } from "react-native-safe-area-context";

// const DEBUG = process.env.EXPO_PUBLIC_DEBUG === "true";
// const API_URL = process.env.EXPO_PUBLIC_STRAPI_API_URL;
// const PAYMENT_API_URL =
//   "https://demo.bookeey.com/pgapi/api/payment/requestLink";

// const injectScript = `
// (function() {
//     document.cookie = "ngrok-skip-browser-warning=true";
//     const button = document.querySelector('.button');
//     if (button) {
//         button.click();
//     }
//     const observer = new MutationObserver(function(mutations) {
//         mutations.forEach(function(mutation) {
//             if (mutation.target.textContent.includes('Payment Successful')) {
//                 window.ReactNativeWebView.postMessage('PAYMENT_SUCCESS');
//             } else if (mutation.target.textContent.includes('Payment Failed')) {
//                 window.ReactNativeWebView.postMessage('PAYMENT_FAILED');
//             }
//         });
//     });
//     observer.observe(document.body, { childList: true, subtree: true });
// })();
// `;

// const PaymentLoadingOverlay = () => (
//   <View style={styles.loadingOverlay}>
//     <View style={styles.loadingCard}>
//       <ActivityIndicator size="large" color="#10B981" />
//       <Text style={styles.loadingTitle}>Processing Payment</Text>
//       <Text style={styles.loadingSubtext}>Please don't close this window</Text>
//     </View>
//   </View>
// );

// export default function CheckoutPage() {
//   const insets = useSafeAreaInsets();
//   const {
//     shippingFee,
//     loading: isLoadingShippingFee,
//     error: shippingFeeError,
//   } = useShippingFee();

//   const navigation = useNavigation();
//   const [isProcessing, setIsProcessing] = useState(false);
//   const [paymentError, setPaymentError] = useState(null);
//   const [showWebView, setShowWebView] = useState(false);
//   const [paymentUrl, setPaymentUrl] = useState(null);
//   const [isWebViewLoading, setIsWebViewLoading] = useState(true);
//   const [showSuccessModal, setShowSuccessModal] = useState(false);
//   const [showFailureModal, setShowFailureModal] = useState(false);

//   const { items, total, discountedTotal, appliedCoupon, clearCart } =
//     useCartStore();

//   const handleBackPress = useCallback(() => {
//     if (showWebView) {
//       Alert.alert(
//         "Cancel Payment?",
//         "Are you sure you want to cancel? This payment will not be processed.",
//         [
//           { text: "Continue Payment", style: "cancel" },
//           {
//             text: "Cancel Payment",
//             style: "destructive",
//             onPress: () => {
//               setShowWebView(false);
//               setPaymentUrl(null);
//               setShowFailureModal(true); // Show failure modal for cancellation feedback
//             },
//           },
//         ]
//       );
//       return true;
//     }
//     router.push("/(root)/Cart");
//     return true;
//   }, [showWebView]);

//   useEffect(() => {
//     const backHandler = BackHandler.addEventListener(
//       "hardwareBackPress",
//       handleBackPress
//     );
//     return () => backHandler.remove();
//   }, [handleBackPress]);

//   useFocusEffect(
//     useCallback(() => {
//       navigation.setOptions({
//         gestureEnabled: !showWebView,
//         headerShown: false,
//       });
//     }, [showWebView])
//   );

//   const subtotal = total;
//   const discount = appliedCoupon
//     ? appliedCoupon.type === "percentage"
//       ? (total * appliedCoupon.amount) / 100
//       : appliedCoupon.amount
//     : 0;
//   const finalTotal = (discountedTotal || total) + shippingFee;

//   const handlePaymentSuccess = () => {
//     clearCart();
//     setShowWebView(false);
//     setPaymentUrl(null);
//     setShowSuccessModal(true); // Show success modal
//   };

//   const handlePaymentFailure = () => {
//     setShowWebView(false);
//     setPaymentUrl(null);
//     setShowFailureModal(true); // Show failure modal
//   };

//   const handlePaymentError = (errorMessage) => {
//     setPaymentError(errorMessage);
//     setShowFailureModal(true); // Show failure modal for errors
//   };

//   const handlePayment = async () => {
//     if (isProcessing) return;

//     try {
//       const netInfo = await NetInfo.fetch();
//       if (!netInfo.isConnected) {
//         Alert.alert(
//           "No Internet Connection",
//           "Please check your connection and try again"
//         );
//         return;
//       }

//       setIsProcessing(true);
//       setPaymentError(null);

//       const merchTxnUID = `ORD${Date.now()}${Math.random()
//         .toString(36)
//         .slice(2, 6)}`;
//       const txnHDR = `${Date.now()}${Math.floor(Math.random() * 10000)}`;

//       const payload = {
//         DBRqst: "PY_ECom",
//         Do_Appinfo: {
//           APIVer: "2.1",
//           APPTyp: "MOB",
//           AppVer: "1.0",
//           Country: "KW",
//           OS: Platform.OS === "ios" ? "iOS" : "Android",
//         },
//         Do_MerchDtl: {
//           BKY_PRDENUM: "ECom",
//           FURL: "https://yourdomain.com/paymentfailure",
//           MerchUID: "Mer2000012",
//           SURL: "https://yourdomain.com/paymentsuccess",
//         },
//         Do_PyrDtl: {},
//         Do_TxnDtl: [
//           {
//             SubMerchUID: "Mer2000012",
//             Txn_AMT: finalTotal.toFixed(3),
//           },
//         ],
//         Do_TxnHdr: {
//           Merch_Txn_UID: merchTxnUID,
//           PayFor: "ECom",
//           PayMethod: "KNET",
//           Txn_HDR: txnHDR,
//           hashMac: "your_hashmac_calculation_here",
//         },
//       };

//       const response = await fetch(PAYMENT_API_URL, {
//         method: "POST",
//         headers: {
//           "Content-Type": "application/json",
//           Accept: "application/json",
//         },
//         body: JSON.stringify(payload),
//       });

//       if (!response.ok) {
//         throw new Error("Payment service unavailable");
//       }

//       const data = await response.json();

//       if (!data?.PayUrl || !data.PayUrl.startsWith("https://")) {
//         throw new Error("Invalid or insecure payment URL");
//       }

//       setPaymentUrl(data.PayUrl);
//       setShowWebView(true);
//     } catch (error) {
//       const errorMessage = error.message || "Payment failed";
//       setPaymentError(errorMessage);
//       handlePaymentError(errorMessage);
//     } finally {
//       setIsProcessing(false);
//     }
//   };

//   if (items.length === 0) {
//     router.replace("/(root)/Cart");
//     return null;
//   }

//   return (
//     <SafeAreaView style={[styles.safeArea, { paddingTop: insets.top }]}>
//       <StatusBar barStyle="dark-content" backgroundColor="#f9fafb" />

//       <View style={styles.header}>
//         <TouchableOpacity
//           onPress={() => router.push("/(root)/Cart")}
//           style={styles.backButton}
//           hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//         >
//           <ChevronLeft color="#E53935" size={28} />
//         </TouchableOpacity>
//         <Text style={styles.headerTitle}>Secure Checkout</Text>
//       </View>

//       <ScrollView
//         style={styles.container}
//         contentContainerStyle={styles.contentContainer}
//         showsVerticalScrollIndicator={false}
//       >
//         <View style={styles.card}>
//           <View style={styles.cardTitleContainer}>
//             <Text style={styles.cardTitle}>Order Summary</Text>
//             <Text style={styles.itemCount}>{items.length} items</Text>
//           </View>

//           {items.map((item) => (
//             <View key={item.documentId} style={styles.itemRow}>
//               <View style={styles.itemDetails}>
//                 <Text style={styles.itemName} numberOfLines={1}>
//                   {item.name}
//                 </Text>
//                 <Text style={styles.itemQuantity}>Qty: {item.quantity}</Text>
//               </View>
//               <Text style={styles.itemPrice}>
//                 {((item.salesPrice || item.price) * item.quantity).toFixed(3)}{" "}
//                 KWD
//               </Text>
//             </View>
//           ))}

//           <View style={styles.summaryContainer}>
//             <OrderSummaryRow
//               label="Subtotal"
//               value={`${subtotal.toFixed(3)} KWD`}
//             />

//             {appliedCoupon && (
//               <OrderSummaryRow
//                 label={`Discount (${appliedCoupon.code})`}
//                 value={`- ${discount.toFixed(3)} KWD`}
//                 isDiscount
//               />
//             )}

//             <View style={styles.shippingFeeRow}>
//               <Text style={styles.summaryLabel}>Shipping Fee</Text>
//               <View style={styles.shippingFeeValueContainer}>
//                 {isLoadingShippingFee ? (
//                   <ActivityIndicator size="small" color="#10B981" />
//                 ) : shippingFeeError ? (
//                   <Text style={styles.errorValue}>Error loading fee</Text>
//                 ) : (
//                   <Text style={styles.summaryValue}>{`${shippingFee.toFixed(
//                     3
//                   )} KWD`}</Text>
//                 )}
//               </View>
//             </View>

//             <View style={styles.divider} />

//             <OrderSummaryRow
//               label="Total Amount"
//               value={`${finalTotal.toFixed(3)} KWD`}
//               isTotal
//               isLoading={isLoadingShippingFee}
//             />
//           </View>
//         </View>

//         <View style={styles.securityCard}>
//           <View style={styles.securityHeader}>
//             <Lock size={20} color="#10B981" />
//             <Text style={styles.securityTitle}>Secure Payment</Text>
//           </View>
//           <Text style={styles.securityText}>
//             • SSL encrypted payment processing{"\n"}• Verified by Bookeey
//             Payment Gateway{"\n"}• Your payment details are protected
//           </Text>
//         </View>

//         <TouchableOpacity
//           style={[
//             styles.payButton,
//             (isProcessing || isLoadingShippingFee) && styles.payButtonDisabled,
//           ]}
//           onPress={handlePayment}
//           disabled={isProcessing || isLoadingShippingFee}
//         >
//           {isProcessing ? (
//             <ActivityIndicator color="white" size="small" />
//           ) : (
//             <View style={styles.payButtonContent}>
//               <CreditCard size={20} color="white" />
//               <Text style={styles.payButtonText}>
//                 Pay {finalTotal.toFixed(3)} KWD
//               </Text>
//             </View>
//           )}
//         </TouchableOpacity>

//         {paymentError && <Text style={styles.errorText}>{paymentError}</Text>}
//       </ScrollView>

//       <Modal
//         visible={showWebView}
//         animationType="slide"
//         onRequestClose={handleBackPress}
//       >
//         <SafeAreaView style={styles.modalContainer}>
//           <View style={styles.webViewHeader}>
//             <TouchableOpacity
//               onPress={handleBackPress}
//               style={styles.webViewCloseButton}
//               hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//             >
//               <ArrowLeft color="#E53935" size={24} />
//             </TouchableOpacity>
//             <View style={styles.webViewTitleContainer}>
//               <Lock size={16} color="#10B981" />
//               <Text style={styles.webViewTitle}>Secure Payment</Text>
//             </View>
//           </View>

//           {isWebViewLoading && <PaymentLoadingOverlay />}

//           {paymentUrl && (
//             <WebView
//               source={{ uri: paymentUrl }}
//               injectedJavaScript={injectScript}
//               onMessage={(event) => {
//                 const { data } = event.nativeEvent;
//                 if (data === "PAYMENT_SUCCESS") {
//                   handlePaymentSuccess();
//                 } else if (data === "PAYMENT_FAILED") {
//                   handlePaymentFailure();
//                 }
//               }}
//               onNavigationStateChange={(navState) => {
//                 if (
//                   navState.url.includes("paymentsuccess") &&
//                   navState.url.includes("errorCode=0")
//                 ) {
//                   handlePaymentSuccess();
//                 } else if (
//                   navState.url.includes("paymentfailure") &&
//                   navState.url.includes("errorCode=1")
//                 ) {
//                   handlePaymentFailure();
//                 }
//               }}
//               onLoadStart={() => setIsWebViewLoading(true)}
//               onLoadEnd={() => setIsWebViewLoading(false)}
//               onError={(syntheticEvent) => {
//                 handlePaymentError(syntheticEvent.nativeEvent.description);
//               }}
//               onHttpError={() => {
//                 handlePaymentError("Connection error");
//               }}
//               style={styles.webView}
//               incognito={true}
//               cacheEnabled={false}
//               domStorageEnabled={true}
//               javaScriptEnabled={true}
//               startInLoadingState={true}
//             />
//           )}
//         </SafeAreaView>
//       </Modal>

//       {/* Success Modal */}
//       <Modal
//         visible={showSuccessModal}
//         transparent={true}
//         animationType="fade"
//         onRequestClose={() => setShowSuccessModal(false)}
//       >
//         <View style={styles.modalBackground}>
//           <Animated.View style={[styles.modalContent, styles.successModal]}>
//             <CheckCircle size={48} color="#10B981" />
//             <Text style={styles.modalTitle}>Payment Successful!</Text>
//             <Text style={styles.modalText}>
//               Your order has been placed successfully.
//             </Text>
//             <Pressable
//               style={styles.modalButton}
//               onPress={() => {
//                 setShowSuccessModal(false);
//                 router.replace("/(root)/order-success");
//               }}
//             >
//               <Text style={styles.modalButtonText}>View Order</Text>
//             </Pressable>
//           </Animated.View>
//         </View>
//       </Modal>

//       {/* Failure Modal */}
//       <Modal
//         visible={showFailureModal}
//         transparent={true}
//         animationType="fade"
//         onRequestClose={() => setShowFailureModal(false)}
//       >
//         <View style={styles.modalBackground}>
//           <Animated.View style={[styles.modalContent, styles.failureModal]}>
//             <XCircle size={48} color="#E53935" />
//             <Text style={styles.modalTitle}>Payment Failed</Text>
//             <Text style={styles.modalText}>
//               {paymentError
//                 ? paymentError
//                 : "There was an issue with your payment or it was canceled. Please try again."}
//             </Text>
//             <Pressable
//               style={styles.modalButton}
//               onPress={() => {
//                 setShowFailureModal(false);
//                 router.replace("/(root)/order-failed");
//               }}
//             >
//               <Text style={styles.modalButtonText}>Try Again</Text>
//             </Pressable>
//           </Animated.View>
//         </View>
//       </Modal>
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: {
//     flex: 1,
//     backgroundColor: "#f9fafb",
//   },
//   header: {
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     paddingVertical: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f0f0f0",
//   },
//   backButton: {
//     padding: 4,
//   },
//   headerTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#1f2937",
//     marginLeft: 16,
//   },
//   container: {
//     flex: 1,
//   },
//   contentContainer: {
//     padding: 16,
//     paddingBottom: 100,
//   },
//   card: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   cardTitleContainer: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 16,
//   },
//   cardTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//   },
//   itemCount: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//   },
//   itemRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 12,
//     paddingBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f1f5f9",
//   },
//   itemDetails: {
//     flex: 1,
//     paddingRight: 8,
//   },
//   itemName: {
//     fontSize: 15,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//     marginBottom: 4,
//   },
//   itemQuantity: {
//     fontSize: 13,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//   },
//   itemPrice: {
//     fontSize: 15,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//   },
//   summaryContainer: {
//     marginTop: 16,
//     paddingTop: 16,
//     borderTopWidth: 1,
//     borderTopColor: "#e5e7eb",
//   },
//   divider: {
//     height: 1,
//     backgroundColor: "#e5e7eb",
//     marginVertical: 12,
//   },
//   securityCard: {
//     backgroundColor: "#f0fdf4",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 24,
//     borderWidth: 1,
//     borderColor: "#86efac",
//   },
//   securityHeader: {
//     flexDirection: "row",
//     alignItems: "center",
//     marginBottom: 12,
//     gap: 8,
//   },
//   securityTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#047857",
//   },
//   securityText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4B5563",
//     lineHeight: 22,
//   },
//   payButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 12,
//     padding: 18,
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 12,
//   },
//   payButtonDisabled: {
//     opacity: 0.6,
//   },
//   payButtonContent: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 10,
//   },
//   payButtonText: {
//     color: "white",
//     fontSize: 16,
//     fontFamily: "Cairo-Bold",
//   },
//   errorText: {
//     color: "#DC2626",
//     textAlign: "center",
//     marginTop: 8,
//     fontFamily: "Cairo",
//   },
//   modalContainer: {
//     flex: 1,
//     backgroundColor: "#fff",
//   },
//   webViewHeader: {
//     height: 56,
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     borderBottomWidth: 1,
//     borderBottomColor: "#E5E7EB",
//     backgroundColor: "#f9fafb",
//   },
//   webViewCloseButton: {
//     padding: 8,
//   },
//   webViewTitleContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 8,
//     flex: 1,
//     justifyContent: "center",
//     marginRight: 40,
//   },
//   webViewTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   webView: {
//     flex: 1,
//   },
//   loadingOverlay: {
//     position: "absolute",
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//     backgroundColor: "rgba(255,255,255,0.95)",
//     justifyContent: "center",
//     alignItems: "center",
//     zIndex: 1000,
//   },
//   loadingCard: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//     width: "80%",
//     maxWidth: 300,
//   },
//   loadingTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   loadingSubtext: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   shippingFeeRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginVertical: 4,
//   },
//   shippingFeeValueContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     justifyContent: "flex-end",
//   },
//   summaryLabel: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4b5563",
//   },
//   summaryValue: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   errorValue: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#DC2626",
//   },
//   modalBackground: {
//     flex: 1,
//     justifyContent: "center",
//     alignItems: "center",
//     backgroundColor: "rgba(0, 0, 0, 0.5)", // Semi-transparent background
//   },
//   modalContent: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "80%",
//     maxWidth: 300,
//   },
//   successModal: {
//     borderColor: "#10B981",
//     borderWidth: 2,
//   },
//   failureModal: {
//     borderColor: "#E53935",
//     borderWidth: 2,
//   },
//   modalTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   modalText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   modalButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 8,
//     paddingVertical: 12,
//     paddingHorizontal: 24,
//     marginTop: 24,
//   },
//   modalButtonText: {
//     color: "white",
//     fontSize: 16,
//     fontFamily: "Cairo-Bold",
//   },
// });

/******************************* */

// // Works

// import React, { useState, useCallback, useEffect } from "react";
// import {
//   View,
//   Text,
//   ScrollView,
//   Alert,
//   ActivityIndicator,
//   StyleSheet,
//   Platform,
//   TouchableOpacity,
//   SafeAreaView,
//   BackHandler,
//   Modal,
//   StatusBar,
//   Pressable,
//   Animated,
// } from "react-native";
// import { router, useNavigation } from "expo-router";
// import { WebView } from "react-native-webview";
// import { useFocusEffect } from "@react-navigation/native";
// import {
//   Shield,
//   CreditCard,
//   ArrowLeft,
//   Lock,
//   ChevronLeft,
//   CheckCircle,
//   XCircle,
// } from "lucide-react-native";
// import NetInfo from "@react-native-community/netinfo";
// import useCartStore from "../../store/cartStore";
// import { OrderSummaryRow } from "../Components/OrderSummary";
// import useShippingFee from "../hooks/useShippingFee";
// import { useSafeAreaInsets } from "react-native-safe-area-context";

// const DEBUG = process.env.EXPO_PUBLIC_DEBUG === "true";
// const API_URL = process.env.EXPO_PUBLIC_STRAPI_API_URL;
// const PAYMENT_API_URL =
//   "https://pg.bookeey.com/internalapi/api/payment/requestLink";

// const injectScript = `
// (function() {
//     document.cookie = "ngrok-skip-browser-warning=true";
//     const button = document.querySelector('.button');
//     if (button) {
//         button.click();
//     }
//     const observer = new MutationObserver(function(mutations) {
//         mutations.forEach(function(mutation) {
//             if (mutation.target.textContent.includes('Payment Successful')) {
//                 window.ReactNativeWebView.postMessage('PAYMENT_SUCCESS');
//             } else if (mutation.target.textContent.includes('Payment Failed')) {
//                 window.ReactNativeWebView.postMessage('PAYMENT_FAILED');
//             }
//         });
//     });
//     observer.observe(document.body, { childList: true, subtree: true });
// })();
// `;

// const PaymentLoadingOverlay = () => (
//   <View style={styles.loadingOverlay}>
//     <View style={styles.loadingCard}>
//       <ActivityIndicator size="large" color="#10B981" />
//       <Text style={styles.loadingTitle}>Processing Payment</Text>
//       <Text style={styles.loadingSubtext}>Please don't close this window</Text>
//     </View>
//   </View>
// );

// export default function CheckoutPage() {
//   const insets = useSafeAreaInsets();
//   const {
//     shippingFee,
//     loading: isLoadingShippingFee,
//     error: shippingFeeError,
//   } = useShippingFee();

//   const navigation = useNavigation();
//   const [isProcessing, setIsProcessing] = useState(false);
//   const [paymentError, setPaymentError] = useState(null);
//   const [showWebView, setShowWebView] = useState(false);
//   const [paymentUrl, setPaymentUrl] = useState(null);
//   const [isWebViewLoading, setIsWebViewLoading] = useState(true);
//   const [showSuccessModal, setShowSuccessModal] = useState(false);
//   const [showFailureModal, setShowFailureModal] = useState(false);

//   const { items, total, discountedTotal, appliedCoupon, clearCart } =
//     useCartStore();

//   const handleBackPress = useCallback(() => {
//     if (showWebView) {
//       Alert.alert(
//         "Cancel Payment?",
//         "Are you sure you want to cancel? This payment will not be processed.",
//         [
//           { text: "Continue Payment", style: "cancel" },
//           {
//             text: "Cancel Payment",
//             style: "destructive",
//             onPress: () => {
//               setShowWebView(false);
//               setPaymentUrl(null);
//               setShowFailureModal(true); // Show failure modal for cancellation feedback
//             },
//           },
//         ]
//       );
//       return true;
//     }
//     router.push("/(root)/Cart");
//     return true;
//   }, [showWebView]);

//   useEffect(() => {
//     const backHandler = BackHandler.addEventListener(
//       "hardwareBackPress",
//       handleBackPress
//     );
//     return () => backHandler.remove();
//   }, [handleBackPress]);

//   useFocusEffect(
//     useCallback(() => {
//       navigation.setOptions({
//         gestureEnabled: !showWebView,
//         headerShown: false,
//       });
//     }, [showWebView])
//   );

//   const subtotal = total;
//   const discount = appliedCoupon
//     ? appliedCoupon.type === "percentage"
//       ? (total * appliedCoupon.amount) / 100
//       : appliedCoupon.amount
//     : 0;
//   const finalTotal = (discountedTotal || total) + shippingFee;

//   const handlePaymentSuccess = () => {
//     clearCart();
//     setShowWebView(false);
//     setPaymentUrl(null);
//     setShowSuccessModal(true); // Show success modal
//   };

//   const handlePaymentFailure = () => {
//     setShowWebView(false);
//     setPaymentUrl(null);
//     setShowFailureModal(true); // Show failure modal
//   };

//   const handlePaymentError = (errorMessage) => {
//     setPaymentError(errorMessage);
//     setShowFailureModal(true); // Show failure modal for errors
//   };

//   const handlePayment = async () => {
//     if (isProcessing) return;

//     try {
//       const netInfo = await NetInfo.fetch();
//       if (!netInfo.isConnected) {
//         Alert.alert(
//           "No Internet Connection",
//           "Please check your connection and try again"
//         );
//         return;
//       }

//       setIsProcessing(true);
//       setPaymentError(null);

//       const merchTxnUID = `ORD${Date.now()}${Math.random()
//         .toString(36)
//         .slice(2, 6)}`;
//       const txnHDR = `${Date.now()}${Math.floor(Math.random() * 10000)}`;

//       const payload = {
//         DBRqst: "PY_ECom",
//         Do_Appinfo: {
//           APIVer: "2.1",
//           APPTyp: "MOB",
//           AppVer: "1.0",
//           Country: "KW",
//           OS: Platform.OS === "ios" ? "iOS" : "Android",
//         },
//         Do_MerchDtl: {
//           BKY_PRDENUM: "ECom",
//           FURL: "https://yourdomain.com/paymentfailure",
//           MerchUID: "Mer2000012",
//           SURL: "https://yourdomain.com/paymentsuccess",
//         },
//         Do_PyrDtl: {},
//         Do_TxnDtl: [
//           {
//             SubMerchUID: "Mer2000012",
//             Txn_AMT: finalTotal.toFixed(3),
//           },
//         ],
//         Do_TxnHdr: {
//           Merch_Txn_UID: merchTxnUID,
//           PayFor: "ECom",
//           PayMethod: "KNET",
//           Txn_HDR: txnHDR,
//           hashMac: "your_hashmac_calculation_here",
//         },
//       };

//       const response = await fetch(PAYMENT_API_URL, {
//         method: "POST",
//         headers: {
//           "Content-Type": "application/json",
//           Accept: "application/json",
//         },
//         body: JSON.stringify(payload),
//       });

//       if (!response.ok) {
//         throw new Error("Payment service unavailable");
//       }

//       const data = await response.json();

//       if (!data?.PayUrl || !data.PayUrl.startsWith("https://")) {
//         throw new Error("Invalid or insecure payment URL");
//       }

//       setPaymentUrl(data.PayUrl);
//       setShowWebView(true);
//     } catch (error) {
//       const errorMessage = error.message || "Payment failed";
//       setPaymentError(errorMessage);
//       handlePaymentError(errorMessage);
//     } finally {
//       setIsProcessing(false);
//     }
//   };

//   if (items.length === 0) {
//     router.replace("/(root)/Cart");
//     return null;
//   }

//   return (
//     <SafeAreaView style={[styles.safeArea, { paddingTop: insets.top }]}>
//       <StatusBar barStyle="dark-content" backgroundColor="#f9fafb" />

//       <View style={styles.header}>
//         <TouchableOpacity
//           onPress={() => router.push("/(root)/Cart")}
//           style={styles.backButton}
//           hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//         >
//           <ChevronLeft color="#E53935" size={28} />
//         </TouchableOpacity>
//         <Text style={styles.headerTitle}>Secure Checkout</Text>
//       </View>

//       <ScrollView
//         style={styles.container}
//         contentContainerStyle={styles.contentContainer}
//         showsVerticalScrollIndicator={false}
//       >
//         <View style={styles.card}>
//           <View style={styles.cardTitleContainer}>
//             <Text style={styles.cardTitle}>Order Summary</Text>
//             <Text style={styles.itemCount}>{items.length} items</Text>
//           </View>

//           {items.map((item) => (
//             <View key={item.documentId} style={styles.itemRow}>
//               <View style={styles.itemDetails}>
//                 <Text style={styles.itemName} numberOfLines={1}>
//                   {item.name}
//                 </Text>
//                 <Text style={styles.itemQuantity}>Qty: {item.quantity}</Text>
//               </View>
//               <Text style={styles.itemPrice}>
//                 {((item.salesPrice || item.price) * item.quantity).toFixed(3)}{" "}
//                 KWD
//               </Text>
//             </View>
//           ))}

//           <View style={styles.summaryContainer}>
//             <OrderSummaryRow
//               label="Subtotal"
//               value={`${subtotal.toFixed(3)} KWD`}
//             />

//             {appliedCoupon && (
//               <OrderSummaryRow
//                 label={`Discount (${appliedCoupon.code})`}
//                 value={`- ${discount.toFixed(3)} KWD`}
//                 isDiscount
//               />
//             )}

//             <View style={styles.shippingFeeRow}>
//               <Text style={styles.summaryLabel}>Shipping Fee</Text>
//               <View style={styles.shippingFeeValueContainer}>
//                 {isLoadingShippingFee ? (
//                   <ActivityIndicator size="small" color="#10B981" />
//                 ) : shippingFeeError ? (
//                   <Text style={styles.errorValue}>Error loading fee</Text>
//                 ) : (
//                   <Text style={styles.summaryValue}>{`${shippingFee.toFixed(
//                     3
//                   )} KWD`}</Text>
//                 )}
//               </View>
//             </View>

//             <View style={styles.divider} />

//             <OrderSummaryRow
//               label="Total Amount"
//               value={`${finalTotal.toFixed(3)} KWD`}
//               isTotal
//               isLoading={isLoadingShippingFee}
//             />
//           </View>
//         </View>

//         <View style={styles.securityCard}>
//           <View style={styles.securityHeader}>
//             <Lock size={20} color="#10B981" />
//             <Text style={styles.securityTitle}>Secure Payment</Text>
//           </View>
//           <Text style={styles.securityText}>
//             • SSL encrypted payment processing{"\n"}• Verified by Bookeey
//             Payment Gateway{"\n"}• Your payment details are protected
//           </Text>
//         </View>

//         <TouchableOpacity
//           style={[
//             styles.payButton,
//             (isProcessing || isLoadingShippingFee) && styles.payButtonDisabled,
//           ]}
//           onPress={handlePayment}
//           disabled={isProcessing || isLoadingShippingFee}
//         >
//           {isProcessing ? (
//             <ActivityIndicator color="white" size="small" />
//           ) : (
//             <View style={styles.payButtonContent}>
//               <CreditCard size={20} color="white" />
//               <Text style={styles.payButtonText}>
//                 Pay {finalTotal.toFixed(3)} KWD
//               </Text>
//             </View>
//           )}
//         </TouchableOpacity>

//         {paymentError && <Text style={styles.errorText}>{paymentError}</Text>}
//       </ScrollView>

//       <Modal
//         visible={showWebView}
//         animationType="slide"
//         onRequestClose={handleBackPress}
//       >
//         <SafeAreaView style={styles.modalContainer}>
//           <View style={styles.webViewHeader}>
//             <TouchableOpacity
//               onPress={handleBackPress}
//               style={styles.webViewCloseButton}
//               hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//             >
//               <ArrowLeft color="#E53935" size={24} />
//             </TouchableOpacity>
//             <View style={styles.webViewTitleContainer}>
//               <Lock size={16} color="#10B981" />
//               <Text style={styles.webViewTitle}>Secure Payment</Text>
//             </View>
//           </View>

//           {isWebViewLoading && <PaymentLoadingOverlay />}

//           {paymentUrl && (
//             <WebView
//               source={{ uri: paymentUrl }}
//               injectedJavaScript={injectScript}
//               onMessage={(event) => {
//                 const { data } = event.nativeEvent;
//                 if (data === "PAYMENT_SUCCESS") {
//                   handlePaymentSuccess();
//                 } else if (data === "PAYMENT_FAILED") {
//                   handlePaymentFailure();
//                 }
//               }}
//               onNavigationStateChange={(navState) => {
//                 if (
//                   navState.url.includes("paymentsuccess") &&
//                   navState.url.includes("errorCode=0")
//                 ) {
//                   handlePaymentSuccess();
//                 } else if (
//                   navState.url.includes("paymentfailure") &&
//                   navState.url.includes("errorCode=1")
//                 ) {
//                   handlePaymentFailure();
//                 }
//               }}
//               onLoadStart={() => setIsWebViewLoading(true)}
//               onLoadEnd={() => setIsWebViewLoading(false)}
//               onError={(syntheticEvent) => {
//                 handlePaymentError(syntheticEvent.nativeEvent.description);
//               }}
//               onHttpError={() => {
//                 handlePaymentError("Connection error");
//               }}
//               style={styles.webView}
//               incognito={true}
//               cacheEnabled={false}
//               domStorageEnabled={true}
//               javaScriptEnabled={true}
//               startInLoadingState={true}
//             />
//           )}
//         </SafeAreaView>
//       </Modal>

//       {/* Success Modal */}
//       <Modal
//         visible={showSuccessModal}
//         transparent={true}
//         animationType="fade"
//         onRequestClose={() => setShowSuccessModal(false)}
//       >
//         <View style={styles.modalBackground}>
//           <Animated.View style={[styles.modalContent, styles.successModal]}>
//             <CheckCircle size={48} color="#10B981" />
//             <Text style={styles.modalTitle}>Payment Successful!</Text>
//             <Text style={styles.modalText}>
//               Your order has been placed successfully.
//             </Text>
//             <Pressable
//               style={styles.modalButton}
//               onPress={() => {
//                 setShowSuccessModal(false);
//                 router.replace("/(root)/order-success");
//               }}
//             >
//               <Text style={styles.modalButtonText}>View Order</Text>
//             </Pressable>
//           </Animated.View>
//         </View>
//       </Modal>

//       {/* Failure Modal */}
//       <Modal
//         visible={showFailureModal}
//         transparent={true}
//         animationType="fade"
//         onRequestClose={() => setShowFailureModal(false)}
//       >
//         <View style={styles.modalBackground}>
//           <Animated.View style={[styles.modalContent, styles.failureModal]}>
//             <XCircle size={48} color="#E53935" />
//             <Text style={styles.modalTitle}>Payment Failed</Text>
//             <Text style={styles.modalText}>
//               {paymentError
//                 ? paymentError
//                 : "There was an issue with your payment or it was canceled. Please try again."}
//             </Text>
//             <Pressable
//               style={styles.modalButton}
//               onPress={() => {
//                 setShowFailureModal(false);
//                 router.replace("/(root)/order-failed");
//               }}
//             >
//               <Text style={styles.modalButtonText}>Try Again</Text>
//             </Pressable>
//           </Animated.View>
//         </View>
//       </Modal>
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: {
//     flex: 1,
//     backgroundColor: "#f9fafb",
//   },
//   header: {
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     paddingVertical: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f0f0f0",
//   },
//   backButton: {
//     padding: 4,
//   },
//   headerTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#1f2937",
//     marginLeft: 16,
//   },
//   container: {
//     flex: 1,
//   },
//   contentContainer: {
//     padding: 16,
//     paddingBottom: 100,
//   },
//   card: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   cardTitleContainer: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 16,
//   },
//   cardTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//   },
//   itemCount: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//   },
//   itemRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 12,
//     paddingBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f1f5f9",
//   },
//   itemDetails: {
//     flex: 1,
//     paddingRight: 8,
//   },
//   itemName: {
//     fontSize: 15,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//     marginBottom: 4,
//   },
//   itemQuantity: {
//     fontSize: 13,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//   },
//   itemPrice: {
//     fontSize: 15,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//   },
//   summaryContainer: {
//     marginTop: 16,
//     paddingTop: 16,
//     borderTopWidth: 1,
//     borderTopColor: "#e5e7eb",
//   },
//   divider: {
//     height: 1,
//     backgroundColor: "#e5e7eb",
//     marginVertical: 12,
//   },
//   securityCard: {
//     backgroundColor: "#f0fdf4",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 24,
//     borderWidth: 1,
//     borderColor: "#86efac",
//   },
//   securityHeader: {
//     flexDirection: "row",
//     alignItems: "center",
//     marginBottom: 12,
//     gap: 8,
//   },
//   securityTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#047857",
//   },
//   securityText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4B5563",
//     lineHeight: 22,
//   },
//   payButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 12,
//     padding: 18,
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 12,
//   },
//   payButtonDisabled: {
//     opacity: 0.6,
//   },
//   payButtonContent: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 10,
//   },
//   payButtonText: {
//     color: "white",
//     fontSize: 16,
//     fontFamily: "Cairo-Bold",
//   },
//   errorText: {
//     color: "#DC2626",
//     textAlign: "center",
//     marginTop: 8,
//     fontFamily: "Cairo",
//   },
//   modalContainer: {
//     flex: 1,
//     backgroundColor: "#fff",
//   },
//   webViewHeader: {
//     height: 56,
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     borderBottomWidth: 1,
//     borderBottomColor: "#E5E7EB",
//     backgroundColor: "#f9fafb",
//   },
//   webViewCloseButton: {
//     padding: 8,
//   },
//   webViewTitleContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 8,
//     flex: 1,
//     justifyContent: "center",
//     marginRight: 40,
//   },
//   webViewTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   webView: {
//     flex: 1,
//   },
//   loadingOverlay: {
//     position: "absolute",
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//     backgroundColor: "rgba(255,255,255,0.95)",
//     justifyContent: "center",
//     alignItems: "center",
//     zIndex: 1000,
//   },
//   loadingCard: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//     width: "80%",
//     maxWidth: 300,
//   },
//   loadingTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   loadingSubtext: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   shippingFeeRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginVertical: 4,
//   },
//   shippingFeeValueContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     justifyContent: "flex-end",
//   },
//   summaryLabel: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4b5563",
//   },
//   summaryValue: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   errorValue: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#DC2626",
//   },
//   modalBackground: {
//     flex: 1,
//     justifyContent: "center",
//     alignItems: "center",
//     backgroundColor: "rgba(0, 0, 0, 0.5)", // Semi-transparent background
//   },
//   modalContent: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "80%",
//     maxWidth: 300,
//   },
//   successModal: {
//     borderColor: "#10B981",
//     borderWidth: 2,
//   },
//   failureModal: {
//     borderColor: "#E53935",
//     borderWidth: 2,
//   },
//   modalTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   modalText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   modalButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 8,
//     paddingVertical: 12,
//     paddingHorizontal: 24,
//     marginTop: 24,
//   },
//   modalButtonText: {
//     color: "white",
//     fontSize: 16,
//     fontFamily: "Cairo-Bold",
//   },
// });

/**************************************** */

// import React, { useState, useCallback, useEffect } from "react";
// import {
//   View,
//   Text,
//   ScrollView,
//   Alert,
//   ActivityIndicator,
//   StyleSheet,
//   Platform,
//   TouchableOpacity,
//   SafeAreaView,
//   BackHandler,
//   Modal,
//   StatusBar,
//   Pressable,
//   Animated,
// } from "react-native";
// import { router, useNavigation } from "expo-router";
// import { WebView } from "react-native-webview";
// import { useFocusEffect } from "@react-navigation/native";
// import {
//   Shield,
//   CreditCard,
//   ArrowLeft,
//   Lock,
//   ChevronLeft,
//   CheckCircle,
//   XCircle,
// } from "lucide-react-native";
// import NetInfo from "@react-native-community/netinfo";
// import useCartStore from "../../store/cartStore";
// import { OrderSummaryRow } from "../Components/OrderSummary";
// import useShippingFee from "../hooks/useShippingFee";
// import { useSafeAreaInsets } from "react-native-safe-area-context";
// import CryptoJS from "crypto-js";

// // const PAYMENT_API_URL =
// //   "https://pg.bookeey.com/internalapi/api/payment/requestLink";

// // const PAYMENT_API_URL =
// //   "https://demo.bookeey.com/pgapi/api/payment/requestLink";

// const PAYMENT_API_URL = process.env.EXPO_PUBLIC_PAYMENT_API_URL;

// const MerchUID = "mer2400018";
// const secret_key = "0623475";
// const SURL = "https://app.bookeeypayment.com/success";
// const FURL = "https://app.bookeeypayment.com/failure";

// const injectScript = `
// (function() {
//     const observer = new MutationObserver(function(mutations) {
//         mutations.forEach(function(mutation) {
//             if (mutation.target.textContent.includes('Payment Successful')) {
//                 window.ReactNativeWebView.postMessage('PAYMENT_SUCCESS');
//             } else if (mutation.target.textContent.includes('Payment Failed')) {
//                 window.ReactNativeWebView.postMessage('PAYMENT_FAILED');
//             }
//         });
//     });
//     observer.observe(document.body, { childList: true, subtree: true });
// })();
// `;

// const PaymentLoadingOverlay = () => (
//   <View style={styles.loadingOverlay}>
//     <View style={styles.loadingCard}>
//       <ActivityIndicator size="large" color="#10B981" />
//       <Text style={styles.loadingTitle}>Processing Payment</Text>
//       <Text style={styles.loadingSubtext}>Please don't close this window</Text>
//     </View>
//   </View>
// );

// export default function CheckoutPage() {
//   const insets = useSafeAreaInsets();
//   const {
//     shippingFee,
//     loading: isLoadingShippingFee,
//     error: shippingFeeError,
//   } = useShippingFee();
//   const navigation = useNavigation();
//   const [isProcessing, setIsProcessing] = useState(false);
//   const [paymentError, setPaymentError] = useState(null);
//   const [showWebView, setShowWebView] = useState(false);
//   const [paymentUrl, setPaymentUrl] = useState(null);
//   const [isWebViewLoading, setIsWebViewLoading] = useState(true);
//   const [showSuccessModal, setShowSuccessModal] = useState(false);
//   const [showFailureModal, setShowFailureModal] = useState(false);
//   const { items, total, discountedTotal, appliedCoupon, clearCart } =
//     useCartStore();

//   const handleBackPress = useCallback(() => {
//     if (showWebView) {
//       Alert.alert(
//         "Cancel Payment?",
//         "Are you sure you want to cancel? This payment will not be processed.",
//         [
//           { text: "Continue Payment", style: "cancel" },
//           {
//             text: "Cancel Payment",
//             style: "destructive",
//             onPress: () => {
//               setShowWebView(false);
//               setPaymentUrl(null);
//               setShowFailureModal(true);
//             },
//           },
//         ]
//       );
//       return true;
//     }
//     router.push("/(root)/Cart");
//     return true;
//   }, [showWebView]);

//   useEffect(() => {
//     const backHandler = BackHandler.addEventListener(
//       "hardwareBackPress",
//       handleBackPress
//     );
//     return () => backHandler.remove();
//   }, [handleBackPress]);

//   useFocusEffect(
//     useCallback(() => {
//       navigation.setOptions({
//         gestureEnabled: !showWebView,
//         headerShown: false,
//       });
//     }, [showWebView])
//   );

//   const subtotal = total;
//   const discount = appliedCoupon
//     ? appliedCoupon.type === "percentage"
//       ? (total * appliedCoupon.amount) / 100
//       : appliedCoupon.amount
//     : 0;
//   const finalTotal = (discountedTotal || total) + shippingFee;

//   const handlePaymentSuccess = () => {
//     clearCart();
//     setShowWebView(false);
//     setPaymentUrl(null);
//     setShowSuccessModal(true);
//   };

//   const handlePaymentFailure = () => {
//     setShowWebView(false);
//     setPaymentUrl(null);
//     setShowFailureModal(true);
//   };

//   const handlePaymentError = (errorMessage) => {
//     setPaymentError(errorMessage);
//     setShowFailureModal(true);
//   };

//   const handlePayment = async () => {
//     if (isProcessing) return;

//     try {
//       const netInfo = await NetInfo.fetch();
//       if (!netInfo.isConnected) {
//         Alert.alert(
//           "No Internet Connection",
//           "Please check your connection and try again"
//         );
//         return;
//       }

//       setIsProcessing(true);
//       setPaymentError(null);

//       const merchTxnUID = `ORD${Date.now()}${Math.random()
//         .toString(36)
//         .slice(2, 6)}`;
//       const txnHDR = `${Date.now()}${Math.floor(Math.random() * 10000)}`;
//       const rndnum = Math.random().toString(36).slice(2);
//       const sequence = `${MerchUID}|${merchTxnUID}|${SURL}|${FURL}|${finalTotal.toFixed(
//         3
//       )}|GEN|${secret_key}|${rndnum}`;
//       const hashMac = CryptoJS.SHA512(sequence).toString(CryptoJS.enc.Hex);

//       const payload = {
//         DBRqst: "PY_ECom",
//         Do_Appinfo: {
//           APIVer: "2.1",
//           APPTyp: "MOB",
//           AppVer: "1.0",
//           Country: "KW",
//           OS: Platform.OS === "ios" ? "iOS" : "Android",
//         },
//         Do_MerchDtl: {
//           BKY_PRDENUM: "ECom",
//           FURL: FURL,
//           MerchUID: MerchUID,
//           SURL: SURL,
//         },
//         Do_PyrDtl: {},
//         Do_TxnDtl: [
//           {
//             SubMerchUID: MerchUID,
//             Txn_AMT: finalTotal.toFixed(3),
//           },
//         ],
//         Do_TxnHdr: {
//           Merch_Txn_UID: merchTxnUID,
//           PayFor: "ECom",
//           PayMethod: "KNET",
//           Txn_HDR: txnHDR,
//           hashMac: hashMac,
//         },
//       };

//       const response = await fetch(PAYMENT_API_URL, {
//         method: "POST",
//         headers: {
//           "Content-Type": "application/json",
//           Accept: "application/json",
//         },
//         body: JSON.stringify(payload),
//       });

//       if (!response.ok) {
//         throw new Error("Payment service unavailable");
//       }

//       const data = await response.json();

//       if (!data?.PayUrl || !data.PayUrl.startsWith("https://")) {
//         throw new Error("Invalid or insecure payment URL");
//       }

//       setPaymentUrl(data.PayUrl);
//       setShowWebView(true);
//     } catch (error) {
//       const errorMessage = error.message || "Payment failed";
//       setPaymentError(errorMessage);
//       handlePaymentError(errorMessage);
//     } finally {
//       setIsProcessing(false);
//     }
//   };

//   if (items.length === 0) {
//     router.replace("/(root)/Cart");
//     return null;
//   }

//   return (
//     <SafeAreaView style={[styles.safeArea, { paddingTop: insets.top }]}>
//       <StatusBar barStyle="dark-content" backgroundColor="#f9fafb" />
//       <View style={styles.header}>
//         <TouchableOpacity
//           onPress={() => router.push("/(root)/Cart")}
//           style={styles.backButton}
//           hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//         >
//           <ChevronLeft color="#E53935" size={28} />
//         </TouchableOpacity>
//         <Text style={styles.headerTitle}>Secure Checkout</Text>
//       </View>
//       <ScrollView
//         style={styles.container}
//         contentContainerStyle={styles.contentContainer}
//         showsVerticalScrollIndicator={false}
//       >
//         <View style={styles.card}>
//           <View style={styles.cardTitleContainer}>
//             <Text style={styles.cardTitle}>Order Summary</Text>
//             <Text style={styles.itemCount}>{items.length} items</Text>
//           </View>
//           {items.map((item) => (
//             <View key={item.documentId} style={styles.itemRow}>
//               <View style={styles.itemDetails}>
//                 <Text style={styles.itemName} numberOfLines={1}>
//                   {item.name}
//                 </Text>
//                 <Text style={styles.itemQuantity}>Qty: {item.quantity}</Text>
//               </View>
//               <Text style={styles.itemPrice}>
//                 {((item.salesPrice || item.price) * item.quantity).toFixed(3)}{" "}
//                 KWD
//               </Text>
//             </View>
//           ))}
//           <View style={styles.summaryContainer}>
//             <OrderSummaryRow
//               label="Subtotal"
//               value={`${subtotal.toFixed(3)} KWD`}
//             />
//             {appliedCoupon && (
//               <OrderSummaryRow
//                 label={`Discount (${appliedCoupon.code})`}
//                 value={`- ${discount.toFixed(3)} KWD`}
//                 isDiscount
//               />
//             )}
//             <View style={styles.shippingFeeRow}>
//               <Text style={styles.summaryLabel}>Shipping Fee</Text>
//               <View style={styles.shippingFeeValueContainer}>
//                 {isLoadingShippingFee ? (
//                   <ActivityIndicator size="small" color="#10B981" />
//                 ) : shippingFeeError ? (
//                   <Text style={styles.errorValue}>Error loading fee</Text>
//                 ) : (
//                   <Text style={styles.summaryValue}>{`${shippingFee.toFixed(
//                     3
//                   )} KWD`}</Text>
//                 )}
//               </View>
//             </View>
//             <View style={styles.divider} />
//             <OrderSummaryRow
//               label="Total Amount"
//               value={`${finalTotal.toFixed(3)} KWD`}
//               isTotal
//               isLoading={isLoadingShippingFee}
//             />
//           </View>
//         </View>
//         <View style={styles.securityCard}>
//           <View style={styles.securityHeader}>
//             <Lock size={20} color="#10B981" />
//             <Text style={styles.securityTitle}>Secure Payment</Text>
//           </View>
//           <Text style={styles.securityText}>
//             • SSL encrypted payment processing • Verified by Bookeey Payment
//             Gateway • Your payment details are protected
//           </Text>
//         </View>
//         <TouchableOpacity
//           style={[
//             styles.payButton,
//             (isProcessing || isLoadingShippingFee) && styles.payButtonDisabled,
//           ]}
//           onPress={handlePayment}
//           disabled={isProcessing || isLoadingShippingFee}
//         >
//           {isProcessing ? (
//             <ActivityIndicator color="white" size="small" />
//           ) : (
//             <View style={styles.payButtonContent}>
//               <CreditCard size={20} color="white" />
//               <Text style={styles.payButtonText}>
//                 Pay {finalTotal.toFixed(3)} KWD
//               </Text>
//             </View>
//           )}
//         </TouchableOpacity>
//         {paymentError && <Text style={styles.errorText}>{paymentError}</Text>}
//       </ScrollView>
//       <Modal
//         visible={showWebView}
//         animationType="slide"
//         onRequestClose={handleBackPress}
//       >
//         <SafeAreaView style={styles.modalContainer}>
//           <View style={styles.webViewHeader}>
//             <TouchableOpacity
//               onPress={handleBackPress}
//               style={styles.webViewCloseButton}
//               hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//             >
//               <ArrowLeft color="#E53935" size={24} />
//             </TouchableOpacity>
//             <View style={styles.webViewTitleContainer}>
//               <Lock size={16} color="#10B981" />
//               <Text style={styles.webViewTitle}>Secure Payment</Text>
//             </View>
//           </View>
//           {isWebViewLoading && <PaymentLoadingOverlay />}
//           {paymentUrl && (
//             <WebView
//               source={{ uri: paymentUrl }}
//               injectedJavaScript={injectScript}
//               onMessage={(event) => {
//                 const { data } = event.nativeEvent;
//                 if (data === "PAYMENT_SUCCESS") {
//                   handlePaymentSuccess();
//                 } else if (data === "PAYMENT_FAILED") {
//                   handlePaymentFailure();
//                 }
//               }}
//               onShouldStartLoadWithRequest={(request) => {
//                 const url = request.url;
//                 if (url.startsWith(SURL)) {
//                   const params = new URLSearchParams(url.split("?")[1]);
//                   const errorCode = params.get("errorCode");
//                   const finalstatus = params.get("finalstatus");
//                   if (
//                     errorCode === "0" &&
//                     finalstatus &&
//                     atob(finalstatus) === "success"
//                   ) {
//                     handlePaymentSuccess();
//                   } else {
//                     setPaymentError("Invalid success response");
//                     handlePaymentFailure();
//                   }
//                   return false;
//                 } else if (url.startsWith(FURL)) {
//                   const params = new URLSearchParams(url.split("?")[1]);
//                   const errorCode = params.get("errorCode");
//                   const finalstatus = params.get("finalstatus");
//                   const errorMessage = params.get("errorMessage");
//                   if (
//                     errorCode === "1" &&
//                     finalstatus &&
//                     atob(finalstatus) === "failure"
//                   ) {
//                     setPaymentError(
//                       decodeURIComponent(errorMessage || "Payment failed")
//                     );
//                     handlePaymentFailure();
//                   } else {
//                     setPaymentError("Invalid failure response");
//                     handlePaymentFailure();
//                   }
//                   return false;
//                 }
//                 return true;
//               }}
//               onLoadStart={() => setIsWebViewLoading(true)}
//               onLoadEnd={() => setIsWebViewLoading(false)}
//               onError={(syntheticEvent) => {
//                 handlePaymentError(syntheticEvent.nativeEvent.description);
//               }}
//               onHttpError={() => {
//                 handlePaymentError("Connection error");
//               }}
//               style={styles.webView}
//               incognito={true}
//               cacheEnabled={false}
//               domStorageEnabled={true}
//               javaScriptEnabled={true}
//               startInLoadingState={true}
//             />
//           )}
//         </SafeAreaView>
//       </Modal>
//       <Modal
//         visible={showSuccessModal}
//         transparent={true}
//         animationType="fade"
//         onRequestClose={() => setShowSuccessModal(false)}
//       >
//         <View style={styles.modalBackground}>
//           <Animated.View style={[styles.modalContent, styles.successModal]}>
//             <CheckCircle size={48} color="#10B981" />
//             <Text style={styles.modalTitle}>Payment Successful!</Text>
//             <Text style={styles.modalText}>
//               Your order has been placed successfully.
//             </Text>
//             <Pressable
//               style={styles.modalButton}
//               onPress={() => {
//                 setShowSuccessModal(false);
//                 router.replace("/(root)/order-success");
//               }}
//             >
//               <Text style={styles.modalButtonText}>View Order</Text>
//             </Pressable>
//           </Animated.View>
//         </View>
//       </Modal>
//       <Modal
//         visible={showFailureModal}
//         transparent={true}
//         animationType="fade"
//         onRequestClose={() => setShowFailureModal(false)}
//       >
//         <View style={styles.modalBackground}>
//           <Animated.View style={[styles.modalContent, styles.failureModal]}>
//             <XCircle size={48} color="#E53935" />
//             <Text style={styles.modalTitle}>Payment Failed</Text>
//             <Text style={styles.modalText}>
//               {paymentError
//                 ? paymentError
//                 : "There was an issue with your payment or it was canceled. Please try again."}
//             </Text>
//             <Pressable
//               style={styles.modalButton}
//               onPress={() => {
//                 setShowFailureModal(false);
//                 // router.replace("/(root)/order-failed");
//               }}
//             >
//               <Text style={styles.modalButtonText}>Try Again</Text>
//             </Pressable>
//           </Animated.View>
//         </View>
//       </Modal>
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: { flex: 1, backgroundColor: "#f9fafb" },
//   header: {
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     paddingVertical: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f0f0f0",
//   },
//   backButton: { padding: 4 },
//   headerTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#1f2937",
//     marginLeft: 16,
//   },
//   container: { flex: 1 },
//   contentContainer: { padding: 16, paddingBottom: 100 },
//   card: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   cardTitleContainer: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 16,
//   },
//   cardTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//   },
//   itemCount: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//   },
//   itemRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 12,
//     paddingBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f1f5f9",
//   },
//   itemDetails: { flex: 1, paddingRight: 8 },
//   itemName: {
//     fontSize: 15,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//     marginBottom: 4,
//   },
//   itemQuantity: {
//     fontSize: 13,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//   },
//   itemPrice: {
//     fontSize: 15,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//   },
//   summaryContainer: {
//     marginTop: 16,
//     paddingTop: 16,
//     borderTopWidth: 1,
//     borderTopColor: "#e5e7eb",
//   },
//   divider: {
//     height: 1,
//     backgroundColor: "#e5e7eb",
//     marginVertical: 12,
//   },
//   securityCard: {
//     backgroundColor: "#f0fdf4",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 24,
//     borderWidth: 1,
//     borderColor: "#86efac",
//   },
//   securityHeader: {
//     flexDirection: "row",
//     alignItems: "center",
//     marginBottom: 12,
//     gap: 8,
//   },
//   securityTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#047857",
//   },
//   securityText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4B5563",
//     lineHeight: 22,
//   },
//   payButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 12,
//     padding: 18,
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 12,
//   },
//   payButtonDisabled: { opacity: 0.6 },
//   payButtonContent: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 10,
//   },
//   payButtonText: {
//     color: "white",
//     fontSize: 16,
//     fontFamily: "Cairo-Bold",
//   },
//   errorText: {
//     color: "#DC2626",
//     textAlign: "center",
//     marginTop: 8,
//     fontFamily: "Cairo",
//   },
//   modalContainer: { flex: 1, backgroundColor: "#fff" },
//   webViewHeader: {
//     height: 56,
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     borderBottomWidth: 1,
//     borderBottomColor: "#E5E7EB",
//     backgroundColor: "#f9fafb",
//   },
//   webViewCloseButton: { padding: 8 },
//   webViewTitleContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 8,
//     flex: 1,
//     justifyContent: "center",
//     marginRight: 40,
//   },
//   webViewTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   webView: { flex: 1 },
//   loadingOverlay: {
//     position: "absolute",
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//     backgroundColor: "rgba(255,255,255,0.95)",
//     justifyContent: "center",
//     alignItems: "center",
//     zIndex: 1000,
//   },
//   loadingCard: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//     width: "80%",
//     maxWidth: 300,
//   },
//   loadingTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   loadingSubtext: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   shippingFeeRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginVertical: 4,
//   },
//   shippingFeeValueContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     justifyContent: "flex-end",
//   },
//   summaryLabel: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4b5563",
//   },
//   summaryValue: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   errorValue: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#DC2626",
//   },
//   modalBackground: {
//     flex: 1,
//     justifyContent: "center",
//     alignItems: "center",
//     backgroundColor: "rgba(0, 0, 0, 0.5)",
//   },
//   modalContent: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "80%",
//     maxWidth: 300,
//   },
//   successModal: {
//     borderColor: "#10B981",
//     borderWidth: 2,
//   },
//   failureModal: {
//     borderColor: "#E53935",
//     borderWidth: 2,
//   },
//   modalTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   modalText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   modalButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 8,
//     paddingVertical: 12,
//     paddingHorizontal: 24,
//     marginTop: 24,
//   },
//   modalButtonText: {
//     color: "white",
//     fontSize: 16,
//     fontFamily: "Cairo-Bold",
//   },
// });

/***********************************/

// import React, { useState, useCallback, useEffect } from "react";
// import {
//   View,
//   Text,
//   ScrollView,
//   Alert,
//   ActivityIndicator,
//   StyleSheet,
//   Platform,
//   TouchableOpacity,
//   SafeAreaView,
//   BackHandler,
//   Modal,
//   StatusBar,
//   Pressable,
//   Animated,
// } from "react-native";
// import { router, useNavigation } from "expo-router";
// import { WebView } from "react-native-webview";
// import { useFocusEffect } from "@react-navigation/native";
// import {
//   Shield,
//   CreditCard,
//   ArrowLeft,
//   Lock,
//   ChevronLeft,
//   CheckCircle,
//   XCircle,
// } from "lucide-react-native";
// import NetInfo from "@react-native-community/netinfo";
// import useCartStore from "../../store/cartStore";
// import { OrderSummaryRow } from "../Components/OrderSummary";
// import useShippingFee from "../hooks/useShippingFee";
// import { useSafeAreaInsets } from "react-native-safe-area-context";
// import CryptoJS from "crypto-js";

// // Determine if it's a test environment
// const IS_TEST_ENV = process.env.EXPO_PUBLIC_IS_TEST_ENV === "true";

// // Set API URL based on environment
// const PAYMENT_API_URL = IS_TEST_ENV
//   ? "https://f36b-37-36-175-221.ngrok-free.app/api/payments/initiate"
//   : "https://pg.bookeey.com/internalapi/api/payment/requestLink";

// // Production-specific constants
// const MerchUID = "mer2400018";
// const secret_key = "0623475";
// const SURL = "https://app.bookeeypayment.com/success";
// const FURL = "https://app.bookeeypayment.com/failure";

// // Injection script for WebView (adjusted for both environments)
// const injectScript = `
// (function() {
//   ${
//     IS_TEST_ENV
//       ? `
//     // Skip ngrok warning for test environment
//     document.cookie = "ngrok-skip-browser-warning=true";
//     const button = document.querySelector('.button');
//     if (button) {
//       button.click();
//     }
//   `
//       : ""
//   }
//   const observer = new MutationObserver(function(mutations) {
//     mutations.forEach(function(mutation) {
//       if (mutation.target.textContent.includes('Payment Successful')) {
//         window.ReactNativeWebView.postMessage('PAYMENT_SUCCESS');
//       } else if (mutation.target.textContent.includes('Payment Failed')) {
//         window.ReactNativeWebView.postMessage('PAYMENT_FAILED');
//       }
//     });
//   });
//   observer.observe(document.body, { childList: true, subtree: true });
// })();
// `;

// const PaymentLoadingOverlay = () => (
//   <View style={styles.loadingOverlay}>
//     <View style={styles.loadingCard}>
//       <ActivityIndicator size="large" color="#10B981" />
//       <Text style={styles.loadingTitle}>Processing Payment</Text>
//       <Text style={styles.loadingSubtext}>Please don't close this window</Text>
//     </View>
//   </View>
// );

// export default function CheckoutPage() {
//   const insets = useSafeAreaInsets();
//   const {
//     shippingFee,
//     loading: isLoadingShippingFee,
//     error: shippingFeeError,
//   } = useShippingFee();
//   const navigation = useNavigation();
//   const [isProcessing, setIsProcessing] = useState(false);
//   const [paymentError, setPaymentError] = useState(null);
//   const [showWebView, setShowWebView] = useState(false);
//   const [paymentUrl, setPaymentUrl] = useState(null);
//   const [isWebViewLoading, setIsWebViewLoading] = useState(true);
//   const [showSuccessModal, setShowSuccessModal] = useState(false);
//   const [showFailureModal, setShowFailureModal] = useState(false);
//   const { items, total, discountedTotal, appliedCoupon, clearCart } =
//     useCartStore();

//   const handleBackPress = useCallback(() => {
//     if (showWebView) {
//       Alert.alert(
//         "Cancel Payment?",
//         "Are you sure you want to cancel? This payment will not be processed.",
//         [
//           { text: "Continue Payment", style: "cancel" },
//           {
//             text: "Cancel Payment",
//             style: "destructive",
//             onPress: () => {
//               setShowWebView(false);
//               setPaymentUrl(null);
//               setShowFailureModal(true);
//             },
//           },
//         ]
//       );
//       return true;
//     }
//     router.push("/(root)/Cart");
//     return true;
//   }, [showWebView]);

//   useEffect(() => {
//     const backHandler = BackHandler.addEventListener(
//       "hardwareBackPress",
//       handleBackPress
//     );
//     return () => backHandler.remove();
//   }, [handleBackPress]);

//   useFocusEffect(
//     useCallback(() => {
//       navigation.setOptions({
//         gestureEnabled: !showWebView,
//         headerShown: false,
//       });
//     }, [showWebView])
//   );

//   const subtotal = total;
//   const discount = appliedCoupon
//     ? appliedCoupon.type === "percentage"
//       ? (total * appliedCoupon.amount) / 100
//       : appliedCoupon.amount
//     : 0;
//   const finalTotal = (discountedTotal || total) + shippingFee;

//   const handlePaymentSuccess = () => {
//     clearCart();
//     setShowWebView(false);
//     setPaymentUrl(null);
//     setShowSuccessModal(true);
//   };

//   const handlePaymentFailure = () => {
//     setShowWebView(false);
//     setPaymentUrl(null);
//     setShowFailureModal(true);
//   };

//   const handlePaymentError = (errorMessage) => {
//     setPaymentError(errorMessage);
//     setShowFailureModal(true);
//   };

//   const handlePayment = async () => {
//     if (isProcessing) return;

//     try {
//       const netInfo = await NetInfo.fetch();
//       if (!netInfo.isConnected) {
//         Alert.alert(
//           "No Internet Connection",
//           "Please check your connection and try again"
//         );
//         return;
//       }

//       setIsProcessing(true);
//       setPaymentError(null);

//       let payload;
//       let headers = {
//         "Content-Type": "application/json",
//         Accept: "application/json",
//       };

//       if (IS_TEST_ENV) {
//         // Test environment payload and headers
//         payload = {
//           amount: Number(finalTotal.toFixed(3)),
//           orderId: `ORD${Date.now()}${Math.random().toString(36).slice(2, 6)}`,
//           customerInfo: {
//             platform: Platform.OS.toUpperCase(),
//             items: items.map((item) => ({
//               id: item.documentId,
//               name: item.name,
//               quantity: item.quantity,
//               price: Number((item.salesPrice || item.price).toFixed(3)),
//             })),
//           },
//         };
//         headers["ngrok-skip-browser-warning"] = "true";
//       } else {
//         // Production environment payload
//         const merchTxnUID = `ORD${Date.now()}${Math.random()
//           .toString(36)
//           .slice(2, 6)}`;
//         const txnHDR = `${Date.now()}${Math.floor(Math.random() * 10000)}`;
//         const rndnum = Math.random().toString(36).slice(2);
//         const sequence = `${MerchUID}|${merchTxnUID}|${SURL}|${FURL}|${finalTotal.toFixed(
//           3
//         )}|GEN|${secret_key}|${rndnum}`;
//         const hashMac = CryptoJS.SHA512(sequence).toString(CryptoJS.enc.Hex);

//         payload = {
//           DBRqst: "PY_ECom",
//           Do_Appinfo: {
//             APIVer: "2.1",
//             APPTyp: "MOB",
//             AppVer: "1.0",
//             Country: "KW",
//             OS: Platform.OS === "ios" ? "iOS" : "Android",
//           },
//           Do_MerchDtl: {
//             BKY_PRDENUM: "ECom",
//             FURL: FURL,
//             MerchUID: MerchUID,
//             SURL: SURL,
//           },
//           Do_PyrDtl: {},
//           Do_TxnDtl: [
//             {
//               SubMerchUID: MerchUID,
//               Txn_AMT: finalTotal.toFixed(3),
//             },
//           ],
//           Do_TxnHdr: {
//             Merch_Txn_UID: merchTxnUID,
//             PayFor: "ECom",
//             PayMethod: "KNET",
//             Txn_HDR: txnHDR,
//             hashMac: hashMac,
//           },
//         };
//       }

//       const response = await fetch(PAYMENT_API_URL, {
//         method: "POST",
//         headers: headers,
//         body: JSON.stringify(payload),
//       });

//       if (!response.ok) {
//         throw new Error("Payment service unavailable");
//       }

//       const data = await response.json();

//       let paymentUrl;
//       if (IS_TEST_ENV) {
//         paymentUrl = data?.paymentUrl;
//       } else {
//         paymentUrl = data?.PayUrl;
//       }

//       if (!paymentUrl || !paymentUrl.startsWith("https://")) {
//         throw new Error("Invalid or insecure payment URL");
//       }

//       setPaymentUrl(paymentUrl);
//       setShowWebView(true);
//     } catch (error) {
//       const errorMessage = error.message || "Payment failed";
//       setPaymentError(errorMessage);
//       handlePaymentError(errorMessage);
//     } finally {
//       setIsProcessing(false);
//     }
//   };

//   if (items.length === 0) {
//     router.replace("/(root)/Cart");
//     return null;
//   }

//   return (
//     <SafeAreaView style={[styles.safeArea, { paddingTop: insets.top }]}>
//       <StatusBar barStyle="dark-content" backgroundColor="#f9fafb" />
//       <View style={styles.header}>
//         <TouchableOpacity
//           onPress={() => router.push("/(root)/Cart")}
//           style={styles.backButton}
//           hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//         >
//           <ChevronLeft color="#E53935" size={28} />
//         </TouchableOpacity>
//         <Text style={styles.headerTitle}>Secure Checkout</Text>
//       </View>
//       <ScrollView
//         style={styles.container}
//         contentContainerStyle={styles.contentContainer}
//         showsVerticalScrollIndicator={false}
//       >
//         <View style={styles.card}>
//           <View style={styles.cardTitleContainer}>
//             <Text style={styles.cardTitle}>Order Summary</Text>
//             <Text style={styles.itemCount}>{items.length} items</Text>
//           </View>
//           {items.map((item) => (
//             <View key={item.documentId} style={styles.itemRow}>
//               <View style={styles.itemDetails}>
//                 <Text style={styles.itemName} numberOfLines={1}>
//                   {item.name}
//                 </Text>
//                 <Text style={styles.itemQuantity}>Qty: {item.quantity}</Text>
//               </View>
//               <Text style={styles.itemPrice}>
//                 {((item.salesPrice || item.price) * item.quantity).toFixed(3)}{" "}
//                 KWD
//               </Text>
//             </View>
//           ))}
//           <View style={styles.summaryContainer}>
//             <OrderSummaryRow
//               label="Subtotal"
//               value={`${subtotal.toFixed(3)} KWD`}
//             />
//             {appliedCoupon && (
//               <OrderSummaryRow
//                 label={`Discount (${appliedCoupon.code})`}
//                 value={`- ${discount.toFixed(3)} KWD`}
//                 isDiscount
//               />
//             )}
//             <View style={styles.shippingFeeRow}>
//               <Text style={styles.summaryLabel}>Shipping Fee</Text>
//               <View style={styles.shippingFeeValueContainer}>
//                 {isLoadingShippingFee ? (
//                   <ActivityIndicator size="small" color="#10B981" />
//                 ) : shippingFeeError ? (
//                   <Text style={styles.errorValue}>Error loading fee</Text>
//                 ) : (
//                   <Text style={styles.summaryValue}>{`${shippingFee.toFixed(
//                     3
//                   )} KWD`}</Text>
//                 )}
//               </View>
//             </View>
//             <View style={styles.divider} />
//             <OrderSummaryRow
//               label="Total Amount"
//               value={`${finalTotal.toFixed(3)} KWD`}
//               isTotal
//               isLoading={isLoadingShippingFee}
//             />
//           </View>
//         </View>
//         <View style={styles.securityCard}>
//           <View style={styles.securityHeader}>
//             <Lock size={20} color="#10B981" />
//             <Text style={styles.securityTitle}>Secure Payment</Text>
//           </View>
//           <Text style={styles.securityText}>
//             • SSL encrypted payment processing • Verified by Bookeey Payment
//             Gateway • Your payment details are protected
//           </Text>
//         </View>
//         <TouchableOpacity
//           style={[
//             styles.payButton,
//             (isProcessing || isLoadingShippingFee) && styles.payButtonDisabled,
//           ]}
//           onPress={handlePayment}
//           disabled={isProcessing || isLoadingShippingFee}
//         >
//           {isProcessing ? (
//             <ActivityIndicator color="white" size="small" />
//           ) : (
//             <View style={styles.payButtonContent}>
//               <CreditCard size={20} color="white" />
//               <Text style={styles.payButtonText}>
//                 Pay {finalTotal.toFixed(3)} KWD
//               </Text>
//             </View>
//           )}
//         </TouchableOpacity>
//         {paymentError && <Text style={styles.errorText}>{paymentError}</Text>}
//       </ScrollView>
//       <Modal
//         visible={showWebView}
//         animationType="slide"
//         onRequestClose={handleBackPress}
//       >
//         <SafeAreaView style={styles.modalContainer}>
//           <View style={styles.webViewHeader}>
//             <TouchableOpacity
//               onPress={handleBackPress}
//               style={styles.webViewCloseButton}
//               hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//             >
//               <ArrowLeft color="#E53935" size={24} />
//             </TouchableOpacity>
//             <View style={styles.webViewTitleContainer}>
//               <Lock size={16} color="#10B981" />
//               <Text style={styles.webViewTitle}>Secure Payment</Text>
//             </View>
//           </View>
//           {isWebViewLoading && <PaymentLoadingOverlay />}
//           {paymentUrl && (
//             <WebView
//               source={{
//                 uri: paymentUrl,
//                 headers: IS_TEST_ENV
//                   ? { "ngrok-skip-browser-warning": "true" }
//                   : {},
//               }}
//               injectedJavaScript={injectScript}
//               onMessage={(event) => {
//                 const { data } = event.nativeEvent;
//                 if (data === "PAYMENT_SUCCESS") {
//                   handlePaymentSuccess();
//                 } else if (data === "PAYMENT_FAILED") {
//                   handlePaymentFailure();
//                 }
//               }}
//               onShouldStartLoadWithRequest={(request) => {
//                 const url = request.url;
//                 if (!IS_TEST_ENV) {
//                   if (url.startsWith(SURL)) {
//                     const params = new URLSearchParams(url.split("?")[1]);
//                     const errorCode = params.get("errorCode");
//                     const finalstatus = params.get("finalstatus");
//                     if (
//                       errorCode === "0" &&
//                       finalstatus &&
//                       atob(finalstatus) === "success"
//                     ) {
//                       handlePaymentSuccess();
//                     } else {
//                       setPaymentError("Invalid success response");
//                       handlePaymentFailure();
//                     }
//                     return false;
//                   } else if (url.startsWith(FURL)) {
//                     const params = new URLSearchParams(url.split("?")[1]);
//                     const errorCode = params.get("errorCode");
//                     const finalstatus = params.get("finalstatus");
//                     const errorMessage = params.get("errorMessage");
//                     if (
//                       errorCode === "1" &&
//                       finalstatus &&
//                       atob(finalstatus) === "failure"
//                     ) {
//                       setPaymentError(
//                         decodeURIComponent(errorMessage || "Payment failed")
//                       );
//                       handlePaymentFailure();
//                     } else {
//                       setPaymentError("Invalid failure response");
//                       handlePaymentFailure();
//                     }
//                     return false;
//                   }
//                 } else {
//                   if (url.includes("KfastSuccess") || url.includes("success")) {
//                     handlePaymentSuccess();
//                     return false;
//                   } else if (
//                     url.includes("KfastFail") ||
//                     url.includes("fail")
//                   ) {
//                     handlePaymentFailure();
//                     return false;
//                   }
//                 }
//                 return true;
//               }}
//               onLoadStart={() => setIsWebViewLoading(true)}
//               onLoadEnd={() => setIsWebViewLoading(false)}
//               onError={(syntheticEvent) => {
//                 handlePaymentError(syntheticEvent.nativeEvent.description);
//               }}
//               onHttpError={() => {
//                 handlePaymentError("Connection error");
//               }}
//               style={styles.webView}
//               incognito={true}
//               cacheEnabled={false}
//               domStorageEnabled={true}
//               javaScriptEnabled={true}
//               startInLoadingState={true}
//             />
//           )}
//         </SafeAreaView>
//       </Modal>
//       <Modal
//         visible={showSuccessModal}
//         transparent={true}
//         animationType="fade"
//         onRequestClose={() => setShowSuccessModal(false)}
//       >
//         <View style={styles.modalBackground}>
//           <Animated.View style={[styles.modalContent, styles.successModal]}>
//             <CheckCircle size={48} color="#10B981" />
//             <Text style={styles.modalTitle}>Payment Successful!</Text>
//             <Text style={styles.modalText}>
//               Your order has been placed successfully.
//             </Text>
//             <Pressable
//               style={styles.modalButton}
//               onPress={() => {
//                 setShowSuccessModal(false);
//                 router.replace("/(root)/order-success");
//               }}
//             >
//               <Text style={styles.modalButtonText}>View Order</Text>
//             </Pressable>
//           </Animated.View>
//         </View>
//       </Modal>
//       <Modal
//         visible={showFailureModal}
//         transparent={true}
//         animationType="fade"
//         onRequestClose={() => setShowFailureModal(false)}
//       >
//         <View style={styles.modalBackground}>
//           <Animated.View style={[styles.modalContent, styles.failureModal]}>
//             <XCircle size={48} color="#E53935" />
//             <Text style={styles.modalTitle}>Payment Failed</Text>
//             <Text style={styles.modalText}>
//               {paymentError
//                 ? paymentError
//                 : "There was an issue with your payment or it was canceled. Please try again."}
//             </Text>
//             <Pressable
//               style={styles.modalButton}
//               onPress={() => {
//                 setShowFailureModal(false);
//               }}
//             >
//               <Text style={styles.modalButtonText}>Try Again</Text>
//             </Pressable>
//           </Animated.View>
//         </View>
//       </Modal>
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: { flex: 1, backgroundColor: "#f9fafb" },
//   header: {
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     paddingVertical: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f0f0f0",
//   },
//   backButton: { padding: 4 },
//   headerTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#1f2937",
//     marginLeft: 16,
//   },
//   container: { flex: 1 },
//   contentContainer: { padding: 16, paddingBottom: 100 },
//   card: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   cardTitleContainer: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 16,
//   },
//   cardTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//   },
//   itemCount: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//   },
//   itemRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 12,
//     paddingBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f1f5f9",
//   },
//   itemDetails: { flex: 1, paddingRight: 8 },
//   itemName: {
//     fontSize: 15,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//     marginBottom: 4,
//   },
//   itemQuantity: {
//     fontSize: 13,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//   },
//   itemPrice: {
//     fontSize: 15,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//   },
//   summaryContainer: {
//     marginTop: 16,
//     paddingTop: 16,
//     borderTopWidth: 1,
//     borderTopColor: "#e5e7eb",
//   },
//   divider: {
//     height: 1,
//     backgroundColor: "#e5e7eb",
//     marginVertical: 12,
//   },
//   securityCard: {
//     backgroundColor: "#f0fdf4",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 24,
//     borderWidth: 1,
//     borderColor: "#86efac",
//   },
//   securityHeader: {
//     flexDirection: "row",
//     alignItems: "center",
//     marginBottom: 12,
//     gap: 8,
//   },
//   securityTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#047857",
//   },
//   securityText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4B5563",
//     lineHeight: 22,
//   },
//   payButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 12,
//     padding: 18,
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 12,
//   },
//   payButtonDisabled: { opacity: 0.6 },
//   payButtonContent: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 10,
//   },
//   payButtonText: {
//     color: "white",
//     fontSize: 16,
//     fontFamily: "Cairo-Bold",
//   },
//   errorText: {
//     color: "#DC2626",
//     textAlign: "center",
//     marginTop: 8,
//     fontFamily: "Cairo",
//   },
//   modalContainer: { flex: 1, backgroundColor: "#fff" },
//   webViewHeader: {
//     height: 56,
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     borderBottomWidth: 1,
//     borderBottomColor: "#E5E7EB",
//     backgroundColor: "#f9fafb",
//   },
//   webViewCloseButton: { padding: 8 },
//   webViewTitleContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 8,
//     flex: 1,
//     justifyContent: "center",
//     marginRight: 40,
//   },
//   webViewTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   webView: { flex: 1 },
//   loadingOverlay: {
//     position: "absolute",
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//     backgroundColor: "rgba(255,255,255,0.95)",
//     justifyContent: "center",
//     alignItems: "center",
//     zIndex: 1000,
//   },
//   loadingCard: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//     width: "80%",
//     maxWidth: 300,
//   },
//   loadingTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   loadingSubtext: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   shippingFeeRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginVertical: 4,
//   },
//   shippingFeeValueContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     justifyContent: "flex-end",
//   },
//   summaryLabel: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4b5563",
//   },
//   summaryValue: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   errorValue: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#DC2626",
//   },
//   modalBackground: {
//     flex: 1,
//     justifyContent: "center",
//     alignItems: "center",
//     backgroundColor: "rgba(0, 0, 0, 0.5)",
//   },
//   modalContent: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "80%",
//     maxWidth: 300,
//   },
//   successModal: {
//     borderColor: "#10B981",
//     borderWidth: 2,
//   },
//   failureModal: {
//     borderColor: "#E53935",
//     borderWidth: 2,
//   },
//   modalTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   modalText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   modalButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 8,
//     paddingVertical: 12,
//     paddingHorizontal: 24,
//     marginTop: 24,
//   },
//   modalButtonText: {
//     color: "white",
//     fontSize: 16,
//     fontFamily: "Cairo-Bold",
//   },
// });

/********************************** */

// import React, { useState, useCallback, useEffect, useRef } from "react";
// import {
//   View,
//   Text,
//   ScrollView,
//   Alert,
//   ActivityIndicator,
//   StyleSheet,
//   Platform,
//   TouchableOpacity,
//   SafeAreaView,
//   BackHandler,
//   Modal,
//   StatusBar,
//   Pressable,
//   Animated,
//   Easing,
// } from "react-native";
// import { router, useNavigation } from "expo-router";
// import { WebView } from "react-native-webview";
// import { useFocusEffect } from "@react-navigation/native";
// import {
//   Shield,
//   CreditCard,
//   ArrowLeft,
//   Lock,
//   ChevronLeft,
//   CheckCircle,
//   XCircle,
// } from "lucide-react-native";
// import NetInfo from "@react-native-community/netinfo";
// import useCartStore from "../../store/cartStore";
// import { OrderSummaryRow } from "../Components/OrderSummary";
// import useShippingFee from "../hooks/useShippingFee";
// import { useSafeAreaInsets } from "react-native-safe-area-context";
// import CryptoJS from "crypto-js";

// // Environment and API Configuration
// const IS_TEST_ENV = process.env.EXPO_PUBLIC_IS_TEST_ENV === "true";
// const PAYMENT_API_URL = IS_TEST_ENV
//   ? "https://f36b-37-36-175-221.ngrok-free.app/api/payments/initiate"
//   : "https://pg.bookeey.com/internalapi/api/payment/requestLink";

// // Production Constants
// const MerchUID = "mer2400018";
// const secret_key = "0623475";
// const SURL = "https://app.bookeeypayment.com/success";
// const FURL = "https://app.bookeeypayment.com/failure";

// // WebView Injection Script
// const injectScript = `
// (function() {
//   ${
//     IS_TEST_ENV
//       ? `
//     document.cookie = "ngrok-skip-browser-warning=true";
//     const button = document.querySelector('.button');
//     if (button) {
//       button.click();
//     }
//   `
//       : ""
//   }
//   const observer = new MutationObserver(function(mutations) {
//     mutations.forEach(function(mutation) {
//       if (mutation.target.textContent.includes('Payment Successful')) {
//         window.ReactNativeWebView.postMessage('PAYMENT_SUCCESS');
//       } else if (mutation.target.textContent.includes('Payment Failed')) {
//         window.ReactNativeWebView.postMessage('PAYMENT_FAILED');
//       }
//     });
//   });
//   observer.observe(document.body, { childList: true, subtree: true });
// })();
// `;

// // Loading Overlay Component
// const PaymentLoadingOverlay = () => (
//   <View style={styles.loadingOverlay}>
//     <View style={styles.loadingCard}>
//       <ActivityIndicator size="large" color="#10B981" />
//       <Text style={styles.loadingTitle}>Processing Payment</Text>
//       <Text style={styles.loadingSubtext}>Please don't close this window</Text>
//     </View>
//   </View>
// );

// // Main Component
// export default function CheckoutPage() {
//   // Hooks and State
//   const insets = useSafeAreaInsets();
//   const navigation = useNavigation();
//   const {
//     shippingFee,
//     loading: isLoadingShippingFee,
//     error: shippingFeeError,
//   } = useShippingFee();

//   // Animation Refs
//   const successScale = useRef(new Animated.Value(0)).current;
//   const successOpacity = useRef(new Animated.Value(0)).current;
//   const checkmarkStroke = useRef(new Animated.Value(0)).current;

//   // State Management
//   const [isProcessing, setIsProcessing] = useState(false);
//   const [paymentError, setPaymentError] = useState(null);
//   const [showWebView, setShowWebView] = useState(false);
//   const [paymentUrl, setPaymentUrl] = useState(null);
//   const [isWebViewLoading, setIsWebViewLoading] = useState(true);
//   const [showSuccessModal, setShowSuccessModal] = useState(false);
//   const [showFailureModal, setShowFailureModal] = useState(false);

//   const { items, total, discountedTotal, appliedCoupon, clearCart } =
//     useCartStore();

//   // Empty Cart Check
//   useEffect(() => {
//     if (items.length === 0) {
//       router.replace("/(root)/Cart");
//     }
//   }, [items.length]);

//   if (items.length === 0) {
//     return null;
//   }

//   // Animation Function
//   const animateSuccess = () => {
//     Animated.parallel([
//       Animated.spring(successScale, {
//         toValue: 1,
//         friction: 8,
//         tension: 40,
//         useNativeDriver: true,
//       }),
//       Animated.timing(successOpacity, {
//         toValue: 1,
//         duration: 200,
//         useNativeDriver: true,
//       }),
//       Animated.timing(checkmarkStroke, {
//         toValue: 1,
//         duration: 600,
//         easing: Easing.bezier(0.65, 0, 0.45, 1),
//         useNativeDriver: true,
//       }),
//     ]).start();
//   };

//   // Back Handler
//   const handleBackPress = useCallback(() => {
//     if (showWebView) {
//       Alert.alert(
//         "Cancel Payment?",
//         "Are you sure you want to cancel? This payment will not be processed.",
//         [
//           { text: "Continue Payment", style: "cancel" },
//           {
//             text: "Cancel Payment",
//             style: "destructive",
//             onPress: () => {
//               setShowWebView(false);
//               setPaymentUrl(null);
//               setShowFailureModal(true);
//             },
//           },
//         ]
//       );
//       return true;
//     }
//     router.push("/(root)/Cart");
//     return true;
//   }, [showWebView]);

//   useEffect(() => {
//     const backHandler = BackHandler.addEventListener(
//       "hardwareBackPress",
//       handleBackPress
//     );
//     return () => backHandler.remove();
//   }, [handleBackPress]);

//   useFocusEffect(
//     useCallback(() => {
//       navigation.setOptions({
//         gestureEnabled: !showWebView,
//         headerShown: false,
//       });
//     }, [showWebView])
//   );

//   // Calculate totals
//   const subtotal = total;
//   const discount = appliedCoupon
//     ? appliedCoupon.type === "percentage"
//       ? (total * appliedCoupon.amount) / 100
//       : appliedCoupon.amount
//     : 0;
//   const finalTotal = (discountedTotal || total) + shippingFee;

//   // Payment Success Handler
//   const handlePaymentSuccess = () => {
//     clearCart();
//     setShowWebView(false);
//     setPaymentUrl(null);
//     // Reset and start animations
//     successScale.setValue(0);
//     successOpacity.setValue(0);
//     checkmarkStroke.setValue(0);
//     setShowSuccessModal(true);
//     animateSuccess();
//   };

//   // Payment Failure Handler
//   const handlePaymentFailure = () => {
//     setShowWebView(false);
//     setPaymentUrl(null);
//     setShowFailureModal(true);
//   };

//   // Payment Error Handler
//   const handlePaymentError = (errorMessage) => {
//     setPaymentError(errorMessage);
//     setShowFailureModal(true);
//   };

//   // Main Payment Handler
//   const handlePayment = async () => {
//     if (isProcessing) return;

//     try {
//       const netInfo = await NetInfo.fetch();
//       if (!netInfo.isConnected) {
//         Alert.alert(
//           "No Internet Connection",
//           "Please check your connection and try again"
//         );
//         return;
//       }

//       setIsProcessing(true);
//       setPaymentError(null);

//       let payload;
//       let headers = {
//         "Content-Type": "application/json",
//         Accept: "application/json",
//       };

//       if (IS_TEST_ENV) {
//         payload = {
//           amount: Number(finalTotal.toFixed(3)),
//           orderId: `ORD${Date.now()}${Math.random().toString(36).slice(2, 6)}`,
//           customerInfo: {
//             platform: Platform.OS.toUpperCase(),
//             items: items.map((item) => ({
//               id: item.documentId,
//               name: item.name,
//               quantity: item.quantity,
//               price: Number((item.salesPrice || item.price).toFixed(3)),
//             })),
//           },
//         };
//         headers["ngrok-skip-browser-warning"] = "true";
//       } else {
//         const merchTxnUID = `ORD${Date.now()}${Math.random()
//           .toString(36)
//           .slice(2, 6)}`;
//         const txnHDR = `${Date.now()}${Math.floor(Math.random() * 10000)}`;
//         const rndnum = Math.random().toString(36).slice(2);
//         const sequence = `${MerchUID}|${merchTxnUID}|${SURL}|${FURL}|${finalTotal.toFixed(
//           3
//         )}|GEN|${secret_key}|${rndnum}`;
//         const hashMac = CryptoJS.SHA512(sequence).toString(CryptoJS.enc.Hex);

//         payload = {
//           DBRqst: "PY_ECom",
//           Do_Appinfo: {
//             APIVer: "2.1",
//             APPTyp: "MOB",
//             AppVer: "1.0",
//             Country: "KW",
//             OS: Platform.OS === "ios" ? "iOS" : "Android",
//           },
//           Do_MerchDtl: {
//             BKY_PRDENUM: "ECom",
//             FURL: FURL,
//             MerchUID: MerchUID,
//             SURL: SURL,
//           },
//           Do_PyrDtl: {},
//           Do_TxnDtl: [
//             {
//               SubMerchUID: MerchUID,
//               Txn_AMT: finalTotal.toFixed(3),
//             },
//           ],
//           Do_TxnHdr: {
//             Merch_Txn_UID: merchTxnUID,
//             PayFor: "ECom",
//             PayMethod: "KNET",
//             Txn_HDR: txnHDR,
//             hashMac: hashMac,
//           },
//         };
//       }

//       const response = await fetch(PAYMENT_API_URL, {
//         method: "POST",
//         headers: headers,
//         body: JSON.stringify(payload),
//       });

//       if (!response.ok) {
//         throw new Error("Payment service unavailable");
//       }

//       const data = await response.json();

//       let paymentUrl;
//       if (IS_TEST_ENV) {
//         paymentUrl = data?.paymentUrl;
//       } else {
//         paymentUrl = data?.PayUrl;
//       }

//       if (!paymentUrl || !paymentUrl.startsWith("https://")) {
//         throw new Error("Invalid or insecure payment URL");
//       }

//       setPaymentUrl(paymentUrl);
//       setShowWebView(true);
//     } catch (error) {
//       const errorMessage = error.message || "Payment failed";
//       setPaymentError(errorMessage);
//       handlePaymentError(errorMessage);
//     } finally {
//       setIsProcessing(false);
//     }
//   };

//   // Render Method
//   return (
//     <SafeAreaView style={[styles.safeArea, { paddingTop: insets.top }]}>
//       <StatusBar barStyle="dark-content" backgroundColor="#f9fafb" />
//       {/* Header */}
//       <View style={styles.header}>
//         <TouchableOpacity
//           onPress={() => router.push("/(root)/Cart")}
//           style={styles.backButton}
//           hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//         >
//           <ChevronLeft color="#E53935" size={28} />
//         </TouchableOpacity>
//         <Text style={styles.headerTitle}>Secure Checkout</Text>
//       </View>

//       {/* Main Content */}
//       <ScrollView
//         style={styles.container}
//         contentContainerStyle={styles.contentContainer}
//         showsVerticalScrollIndicator={false}
//       >
//         {/* Order Summary Card */}
//         <View style={styles.card}>
//           <View style={styles.cardTitleContainer}>
//             <Text style={styles.cardTitle}>Order Summary</Text>
//             <Text style={styles.itemCount}>{items.length} items</Text>
//           </View>
//           {items.map((item) => (
//             <View key={item.documentId} style={styles.itemRow}>
//               <View style={styles.itemDetails}>
//                 <Text style={styles.itemName} numberOfLines={1}>
//                   {item.name}
//                 </Text>
//                 <Text style={styles.itemQuantity}>Qty: {item.quantity}</Text>
//               </View>
//               <Text style={styles.itemPrice}>
//                 {((item.salesPrice || item.price) * item.quantity).toFixed(3)}{" "}
//                 KWD
//               </Text>
//             </View>
//           ))}

//           {/* Summary Section */}
//           <View style={styles.summaryContainer}>
//             <OrderSummaryRow
//               label="Subtotal"
//               value={`${subtotal.toFixed(3)} KWD`}
//             />
//             {appliedCoupon && (
//               <OrderSummaryRow
//                 label={`Discount (${appliedCoupon.code})`}
//                 value={`- ${discount.toFixed(3)} KWD`}
//                 isDiscount
//               />
//             )}
//             <View style={styles.shippingFeeRow}>
//               <Text style={styles.summaryLabel}>Shipping Fee</Text>
//               <View style={styles.shippingFeeValueContainer}>
//                 {isLoadingShippingFee ? (
//                   <ActivityIndicator size="small" color="#10B981" />
//                 ) : shippingFeeError ? (
//                   <Text style={styles.errorValue}>Error loading fee</Text>
//                 ) : (
//                   <Text style={styles.summaryValue}>
//                     {shippingFee.toFixed(3)} KWD
//                   </Text>
//                 )}
//               </View>
//             </View>
//             <View style={styles.divider} />
//             <OrderSummaryRow
//               label="Total Amount"
//               value={`${finalTotal.toFixed(3)} KWD`}
//               isTotal
//               isLoading={isLoadingShippingFee}
//             />
//           </View>
//         </View>

//         {/* Security Information Card */}
//         <View style={styles.securityCard}>
//           <View style={styles.securityHeader}>
//             <Lock size={20} color="#10B981" />
//             <Text style={styles.securityTitle}>Secure Payment</Text>
//           </View>
//           <Text style={styles.securityText}>
//             • SSL encrypted payment processing • Verified by Bookeey Payment
//             Gateway • Your payment details are protected
//           </Text>
//         </View>

//         {/* Payment Button */}
//         <TouchableOpacity
//           style={[
//             styles.payButton,
//             (isProcessing || isLoadingShippingFee) && styles.payButtonDisabled,
//           ]}
//           onPress={handlePayment}
//           disabled={isProcessing || isLoadingShippingFee}
//         >
//           {isProcessing ? (
//             <ActivityIndicator color="white" size="small" />
//           ) : (
//             <View style={styles.payButtonContent}>
//               <CreditCard size={20} color="white" />
//               <Text style={styles.payButtonText}>
//                 Pay {finalTotal.toFixed(3)} KWD
//               </Text>
//             </View>
//           )}
//         </TouchableOpacity>
//         {paymentError && <Text style={styles.errorText}>{paymentError}</Text>}
//       </ScrollView>

//       {/* WebView Modal */}
//       <Modal
//         visible={showWebView}
//         animationType="slide"
//         onRequestClose={handleBackPress}
//       >
//         <SafeAreaView style={styles.modalContainer}>
//           <View style={styles.webViewHeader}>
//             <TouchableOpacity
//               onPress={handleBackPress}
//               style={styles.webViewCloseButton}
//               hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//             >
//               <ArrowLeft color="#E53935" size={24} />
//             </TouchableOpacity>
//             <View style={styles.webViewTitleContainer}>
//               <Lock size={16} color="#10B981" />
//               <Text style={styles.webViewTitle}>Secure Payment</Text>
//             </View>
//           </View>
//           {isWebViewLoading && <PaymentLoadingOverlay />}
//           {paymentUrl && (
//             <WebView
//               source={{
//                 uri: paymentUrl,
//                 headers: IS_TEST_ENV
//                   ? { "ngrok-skip-browser-warning": "true" }
//                   : {},
//               }}
//               injectedJavaScript={injectScript}
//               onMessage={(event) => {
//                 const { data } = event.nativeEvent;
//                 if (data === "PAYMENT_SUCCESS") {
//                   handlePaymentSuccess();
//                 } else if (data === "PAYMENT_FAILED") {
//                   handlePaymentFailure();
//                 }
//               }}
//               onShouldStartLoadWithRequest={(request) => {
//                 const url = request.url;
//                 if (!IS_TEST_ENV) {
//                   if (url.startsWith(SURL)) {
//                     const params = new URLSearchParams(url.split("?")[1]);
//                     const errorCode = params.get("errorCode");
//                     const finalstatus = params.get("finalstatus");
//                     if (
//                       errorCode === "0" &&
//                       finalstatus &&
//                       atob(finalstatus) === "success"
//                     ) {
//                       handlePaymentSuccess();
//                     } else {
//                       setPaymentError("Invalid success response");
//                       handlePaymentFailure();
//                     }
//                     return false;
//                   } else if (url.startsWith(FURL)) {
//                     const params = new URLSearchParams(url.split("?")[1]);
//                     const errorCode = params.get("errorCode");
//                     const finalstatus = params.get("finalstatus");
//                     const errorMessage = params.get("errorMessage");
//                     if (
//                       errorCode === "1" &&
//                       finalstatus &&
//                       atob(finalstatus) === "failure"
//                     ) {
//                       setPaymentError(
//                         decodeURIComponent(errorMessage || "Payment failed")
//                       );
//                       handlePaymentFailure();
//                     } else {
//                       setPaymentError("Invalid failure response");
//                       handlePaymentFailure();
//                     }
//                     return false;
//                   }
//                 }
//                 return true;
//               }}
//               onLoadStart={() => setIsWebViewLoading(true)}
//               onLoadEnd={() => setIsWebViewLoading(false)}
//               onError={(syntheticEvent) => {
//                 handlePaymentError(syntheticEvent.nativeEvent.description);
//               }}
//               onHttpError={() => {
//                 handlePaymentError("Connection error");
//               }}
//               style={styles.webView}
//               incognito={true}
//               cacheEnabled={false}
//               domStorageEnabled={true}
//               javaScriptEnabled={true}
//               startInLoadingState={true}
//             />
//           )}
//         </SafeAreaView>
//       </Modal>

//       {/* Success Modal with Animation */}
//       <Modal
//         visible={showSuccessModal}
//         transparent={true}
//         animationType="fade"
//         onRequestClose={() => setShowSuccessModal(false)}
//       >
//         <View style={styles.modalBackground}>
//           <Animated.View
//             style={[
//               styles.modalContent,
//               styles.successModal,
//               {
//                 transform: [{ scale: successScale }],
//                 opacity: successOpacity,
//               },
//             ]}
//           >
//             <View style={styles.checkmarkContainer}>
//               <Animated.View
//                 style={[
//                   styles.checkmarkCircle,
//                   {
//                     transform: [{ scale: successScale }],
//                   },
//                 ]}
//               >
//                 <Animated.View
//                   style={[
//                     styles.checkmarkStroke,
//                     {
//                       opacity: checkmarkStroke,
//                     },
//                   ]}
//                 >
//                   <CheckCircle size={48} color="#10B981" />
//                 </Animated.View>
//               </Animated.View>
//             </View>
//             <Animated.Text
//               style={[styles.modalTitle, { opacity: successOpacity }]}
//             >
//               Payment Successful!
//             </Animated.Text>
//             <Animated.Text
//               style={[styles.modalText, { opacity: successOpacity }]}
//             >
//               Your order has been placed successfully.
//             </Animated.Text>
//             <Pressable
//               style={styles.modalButton}
//               onPress={() => {
//                 setShowSuccessModal(false);
//                 router.replace("/(root)/order-success");
//               }}
//             >
//               <Text style={styles.modalButtonText}>View Order</Text>
//             </Pressable>
//           </Animated.View>
//         </View>
//       </Modal>

//       {/* Failure Modal */}
//       <Modal
//         visible={showFailureModal}
//         transparent={true}
//         animationType="fade"
//         onRequestClose={() => setShowFailureModal(false)}
//       >
//         <View style={styles.modalBackground}>
//           <View style={[styles.modalContent, styles.failureModal]}>
//             <XCircle size={48} color="#E53935" />
//             <Text style={styles.modalTitle}>Payment Failed</Text>
//             <Text style={styles.modalText}>
//               {paymentError
//                 ? paymentError
//                 : "There was an issue with your payment or it was canceled. Please try again."}
//             </Text>
//             <Pressable
//               style={styles.modalButton}
//               onPress={() => {
//                 setShowFailureModal(false);
//               }}
//             >
//               <Text style={styles.modalButtonText}>Try Again</Text>
//             </Pressable>
//           </View>
//         </View>
//       </Modal>
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   // Base Layout Styles
//   safeArea: {
//     flex: 1,
//     backgroundColor: "#f9fafb",
//   },
//   container: {
//     flex: 1,
//   },
//   contentContainer: {
//     padding: 16,
//     paddingBottom: 100,
//   },

//   // Header Styles
//   header: {
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     paddingVertical: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f0f0f0",
//     backgroundColor: "#f9fafb",
//   },
//   backButton: {
//     padding: 4,
//   },
//   headerTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#1f2937",
//     marginLeft: 16,
//   },

//   // Card Styles
//   card: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   cardTitleContainer: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 16,
//   },
//   cardTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//   },
//   itemCount: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//   },

//   // Item Styles
//   itemRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 12,
//     paddingBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f1f5f9",
//   },
//   itemDetails: {
//     flex: 1,
//     paddingRight: 8,
//   },
//   itemName: {
//     fontSize: 15,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//     marginBottom: 4,
//   },
//   itemQuantity: {
//     fontSize: 13,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//   },
//   itemPrice: {
//     fontSize: 15,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//   },

//   // Summary Styles
//   summaryContainer: {
//     marginTop: 16,
//     paddingTop: 16,
//     borderTopWidth: 1,
//     borderTopColor: "#e5e7eb",
//   },
//   divider: {
//     height: 1,
//     backgroundColor: "#e5e7eb",
//     marginVertical: 12,
//   },

//   // Security Card Styles
//   securityCard: {
//     backgroundColor: "#f0fdf4",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 24,
//     borderWidth: 1,
//     borderColor: "#86efac",
//   },
//   securityHeader: {
//     flexDirection: "row",
//     alignItems: "center",
//     marginBottom: 12,
//     gap: 8,
//   },
//   securityTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#047857",
//   },
//   securityText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4B5563",
//     lineHeight: 22,
//   },

//   // Payment Button Styles
//   payButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 12,
//     padding: 18,
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 12,
//   },
//   payButtonDisabled: {
//     opacity: 0.6,
//   },
//   payButtonContent: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 10,
//   },
//   payButtonText: {
//     color: "white",
//     fontSize: 16,
//     fontFamily: "Cairo-Bold",
//   },

//   // Modal Styles
//   modalBackground: {
//     flex: 1,
//     backgroundColor: "rgba(0, 0, 0, 0.5)",
//     justifyContent: "center",
//     alignItems: "center",
//   },
//   modalContainer: {
//     flex: 1,
//     backgroundColor: "#fff",
//   },
//   modalContent: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "80%",
//     maxWidth: 300,
//     transform: [{ scale: 1 }],
//   },
//   successModal: {
//     backgroundColor: "#FFFFFF",
//     borderColor: "#10B981",
//     borderWidth: 2,
//     shadowColor: "#000",
//     shadowOffset: {
//       width: 0,
//       height: 2,
//     },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//   },
//   failureModal: {
//     borderColor: "#E53935",
//     borderWidth: 2,
//   },

//   // Checkmark Animation Styles
//   checkmarkContainer: {
//     width: 80,
//     height: 80,
//     marginBottom: 16,
//     alignItems: "center",
//     justifyContent: "center",
//   },
//   checkmarkCircle: {
//     width: 80,
//     height: 80,
//     borderRadius: 40,
//     backgroundColor: "#E8FFF5",
//     alignItems: "center",
//     justifyContent: "center",
//   },
//   checkmarkStroke: {
//     transform: [{ scale: 1.2 }],
//   },

//   // Modal Text Styles
//   modalTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   modalText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   modalButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 8,
//     paddingVertical: 12,
//     paddingHorizontal: 24,
//     marginTop: 24,
//   },
//   modalButtonText: {
//     color: "white",
//     fontSize: 16,
//     fontFamily: "Cairo-Bold",
//   },

//   // WebView Styles
//   webView: {
//     flex: 1,
//   },
//   webViewHeader: {
//     height: 56,
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     borderBottomWidth: 1,
//     borderBottomColor: "#E5E7EB",
//     backgroundColor: "#f9fafb",
//   },
//   webViewCloseButton: {
//     padding: 8,
//   },
//   webViewTitleContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 8,
//     flex: 1,
//     justifyContent: "center",
//     marginRight: 40,
//   },
//   webViewTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },

//   // Loading Styles
//   loadingOverlay: {
//     position: "absolute",
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//     backgroundColor: "rgba(255,255,255,0.95)",
//     justifyContent: "center",
//     alignItems: "center",
//     zIndex: 1000,
//   },
//   loadingCard: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//     width: "80%",
//     maxWidth: 300,
//   },
//   loadingTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   loadingSubtext: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },

//   // Error Styles
//   errorText: {
//     color: "#DC2626",
//     textAlign: "center",
//     marginTop: 8,
//     fontFamily: "Cairo",
//   },
//   errorValue: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#DC2626",
//   },

//   // Shipping Fee Styles
//   shippingFeeRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginVertical: 4,
//   },
//   shippingFeeValueContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     justifyContent: "flex-end",
//   },
//   summaryLabel: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4b5563",
//   },
//   summaryValue: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
// });

/**************************************** */
//Payment URL works

// import React, { useState, useCallback, useEffect, useRef } from "react";
// import {
//   View,
//   Text,
//   ScrollView,
//   Alert,
//   ActivityIndicator,
//   StyleSheet,
//   Platform,
//   TouchableOpacity,
//   SafeAreaView,
//   BackHandler,
//   Modal,
//   StatusBar,
//   Pressable,
//   Animated,
//   Easing,
// } from "react-native";
// import { router, useNavigation } from "expo-router";
// import { WebView } from "react-native-webview";
// import { useFocusEffect } from "@react-navigation/native";
// import {
//   Shield,
//   CreditCard,
//   ArrowLeft,
//   Lock,
//   ChevronLeft,
//   CheckCircle,
//   XCircle,
// } from "lucide-react-native";
// import NetInfo from "@react-native-community/netinfo";
// import useCartStore from "../../store/cartStore";
// import { OrderSummaryRow } from "../Components/OrderSummary";
// import useShippingFee from "../hooks/useShippingFee";
// import { useSafeAreaInsets } from "react-native-safe-area-context";
// import CryptoJS from "crypto-js";

// const IS_TEST_ENV = process.env.EXPO_PUBLIC_IS_TEST_ENV === "true";
// const PAYMENT_API_URL = IS_TEST_ENV
//   ? "https://f36b-37-36-175-221.ngrok-free.app/api/payments/initiate"
//   : "https://pg.bookeey.com/internalapi/api/payment/requestLink";

// const MerchUID = "mer2400018";
// const secret_key = "0623475";
// const SURL = "https://app.bookeeypayment.com/success";
// const FURL = "https://app.bookeeypayment.com/failure";

// const injectScript = `
// (function() {
//   ${IS_TEST_ENV ? `document.cookie = "ngrok-skip-browser-warning=true";` : ""}
//   const observer = new MutationObserver(function(mutations) {
//     mutations.forEach(function(mutation) {
//       if (mutation.target.textContent.includes('Payment Successful')) {
//         window.ReactNativeWebView.postMessage('PAYMENT_SUCCESS');
//       } else if (mutation.target.textContent.includes('Payment Failed')) {
//         window.ReactNativeWebView.postMessage('PAYMENT_FAILED');
//       }
//     });
//   });
//   observer.observe(document.body, { childList: true, subtree: true });
// })();
// `;

// const PaymentLoadingOverlay = () => (
//   <View style={styles.loadingOverlay}>
//     <View style={styles.loadingCard}>
//       <ActivityIndicator size="large" color="#10B981" />
//       <Text style={styles.loadingTitle}>Processing Payment</Text>
//       <Text style={styles.loadingSubtext}>Please don't close this window</Text>
//     </View>
//   </View>
// );

// export default function CheckoutPage() {
//   const insets = useSafeAreaInsets();
//   const navigation = useNavigation();
//   const {
//     shippingFee,
//     loading: isLoadingShippingFee,
//     error: shippingFeeError,
//   } = useShippingFee();

//   const successScale = useRef(new Animated.Value(0)).current;
//   const successOpacity = useRef(new Animated.Value(0)).current;
//   const checkmarkStroke = useRef(new Animated.Value(0)).current;

//   const [isProcessing, setIsProcessing] = useState(false);
//   const [paymentError, setPaymentError] = useState(null);
//   const [showWebView, setShowWebView] = useState(false);
//   const [paymentUrl, setPaymentUrl] = useState(null);
//   const [isWebViewLoading, setIsWebViewLoading] = useState(true);
//   const [showSuccessModal, setShowSuccessModal] = useState(false);
//   const [showFailureModal, setShowFailureModal] = useState(false);

//   const { items, total, discountedTotal, appliedCoupon, clearCart } =
//     useCartStore();

//   useEffect(() => {
//     if (items.length === 0) {
//       router.replace("/(root)/Cart");
//     }
//   }, [items.length]);

//   const animateSuccess = () => {
//     Animated.parallel([
//       Animated.spring(successScale, {
//         toValue: 1,
//         friction: 8,
//         tension: 40,
//         useNativeDriver: true,
//       }),
//       Animated.timing(successOpacity, {
//         toValue: 1,
//         duration: 200,
//         useNativeDriver: true,
//       }),
//       Animated.timing(checkmarkStroke, {
//         toValue: 1,
//         duration: 600,
//         easing: Easing.bezier(0.65, 0, 0.45, 1),
//         useNativeDriver: true,
//       }),
//     ]).start();
//   };

//   const handleBackPress = useCallback(() => {
//     if (showWebView) {
//       Alert.alert(
//         "Cancel Payment?",
//         "Are you sure you want to cancel? This payment will not be processed.",
//         [
//           { text: "Continue Payment", style: "cancel" },
//           {
//             text: "Cancel Payment",
//             style: "destructive",
//             onPress: () => {
//               setShowWebView(false);
//               setPaymentUrl(null);
//               setShowFailureModal(true);
//             },
//           },
//         ]
//       );
//       return true;
//     }
//     router.push("/(root)/Cart");
//     return true;
//   }, [showWebView]);

//   useEffect(() => {
//     const backHandler = BackHandler.addEventListener(
//       "hardwareBackPress",
//       handleBackPress
//     );
//     return () => backHandler.remove();
//   }, [handleBackPress]);

//   useFocusEffect(
//     useCallback(() => {
//       navigation.setOptions({
//         gestureEnabled: !showWebView,
//         headerShown: false,
//       });
//     }, [showWebView])
//   );

//   const handlePaymentSuccess = () => {
//     clearCart();
//     setShowWebView(false);
//     setPaymentUrl(null);
//     successScale.setValue(0);
//     successOpacity.setValue(0);
//     checkmarkStroke.setValue(0);
//     setShowSuccessModal(true);
//     animateSuccess();
//     setTimeout(() => {
//       router.push("/(root)/Cart");
//     }, 2000);
//   };

//   const handlePaymentFailure = () => {
//     setShowWebView(false);
//     setPaymentUrl(null);
//     setShowFailureModal(true);
//   };

//   const handlePaymentError = (errorMessage) => {
//     setPaymentError(errorMessage);
//     setShowFailureModal(true);
//   };

//   const subtotal = total;
//   const discount = appliedCoupon
//     ? appliedCoupon.type === "percentage"
//       ? (total * appliedCoupon.amount) / 100
//       : appliedCoupon.amount
//     : 0;
//   const finalTotal = (discountedTotal || total) + shippingFee;

//   if (items.length === 0) {
//     return null;
//   }

//   const handlePayment = async () => {
//     if (isProcessing) return;

//     try {
//       const netInfo = await NetInfo.fetch();
//       if (!netInfo.isConnected) {
//         Alert.alert(
//           "No Internet Connection",
//           "Please check your connection and try again"
//         );
//         return;
//       }

//       setIsProcessing(true);
//       setPaymentError(null);

//       const currentDate = new Date()
//         .toISOString()
//         .replace(/[^0-9]/g, "")
//         .slice(0, 14);
//       const randomSuffix = Math.random().toString(36).slice(2, 6);
//       const orderId = `ORD${currentDate}${randomSuffix}`;

//       let payload;
//       let headers = {
//         "Content-Type": "application/json",
//         Accept: "application/json",
//       };

//       if (IS_TEST_ENV) {
//         payload = {
//           amount: Number(finalTotal.toFixed(3)),
//           orderId,
//           customerInfo: {
//             platform: Platform.OS.toUpperCase(),
//             items: items.map((item) => ({
//               id: item.documentId,
//               name: item.name,
//               quantity: item.quantity,
//               price: Number((item.salesPrice || item.price).toFixed(3)),
//             })),
//           },
//         };
//         headers["ngrok-skip-browser-warning"] = "true";
//       } else {
//         const txnHDR = `${Date.now()}${Math.floor(Math.random() * 10000)}`;
//         const rndnum = Math.random().toString(36).slice(2);
//         const sequence = `${MerchUID}|${orderId}|${SURL}|${FURL}|${finalTotal.toFixed(
//           3
//         )}|GEN|${secret_key}|${rndnum}`;
//         const hashMac = CryptoJS.SHA512(sequence).toString(CryptoJS.enc.Hex);

//         payload = {
//           DBRqst: "PY_ECom",
//           Do_Appinfo: {
//             APIVer: "2.1",
//             APPTyp: "MOB",
//             AppVer: "1.0",
//             Country: "KW",
//             OS: Platform.OS === "ios" ? "iOS" : "Android",
//           },
//           Do_MerchDtl: {
//             BKY_PRDENUM: "ECom",
//             FURL: FURL,
//             MerchUID: MerchUID,
//             SURL: SURL,
//           },
//           Do_PyrDtl: {},
//           Do_TxnDtl: [
//             {
//               SubMerchUID: MerchUID,
//               Txn_AMT: finalTotal.toFixed(3),
//             },
//           ],
//           Do_TxnHdr: {
//             Merch_Txn_UID: orderId,
//             PayFor: "ECom",
//             PayMethod: "KNET",
//             Txn_HDR: txnHDR,
//             hashMac: hashMac,
//           },
//         };
//       }

//       const response = await fetch(PAYMENT_API_URL, {
//         method: "POST",
//         headers: headers,
//         body: JSON.stringify(payload),
//       });

//       if (!response.ok) {
//         throw new Error("Payment service unavailable");
//       }

//       const data = await response.json();
//       const paymentUrl = IS_TEST_ENV ? data?.paymentUrl : data?.PayUrl;

//       if (!paymentUrl || !paymentUrl.startsWith("https://")) {
//         throw new Error("Invalid or insecure payment URL");
//       }

//       setPaymentUrl(paymentUrl);
//       setShowWebView(true);
//     } catch (error) {
//       const errorMessage = error.message || "Payment failed";
//       setPaymentError(errorMessage);
//       handlePaymentError(errorMessage);
//     } finally {
//       setIsProcessing(false);
//     }
//   };

//   return (
//     <SafeAreaView style={[styles.safeArea, { paddingTop: insets.top }]}>
//       <StatusBar barStyle="dark-content" backgroundColor="#f9fafb" />
//       <View style={styles.header}>
//         <TouchableOpacity
//           onPress={() => router.push("/(root)/Cart")}
//           style={styles.backButton}
//           hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//         >
//           <ChevronLeft color="#E53935" size={28} />
//         </TouchableOpacity>
//         <Text style={styles.headerTitle}>Secure Checkout</Text>
//       </View>

//       <ScrollView
//         style={styles.container}
//         contentContainerStyle={styles.contentContainer}
//         showsVerticalScrollIndicator={false}
//       >
//         <View style={styles.card}>
//           <View style={styles.cardTitleContainer}>
//             <Text style={styles.cardTitle}>Order Summary</Text>
//             <Text style={styles.itemCount}>{items.length} items</Text>
//           </View>
//           {items.map((item) => (
//             <View key={item.documentId} style={styles.itemRow}>
//               <View style={styles.itemDetails}>
//                 <Text style={styles.itemName} numberOfLines={1}>
//                   {item.name}
//                 </Text>
//                 <Text style={styles.itemQuantity}>Qty: {item.quantity}</Text>
//               </View>
//               <Text style={styles.itemPrice}>
//                 {((item.salesPrice || item.price) * item.quantity).toFixed(3)}{" "}
//                 KWD
//               </Text>
//             </View>
//           ))}

//           <View style={styles.summaryContainer}>
//             <OrderSummaryRow
//               label="Subtotal"
//               value={`${subtotal.toFixed(3)} KWD`}
//             />
//             {appliedCoupon && (
//               <OrderSummaryRow
//                 label={`Discount (${appliedCoupon.code})`}
//                 value={`- ${discount.toFixed(3)} KWD`}
//                 isDiscount
//               />
//             )}
//             <View style={styles.shippingFeeRow}>
//               <Text style={styles.summaryLabel}>Shipping Fee</Text>
//               <View style={styles.shippingFeeValueContainer}>
//                 {isLoadingShippingFee ? (
//                   <ActivityIndicator size="small" color="#10B981" />
//                 ) : shippingFeeError ? (
//                   <Text style={styles.errorValue}>Error loading fee</Text>
//                 ) : (
//                   <Text style={styles.summaryValue}>{`${shippingFee.toFixed(
//                     3
//                   )} KWD`}</Text>
//                 )}
//               </View>
//             </View>
//             <View style={styles.divider} />
//             <OrderSummaryRow
//               label="Total Amount"
//               value={`${finalTotal.toFixed(3)} KWD`}
//               isTotal
//               isLoading={isLoadingShippingFee}
//             />
//           </View>
//         </View>

//         <View style={styles.securityCard}>
//           <View style={styles.securityHeader}>
//             <Lock size={20} color="#10B981" />
//             <Text style={styles.securityTitle}>Secure Payment</Text>
//           </View>
//           <Text style={styles.securityText}>
//             • SSL encrypted payment processing • Verified by Bookeey Payment
//             Gateway • Your payment details are protected
//           </Text>
//         </View>

//         <TouchableOpacity
//           style={[
//             styles.payButton,
//             (isProcessing || isLoadingShippingFee) && styles.payButtonDisabled,
//           ]}
//           onPress={handlePayment}
//           disabled={isProcessing || isLoadingShippingFee}
//         >
//           {isProcessing ? (
//             <ActivityIndicator color="white" size="small" />
//           ) : (
//             <View style={styles.payButtonContent}>
//               <CreditCard size={20} color="white" />
//               <Text style={styles.payButtonText}>
//                 Pay {finalTotal.toFixed(3)} KWD
//               </Text>
//             </View>
//           )}
//         </TouchableOpacity>
//         {paymentError && <Text style={styles.errorText}>{paymentError}</Text>}
//       </ScrollView>

//       <Modal
//         visible={showWebView}
//         animationType="slide"
//         onRequestClose={handleBackPress}
//       >
//         <SafeAreaView style={styles.modalContainer}>
//           <View style={styles.webViewHeader}>
//             <TouchableOpacity
//               onPress={handleBackPress}
//               style={styles.webViewCloseButton}
//               hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//             >
//               <ArrowLeft color="#E53935" size={24} />
//             </TouchableOpacity>
//             <View style={styles.webViewTitleContainer}>
//               <Lock size={16} color="#10B981" />
//               <Text style={styles.webViewTitle}>Secure Payment</Text>
//             </View>
//           </View>
//           {isWebViewLoading && <PaymentLoadingOverlay />}
//           {paymentUrl && (
//             <WebView
//               source={{ uri: paymentUrl }}
//               injectedJavaScript={injectScript}
//               onMessage={(event) => {
//                 const { data } = event.nativeEvent;
//                 if (data === "PAYMENT_SUCCESS") {
//                   handlePaymentSuccess();
//                 } else if (data === "PAYMENT_FAILED") {
//                   handlePaymentFailure();
//                 }
//               }}
//               onLoadStart={() => setIsWebViewLoading(true)}
//               onLoadEnd={() => setIsWebViewLoading(false)}
//               onError={(syntheticEvent) => {
//                 handlePaymentError(syntheticEvent.nativeEvent.description);
//               }}
//               onHttpError={() => {
//                 handlePaymentError("Connection error");
//               }}
//               style={styles.webView}
//               incognito={true}
//               cacheEnabled={false}
//               domStorageEnabled={true}
//               javaScriptEnabled={true}
//               startInLoadingState={true}
//             />
//           )}
//         </SafeAreaView>
//       </Modal>

//       <Modal
//         visible={showSuccessModal}
//         transparent={true}
//         animationType="fade"
//         onRequestClose={() => setShowSuccessModal(false)}
//       >
//         <View style={styles.modalBackground}>
//           <Animated.View
//             style={[
//               styles.modalContent,
//               styles.successModal,
//               {
//                 transform: [{ scale: successScale }],
//                 opacity: successOpacity,
//               },
//             ]}
//           >
//             <View style={styles.checkmarkContainer}>
//               <Animated.View
//                 style={[
//                   styles.checkmarkCircle,
//                   { transform: [{ scale: successScale }] },
//                 ]}
//               >
//                 <Animated.View
//                   style={[styles.checkmarkStroke, { opacity: checkmarkStroke }]}
//                 >
//                   <CheckCircle size={48} color="#10B981" />
//                 </Animated.View>
//               </Animated.View>
//             </View>
//             <Animated.Text
//               style={[styles.modalTitle, { opacity: successOpacity }]}
//             >
//               Payment Successful!
//             </Animated.Text>
//             <Animated.Text
//               style={[styles.modalText, { opacity: successOpacity }]}
//             >
//               Your order has been placed successfully.
//             </Animated.Text>
//           </Animated.View>
//         </View>
//       </Modal>

//       <Modal
//         visible={showFailureModal}
//         transparent={true}
//         animationType="fade"
//         onRequestClose={() => setShowFailureModal(false)}
//       >
//         <View style={styles.modalBackground}>
//           <View style={[styles.modalContent, styles.failureModal]}>
//             <XCircle size={48} color="#E53935" />
//             <Text style={styles.modalTitle}>Payment Failed</Text>
//             <Text style={styles.modalText}>
//               {paymentError ||
//                 "There was an issue with your payment. Please try again."}
//             </Text>
//             <Pressable
//               style={styles.modalButton}
//               onPress={() => setShowFailureModal(false)}
//             >
//               <Text style={styles.modalButtonText}>Try Again</Text>
//             </Pressable>
//           </View>
//         </View>
//       </Modal>
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: {
//     flex: 1,
//     backgroundColor: "#f9fafb",
//   },
//   container: {
//     flex: 1,
//   },
//   contentContainer: {
//     padding: 16,
//     paddingBottom: 100,
//   },
//   header: {
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     paddingVertical: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f0f0f0",
//     backgroundColor: "#f9fafb",
//   },
//   backButton: {
//     padding: 4,
//   },
//   headerTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#1f2937",
//     marginLeft: 16,
//   },
//   card: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   cardTitleContainer: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 16,
//   },
//   cardTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//   },
//   itemCount: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//   },
//   itemRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 12,
//     paddingBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f1f5f9",
//   },
//   itemDetails: {
//     flex: 1,
//     paddingRight: 8,
//   },
//   itemName: {
//     fontSize: 15,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//     marginBottom: 4,
//   },
//   itemQuantity: {
//     fontSize: 13,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//   },
//   itemPrice: {
//     fontSize: 15,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//   },
//   summaryContainer: {
//     marginTop: 16,
//     paddingTop: 16,
//     borderTopWidth: 1,
//     borderTopColor: "#e5e7eb",
//   },
//   divider: {
//     height: 1,
//     backgroundColor: "#e5e7eb",
//     marginVertical: 12,
//   },
//   securityCard: {
//     backgroundColor: "#f0fdf4",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 24,
//     borderWidth: 1,
//     borderColor: "#86efac",
//   },
//   securityHeader: {
//     flexDirection: "row",
//     alignItems: "center",
//     marginBottom: 12,
//     gap: 8,
//   },
//   securityTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#047857",
//   },
//   securityText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4B5563",
//     lineHeight: 22,
//   },
//   payButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 12,
//     padding: 18,
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 12,
//   },
//   payButtonDisabled: {
//     opacity: 0.6,
//   },
//   payButtonContent: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 10,
//   },
//   payButtonText: {
//     color: "white",
//     fontSize: 16,
//     fontFamily: "Cairo-Bold",
//   },
//   modalBackground: {
//     flex: 1,
//     backgroundColor: "rgba(0, 0, 0, 0.5)",
//     justifyContent: "center",
//     alignItems: "center",
//   },
//   modalContainer: {
//     flex: 1,
//     backgroundColor: "#fff",
//   },
//   modalContent: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "80%",
//     maxWidth: 300,
//   },
//   successModal: {
//     backgroundColor: "#FFFFFF",
//     borderColor: "#10B981",
//     borderWidth: 2,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//   },
//   failureModal: {
//     borderColor: "#E53935",
//     borderWidth: 2,
//   },
//   checkmarkContainer: {
//     width: 80,
//     height: 80,
//     marginBottom: 16,
//     alignItems: "center",
//     justifyContent: "center",
//   },
//   checkmarkCircle: {
//     width: 80,
//     height: 80,
//     borderRadius: 40,
//     backgroundColor: "#E8FFF5",
//     alignItems: "center",
//     justifyContent: "center",
//   },
//   checkmarkStroke: {
//     transform: [{ scale: 1.2 }],
//   },
//   modalTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   modalText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   modalButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 8,
//     paddingVertical: 12,
//     paddingHorizontal: 24,
//     marginTop: 24,
//   },
//   modalButtonText: {
//     color: "white",
//     fontSize: 16,
//     fontFamily: "Cairo-Bold",
//   },
//   webView: {
//     flex: 1,
//   },
//   webViewHeader: {
//     height: 56,
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     borderBottomWidth: 1,
//     borderBottomColor: "#E5E7EB",
//     backgroundColor: "#f9fafb",
//   },
//   webViewCloseButton: {
//     padding: 8,
//   },
//   webViewTitleContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 8,
//     flex: 1,
//     justifyContent: "center",
//     marginRight: 40,
//   },
//   webViewTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   loadingOverlay: {
//     position: "absolute",
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//     backgroundColor: "rgba(255,255,255,0.95)",
//     justifyContent: "center",
//     alignItems: "center",
//     zIndex: 1000,
//   },
//   loadingCard: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//     width: "80%",
//     maxWidth: 300,
//   },
//   loadingTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   loadingSubtext: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   errorText: {
//     color: "#DC2626",
//     textAlign: "center",
//     marginTop: 8,
//     fontFamily: "Cairo",
//   },
//   errorValue: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#DC2626",
//   },
//   shippingFeeRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginVertical: 4,
//   },
//   shippingFeeValueContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     justifyContent: "flex-end",
//   },
//   summaryLabel: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4b5563",
//   },
//   summaryValue: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
// });

/***************************************** */

// import React, { useState, useCallback, useEffect, useRef } from "react";
// import {
//   View,
//   Text,
//   ScrollView,
//   Alert,
//   ActivityIndicator,
//   StyleSheet,
//   Platform,
//   TouchableOpacity,
//   SafeAreaView,
//   BackHandler,
//   Modal,
//   StatusBar,
//   TextInput,
//   KeyboardAvoidingView,
//   Animated,
//   Easing,
//   Dimensions,
// } from "react-native";
// import { router, useNavigation } from "expo-router";
// import { WebView } from "react-native-webview";
// import { useFocusEffect } from "@react-navigation/native";
// import {
//   Shield,
//   CreditCard,
//   ArrowLeft,
//   Lock,
//   ChevronLeft,
//   CheckCircle,
//   XCircle,
//   User,
//   Mail,
//   Phone,
//   MapPin,
// } from "lucide-react-native";
// import Toast from "react-native-toast-message";
// import NetInfo from "@react-native-community/netinfo";
// import useCartStore from "../../store/cartStore";
// import { OrderSummaryRow } from "../Components/OrderSummary";
// import useShippingFee from "../hooks/useShippingFee";
// import { useSafeAreaInsets } from "react-native-safe-area-context";
// import CryptoJS from "crypto-js";

// interface FormData {
//   firstName: string;
//   lastName: string;
//   address: string;
//   state: string;
//   city: string;
//   postCode: string;
//   phone: string;
//   email: string;
// }

// interface FormErrors {
//   firstName?: string;
//   lastName?: string;
//   address?: string;
//   phone?: string;
// }

// const IS_TEST_ENV = process.env.EXPO_PUBLIC_IS_TEST_ENV === "true";
// const PAYMENT_API_URL = IS_TEST_ENV
//   ? "https://demo.bookeey.com/pgapi/api/payment/requestLink"
//   : "https://pg.bookeey.com/internalapi/api/payment/requestLink";

// const MerchUID = process.env.EXPO_PUBLIC_MERCH_UID || "mer2400018";
// const SECRET_KEY = process.env.EXPO_PUBLIC_SECRET_KEY || "0623475";
// const SURL = "https://app.bookeeypayment.com/success";
// const FURL = "https://app.bookeeypayment.com/failure";

// const { width: SCREEN_WIDTH } = Dimensions.get("window");

// const REQUIRED_FIELDS = ["firstName", "lastName", "address", "phone"];
// const PHONE_REGEX = /^[569]\d{7}$/;

// const injectScript = `
// (function() {
//   ${IS_TEST_ENV ? `document.cookie = "ngrok-skip-browser-warning=true";` : ""}
//   const observer = new MutationObserver(function(mutations) {
//     mutations.forEach(function(mutation) {
//       if (mutation.target.textContent.includes('Payment Successful')) {
//         window.ReactNativeWebView.postMessage('PAYMENT_SUCCESS');
//       } else if (mutation.target.textContent.includes('Payment Failed')) {
//         window.ReactNativeWebView.postMessage('PAYMENT_FAILED');
//       }
//     });
//   });
//   observer.observe(document.body, { childList: true, subtree: true });
// })();
// `;

// export default function CheckoutPage() {
//   const insets = useSafeAreaInsets();
//   const navigation = useNavigation();
//   const successAnimationValue = useRef(new Animated.Value(0)).current;
//   const successScale = useRef(new Animated.Value(0)).current;
//   const checkmarkProgress = useRef(new Animated.Value(0)).current;

//   const [formData, setFormData] = useState<FormData>({
//     firstName: "",
//     lastName: "",
//     address: "",
//     state: "",
//     city: "",
//     postCode: "",
//     phone: "",
//     email: "",
//   });

//   const PaymentLoadingOverlay = () => (
//     <View style={styles.loadingOverlay}>
//       <View style={styles.loadingCard}>
//         <ActivityIndicator size="large" color="#10B981" />
//         <Text style={styles.loadingTitle}>Processing Payment</Text>
//         <Text style={styles.loadingSubtext}>
//           Please don't close this window
//         </Text>
//       </View>
//     </View>
//   );
//   const [formErrors, setFormErrors] = useState<FormErrors>({});
//   const [isProcessing, setIsProcessing] = useState(false);
//   const [paymentError, setPaymentError] = useState<string | null>(null);
//   const [showWebView, setShowWebView] = useState(false);
//   const [paymentUrl, setPaymentUrl] = useState<string | null>(null);
//   const [isWebViewLoading, setIsWebViewLoading] = useState(true);
//   const [showSuccessOverlay, setShowSuccessOverlay] = useState(false);

//   const { items, total, discountedTotal, appliedCoupon, clearCart } =
//     useCartStore();

//   const {
//     shippingFee,
//     loading: isLoadingShippingFee,
//     error: shippingFeeError,
//   } = useShippingFee();

//   const validateForm = (): boolean => {
//     const errors: FormErrors = {};
//     let isValid = true;

//     REQUIRED_FIELDS.forEach((field) => {
//       if (!formData[field as keyof FormData]) {
//         errors[field as keyof FormErrors] = `${
//           field.charAt(0).toUpperCase() + field.slice(1)
//         } is required`;
//         isValid = false;
//       }
//     });

//     // phone validation

//     // if (formData.phone && !PHONE_REGEX.test(formData.phone)) {
//     //   errors.phone = "Please enter a valid Kuwait phone number";
//     //   isValid = false;
//     // }

//     // In the validateForm function, update the phone validation:
//     if (formData.phone) {
//       // Remove any spaces or dashes
//       const cleanPhone = formData.phone.replace(/[\s-]/g, "");

//       // Remove leading country code if present
//       const phoneNumber = cleanPhone.replace(/^(\+965|965)/, "");

//       if (!/^[569]\d{7}$/g.test(phoneNumber)) {
//         errors.phone =
//           "Please enter a valid Kuwait phone number (8 digits starting with 5, 6, or 9)";
//         isValid = false;
//       }
//     }

//     if (formData.email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
//       errors.email = "Please enter a valid email address";
//       isValid = false;
//     }

//     setFormErrors(errors);
//     return isValid;
//   };

//   const animateSuccess = () => {
//     successScale.setValue(0);
//     checkmarkProgress.setValue(0);

//     Animated.parallel([
//       Animated.spring(successScale, {
//         toValue: 1,
//         friction: 8,
//         tension: 40,
//         useNativeDriver: true,
//       }),
//       Animated.timing(checkmarkProgress, {
//         toValue: 1,
//         duration: 800,
//         easing: Easing.bezier(0.65, 0, 0.45, 1),
//         useNativeDriver: true,
//       }),
//     ]).start(() => {
//       setTimeout(() => {
//         setShowSuccessOverlay(false);
//         router.push("/(root)/Cart");
//       }, 2000);
//     });
//   };

//   const handleBackPress = useCallback(() => {
//     if (showWebView) {
//       Alert.alert(
//         "Cancel Payment?",
//         "Are you sure you want to cancel? This payment will not be processed.",
//         [
//           { text: "Continue Payment", style: "cancel" },
//           {
//             text: "Cancel Payment",
//             style: "destructive",
//             onPress: () => {
//               setShowWebView(false);
//               setPaymentUrl(null);
//               Toast.show({
//                 type: "error",
//                 text1: "Payment Cancelled",
//                 text2: "Your payment has been cancelled",
//                 position: "top",
//               });
//             },
//           },
//         ]
//       );
//       return true;
//     }
//     return false;
//   }, [showWebView]);

//   useEffect(() => {
//     const backHandler = BackHandler.addEventListener(
//       "hardwareBackPress",
//       handleBackPress
//     );
//     return () => backHandler.remove();
//   }, [handleBackPress]);

//   useFocusEffect(
//     useCallback(() => {
//       navigation.setOptions({
//         gestureEnabled: !showWebView,
//         headerShown: false,
//       });
//     }, [showWebView])
//   );

//   const handlePaymentSuccess = () => {
//     setShowWebView(false);
//     setPaymentUrl(null);
//     clearCart();
//     setShowSuccessOverlay(true);
//     animateSuccess();
//   };

//   const handlePaymentFailure = () => {
//     setShowWebView(false);
//     setPaymentUrl(null);
//     Toast.show({
//       type: "error",
//       text1: "Payment Failed",
//       text2: "Please try again or use a different payment method",
//       position: "top",
//       visibilityTime: 4000,
//     });
//   };

//   const handlePaymentError = (errorMessage: string) => {
//     setPaymentError(errorMessage);
//     Toast.show({
//       type: "error",
//       text1: "Payment Error",
//       text2: errorMessage || "An error occurred during payment",
//       position: "top",
//     });
//   };

//   const handlePayment = async () => {
//     if (isProcessing || !validateForm()) return;

//     try {
//       const netInfo = await NetInfo.fetch();
//       if (!netInfo.isConnected) {
//         Toast.show({
//           type: "error",
//           text1: "No Internet Connection",
//           text2: "Please check your connection and try again",
//           position: "top",
//         });
//         return;
//       }

//       setIsProcessing(true);
//       setPaymentError(null);

//       const currentDate = new Date()
//         .toISOString()
//         .replace(/[^0-9]/g, "")
//         .slice(0, 14);
//       const randomSuffix = Math.random().toString(36).slice(2, 6);
//       const orderId = `ORD${currentDate}${randomSuffix}`;
//       const txnHDR = `${Date.now()}${Math.floor(Math.random() * 10000)}`;
//       const rndnum = Math.random().toString(36).slice(2);

//       const sequence = `${MerchUID}|${orderId}|${SURL}|${FURL}|${finalTotal.toFixed(
//         3
//       )}|GEN|${SECRET_KEY}|${rndnum}`;
//       const hashMac = CryptoJS.SHA512(sequence).toString(CryptoJS.enc.Hex);

//       const payload = {
//         DBRqst: "PY_ECom",
//         Do_Appinfo: {
//           APIVer: "2.1",
//           APPTyp: "MOB",
//           AppVer: "1.0",
//           Country: "KW",
//           OS: Platform.OS === "ios" ? "iOS" : "Android",
//         },
//         Do_MerchDtl: {
//           BKY_PRDENUM: "ECom",
//           FURL: FURL,
//           MerchUID: MerchUID,
//           SURL: SURL,
//         },
//         Do_PyrDtl: {
//           Pyr_MPhone: formData.phone,
//           ISDNCD: "965",
//           Pyr_Name: `${formData.firstName} ${formData.lastName}`,
//         },
//         Do_TxnDtl: [
//           {
//             SubMerchUID: MerchUID,
//             Txn_AMT: finalTotal.toFixed(3),
//           },
//         ],
//         Do_TxnHdr: {
//           Merch_Txn_UID: orderId,
//           PayFor: "ECom",
//           PayMethod: "KNET",
//           Txn_HDR: txnHDR,
//           hashMac: hashMac,
//         },
//         Do_MoreDtl: {
//           Cust_Data1: JSON.stringify({
//             orderDetails: {
//               items: items.map((item) => ({
//                 id: item.documentId,
//                 name: item.name,
//                 quantity: item.quantity,
//                 price: (item.salesPrice || item.price).toFixed(3),
//               })),
//               subtotal: total.toFixed(3),
//               discount: discount.toFixed(3),
//               shippingFee: shippingFee.toFixed(3),
//               total: finalTotal.toFixed(3),
//             },
//             customerInfo: {
//               firstName: formData.firstName,
//               lastName: formData.lastName,
//               address: formData.address,
//               city: formData.city,
//               state: formData.state,
//               postCode: formData.postCode,
//               email: formData.email,
//               phone: formData.phone,
//             },
//           }),
//         },
//       };

//       const response = await fetch(PAYMENT_API_URL, {
//         method: "POST",
//         headers: {
//           "Content-Type": "application/json",
//           Accept: "application/json",
//         },
//         body: JSON.stringify(payload),
//       });

//       if (!response.ok) {
//         throw new Error("Payment service temporarily unavailable");
//       }

//       const data = await response.json();
//       const paymentUrl = data?.PayUrl;

//       if (!paymentUrl || !paymentUrl.startsWith("https://")) {
//         throw new Error("Invalid payment URL received");
//       }

//       setPaymentUrl(paymentUrl);
//       setShowWebView(true);
//     } catch (error: any) {
//       const errorMessage = error.message || "Payment failed";
//       setPaymentError(errorMessage);
//       handlePaymentError(errorMessage);
//     } finally {
//       setIsProcessing(false);
//     }
//   };

//   const subtotal = total;
//   const discount = appliedCoupon
//     ? appliedCoupon.type === "percentage"
//       ? (total * appliedCoupon.amount) / 100
//       : appliedCoupon.amount
//     : 0;
//   const finalTotal = (discountedTotal || total) + shippingFee;

//   if (items.length === 0) {
//     router.replace("/(root)/Cart");
//     return null;
//   }

//   return (
//     <SafeAreaView style={[styles.safeArea, { paddingTop: insets.top }]}>
//       <KeyboardAvoidingView
//         behavior={Platform.OS === "ios" ? "padding" : "height"}
//         style={styles.container}
//       >
//         <StatusBar barStyle="dark-content" backgroundColor="#f9fafb" />

//         <View style={styles.header}>
//           <TouchableOpacity
//             onPress={() => router.push("/(root)/Cart")}
//             style={styles.backButton}
//             hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//           >
//             <ChevronLeft color="#E53935" size={28} />
//           </TouchableOpacity>
//           <Text style={styles.headerTitle}>Secure Checkout</Text>
//         </View>

//         <ScrollView
//           style={styles.container}
//           contentContainerStyle={styles.contentContainer}
//           showsVerticalScrollIndicator={false}
//         >
//           <View style={styles.formContainer}>
//             <Text style={styles.formTitle}>Delivery Information</Text>

//             <View style={styles.formRow}>
//               <View style={styles.formColumn}>
//                 <Text style={styles.inputLabel}>First Name *</Text>
//                 <TextInput
//                   style={[
//                     styles.input,
//                     formErrors.firstName && styles.inputError,
//                   ]}
//                   value={formData.firstName}
//                   onChangeText={(text) => {
//                     setFormData((prev) => ({ ...prev, firstName: text }));
//                     if (formErrors.firstName) {
//                       setFormErrors((prev) => ({
//                         ...prev,
//                         firstName: undefined,
//                       }));
//                     }
//                   }}
//                   placeholder="First Name"
//                 />
//                 {formErrors.firstName && (
//                   <Text style={styles.errorText}>{formErrors.firstName}</Text>
//                 )}
//               </View>

//               <View style={styles.formColumn}>
//                 <Text style={styles.inputLabel}>Last Name *</Text>
//                 <TextInput
//                   style={[
//                     styles.input,
//                     formErrors.lastName && styles.inputError,
//                   ]}
//                   value={formData.lastName}
//                   onChangeText={(text) => {
//                     setFormData((prev) => ({ ...prev, lastName: text }));
//                     if (formErrors.lastName) {
//                       setFormErrors((prev) => ({
//                         ...prev,
//                         lastName: undefined,
//                       }));
//                     }
//                   }}
//                   placeholder="Last Name"
//                 />
//                 {formErrors.lastName && (
//                   <Text style={styles.errorText}>{formErrors.lastName}</Text>
//                 )}
//               </View>
//             </View>

//             <View style={styles.formField}>
//               <Text style={styles.inputLabel}>Country</Text>
//               <TextInput style={styles.input} value="Kuwait" editable={false} />
//             </View>

//             <View style={styles.formField}>
//               <Text style={styles.inputLabel}>Address *</Text>
//               <TextInput
//                 style={[styles.input, formErrors.address && styles.inputError]}
//                 value={formData.address}
//                 onChangeText={(text) => {
//                   setFormData((prev) => ({ ...prev, address: text }));
//                   if (formErrors.address) {
//                     setFormErrors((prev) => ({ ...prev, address: undefined }));
//                   }
//                 }}
//                 placeholder="Full Address"
//                 multiline
//               />
//               {formErrors.address && (
//                 <Text style={styles.errorText}>{formErrors.address}</Text>
//               )}
//             </View>

//             <View style={styles.formRow}>
//               <View style={styles.formColumn}>
//                 <Text style={styles.inputLabel}>City</Text>
//                 <TextInput
//                   style={styles.input}
//                   value={formData.city}
//                   onChangeText={(text) =>
//                     setFormData((prev) => ({ ...prev, city: text }))
//                   }
//                   placeholder="City"
//                 />
//               </View>

//               <View style={styles.formColumn}>
//                 <Text style={styles.inputLabel}>State</Text>
//                 <TextInput
//                   style={styles.input}
//                   value={formData.state}
//                   onChangeText={(text) =>
//                     setFormData((prev) => ({ ...prev, state: text }))
//                   }
//                   placeholder="State"
//                 />
//               </View>
//             </View>

//             <View style={styles.formRow}>
//               <View style={styles.formColumn}>
//                 <Text style={styles.inputLabel}>Post Code</Text>
//                 <TextInput
//                   style={styles.input}
//                   value={formData.postCode}
//                   onChangeText={(text) =>
//                     setFormData((prev) => ({ ...prev, postCode: text }))
//                   }
//                   placeholder="Post Code"
//                   keyboardType="numeric"
//                 />
//               </View>

//               <View style={styles.formColumn}>
//                 <Text style={styles.inputLabel}>Phone *</Text>
//                 <TextInput
//                   style={[styles.input, formErrors.phone && styles.inputError]}
//                   value={formData.phone}
//                   onChangeText={(text) => {
//                     // Only allow numbers, spaces, and dashes
//                     const cleaned = text.replace(/[^\d\s-]/g, "");
//                     setFormData((prev) => ({ ...prev, phone: cleaned }));
//                     if (formErrors.phone) {
//                       setFormErrors((prev) => ({ ...prev, phone: undefined }));
//                     }
//                   }}
//                   placeholder="e.g., 50123456"
//                   keyboardType="phone-pad"
//                   maxLength={12} // Allow for spaces/formatting
//                 />
//                 {formErrors.phone && (
//                   <Text style={styles.errorText}>{formErrors.phone}</Text>
//                 )}
//               </View>
//             </View>

//             <View style={styles.formField}>
//               <Text style={styles.inputLabel}>Email</Text>
//               <TextInput
//                 style={styles.input}
//                 value={formData.email}
//                 onChangeText={(text) =>
//                   setFormData((prev) => ({ ...prev, email: text }))
//                 }
//                 placeholder="Email Address"
//                 keyboardType="email-address"
//                 autoCapitalize="none"
//               />
//             </View>

//             <Text style={styles.deliveryNote}>
//               Orders will be delivered within the next business day
//             </Text>
//           </View>

//           {/* Order Summary Section */}
//           <View style={styles.card}>
//             <Text style={styles.cardTitle}>Order Summary</Text>
//             {items.map((item) => (
//               <View key={item.documentId} style={styles.itemRow}>
//                 <View style={styles.itemDetails}>
//                   <Text style={styles.itemName} numberOfLines={1}>
//                     {item.name}
//                   </Text>
//                   <Text style={styles.itemQuantity}>Qty: {item.quantity}</Text>
//                 </View>
//                 <Text style={styles.itemPrice}>
//                   {((item.salesPrice || item.price) * item.quantity).toFixed(3)}{" "}
//                   KWD
//                 </Text>
//               </View>
//             ))}

//             <View style={styles.summaryContainer}>
//               <OrderSummaryRow
//                 label="Subtotal"
//                 value={`${subtotal.toFixed(3)} KWD`}
//               />
//               {appliedCoupon && (
//                 <OrderSummaryRow
//                   label={`Discount (${appliedCoupon.code})`}
//                   value={`- ${discount.toFixed(3)} KWD`}
//                   isDiscount
//                 />
//               )}
//               <View style={styles.shippingFeeRow}>
//                 <Text style={styles.summaryLabel}>Shipping Fee</Text>
//                 <View style={styles.shippingFeeValueContainer}>
//                   {isLoadingShippingFee ? (
//                     <ActivityIndicator size="small" color="#10B981" />
//                   ) : shippingFeeError ? (
//                     <Text style={styles.errorValue}>Error loading fee</Text>
//                   ) : (
//                     <Text style={styles.summaryValue}>
//                       {shippingFee.toFixed(3)} KWD
//                     </Text>
//                   )}
//                 </View>
//               </View>
//               <View style={styles.divider} />
//               <OrderSummaryRow
//                 label="Total Amount"
//                 value={`${finalTotal.toFixed(3)} KWD`}
//                 isTotal
//               />
//             </View>
//           </View>

//           <View style={styles.securityCard}>
//             <View style={styles.securityHeader}>
//               <Lock size={20} color="#10B981" />
//               <Text style={styles.securityTitle}>Secure Payment</Text>
//             </View>
//             <Text style={styles.securityText}>
//               • SSL encrypted payment processing
//               {"\n"}• Verified by Bookeey Payment Gateway
//               {"\n"}• Your payment details are protected
//             </Text>
//           </View>

//           <TouchableOpacity
//             style={[
//               styles.payButton,
//               (isProcessing || isLoadingShippingFee) &&
//                 styles.payButtonDisabled,
//             ]}
//             onPress={handlePayment}
//             disabled={isProcessing || isLoadingShippingFee}
//           >
//             {isProcessing ? (
//               <ActivityIndicator color="white" size="small" />
//             ) : (
//               <View style={styles.payButtonContent}>
//                 <CreditCard size={20} color="white" />
//                 <Text style={styles.payButtonText}>
//                   Pay {finalTotal.toFixed(3)} KWD
//                 </Text>
//               </View>
//             )}
//           </TouchableOpacity>
//         </ScrollView>

//         {/* WebView Modal */}
//         <Modal
//           visible={showWebView}
//           animationType="slide"
//           onRequestClose={handleBackPress}
//         >
//           <SafeAreaView style={styles.modalContainer}>
//             <View style={styles.webViewHeader}>
//               <TouchableOpacity
//                 onPress={handleBackPress}
//                 style={styles.webViewCloseButton}
//                 hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//               >
//                 <ArrowLeft color="#E53935" size={24} />
//               </TouchableOpacity>
//               <View style={styles.webViewTitleContainer}>
//                 <Lock size={16} color="#10B981" />
//                 <Text style={styles.webViewTitle}>Secure Payment</Text>
//               </View>
//             </View>

//             {isWebViewLoading && <PaymentLoadingOverlay />}

//             {paymentUrl && (
//               <WebView
//                 source={{
//                   uri: paymentUrl,
//                   headers: {
//                     "ngrok-skip-browser-warning": "true",
//                   },
//                 }}
//                 injectedJavaScript={injectScript}
//                 onMessage={(event) => {
//                   const { data } = event.nativeEvent;
//                   if (data === "PAYMENT_SUCCESS") {
//                     handlePaymentSuccess();
//                   } else if (data === "PAYMENT_FAILED") {
//                     handlePaymentFailure();
//                   }
//                 }}
//                 onNavigationStateChange={(navState) => {
//                   if (
//                     navState.url.includes("success") ||
//                     navState.url.includes("KfastSuccess")
//                   ) {
//                     handlePaymentSuccess();
//                     return false;
//                   }
//                   if (
//                     navState.url.includes("fail") ||
//                     navState.url.includes("KfastFail")
//                   ) {
//                     handlePaymentFailure();
//                     return false;
//                   }
//                   return true;
//                 }}
//                 onLoadStart={() => setIsWebViewLoading(true)}
//                 onLoadEnd={() => setIsWebViewLoading(false)}
//                 onError={(syntheticEvent) => {
//                   handlePaymentError(syntheticEvent.nativeEvent.description);
//                 }}
//                 style={styles.webView}
//                 incognito={true}
//                 cacheEnabled={false}
//                 domStorageEnabled={true}
//                 javaScriptEnabled={true}
//               />
//             )}
//           </SafeAreaView>
//         </Modal>

//         {/* Success Overlay */}
//         <Modal visible={showSuccessOverlay} transparent animationType="fade">
//           <View style={styles.successOverlay}>
//             <Animated.View
//               style={[
//                 styles.successContent,
//                 {
//                   transform: [{ scale: successScale }],
//                 },
//               ]}
//             >
//               <Animated.View style={styles.checkmarkContainer}>
//                 <CheckCircle
//                   size={60}
//                   color="#10B981"
//                   style={{
//                     opacity: checkmarkProgress,
//                   }}
//                 />
//               </Animated.View>
//               <Text style={styles.successTitle}>Payment Successful!</Text>
//               <Text style={styles.successMessage}>
//                 Your order has been confirmed
//               </Text>
//             </Animated.View>
//           </View>
//         </Modal>
//       </KeyboardAvoidingView>
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: {
//     flex: 1,
//     backgroundColor: "#f9fafb",
//   },
//   container: {
//     flex: 1,
//   },
//   contentContainer: {
//     padding: 16,
//     paddingBottom: 32,
//   },
//   header: {
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     paddingVertical: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f0f0f0",
//     backgroundColor: "#f9fafb",
//   },
//   headerTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#1f2937",
//     marginLeft: 16,
//   },
//   formContainer: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     ...Platform.select({
//       ios: {
//         shadowColor: "#000",
//         shadowOffset: { width: 0, height: 2 },
//         shadowOpacity: 0.1,
//         shadowRadius: 4,
//       },
//       android: {
//         elevation: 3,
//       },
//     }),
//   },
//   formTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 16,
//   },
//   formRow: {
//     flexDirection: "row",
//     gap: 12,
//     marginBottom: 16,
//   },
//   formColumn: {
//     flex: 1,
//   },
//   formField: {
//     marginBottom: 16,
//   },
//   inputLabel: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#4b5563",
//     marginBottom: 4,
//   },
//   input: {
//     borderWidth: 1,
//     borderColor: "#e5e7eb",
//     borderRadius: 8,
//     padding: 12,
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#1f2937",
//     backgroundColor: "#fff",
//   },
//   inputError: {
//     borderColor: "#ef4444",
//   },
//   errorText: {
//     color: "#ef4444",
//     fontSize: 12,
//     fontFamily: "Cairo",
//     marginTop: 4,
//   },
//   deliveryNote: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//     marginTop: 16,
//     textAlign: "center",
//   },
//   // ... (Previous styles remain the same)
//   successOverlay: {
//     flex: 1,
//     backgroundColor: "rgba(0, 0, 0, 0.5)",
//     justifyContent: "center",
//     alignItems: "center",
//   },
//   successContent: {
//     backgroundColor: "white",
//     borderRadius: 20,
//     padding: 24,
//     alignItems: "center",
//     width: SCREEN_WIDTH * 0.8,
//     maxWidth: 320,
//   },
//   checkmarkContainer: {
//     width: 80,
//     height: 80,
//     borderRadius: 40,
//     backgroundColor: "#ecfdf5",
//     justifyContent: "center",
//     alignItems: "center",
//     marginBottom: 16,
//   },
//   successTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#10B981",
//     marginBottom: 8,
//   },
//   successMessage: {
//     fontSize: 16,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//     textAlign: "center",
//   },
//   card: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     ...Platform.select({
//       ios: {
//         shadowColor: "#000",
//         shadowOffset: { width: 0, height: 2 },
//         shadowOpacity: 0.1,
//         shadowRadius: 4,
//       },
//       android: {
//         elevation: 3,
//       },
//     }),
//   },
//   itemRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     paddingVertical: 8,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f1f5f9",
//   },
//   itemDetails: {
//     flex: 1,
//     marginRight: 12,
//   },
//   itemName: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   itemQuantity: {
//     fontSize: 12,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//     marginTop: 2,
//   },
//   itemPrice: {
//     fontSize: 14,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//   },
//   summaryContainer: {
//     marginTop: 16,
//     paddingTop: 16,
//     borderTopWidth: 1,
//     borderTopColor: "#e5e7eb",
//   },
//   shippingFeeRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginVertical: 8,
//   },
//   summaryLabel: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4b5563",
//   },
//   summaryValue: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   divider: {
//     height: 1,
//     backgroundColor: "#e5e7eb",
//     marginVertical: 12,
//   },
//   securityCard: {
//     backgroundColor: "#f0fdf4",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 24,
//     borderWidth: 1,
//     borderColor: "#86efac",
//   },
//   securityHeader: {
//     flexDirection: "row",
//     alignItems: "center",
//     marginBottom: 8,
//     gap: 8,
//   },
//   securityTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#047857",
//   },
//   securityText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4b5563",
//     lineHeight: 22,
//   },
//   payButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 12,
//     padding: 16,
//     alignItems: "center",
//     justifyContent: "center",
//     marginTop: 8,
//   },
//   payButtonDisabled: {
//     opacity: 0.6,
//   },
//   payButtonContent: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 8,
//   },
//   payButtonText: {
//     color: "white",
//     fontSize: 16,
//     fontFamily: "Cairo-Bold",
//   },
//   modalContainer: {
//     flex: 1,
//     backgroundColor: "#fff",
//   },
//   webViewHeader: {
//     height: 56,
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     borderBottomWidth: 1,
//     borderBottomColor: "#e5e7eb",
//     backgroundColor: "#f9fafb",
//   },
//   webViewCloseButton: {
//     padding: 8,
//   },
//   webViewTitleContainer: {
//     flex: 1,
//     flexDirection: "row",
//     alignItems: "center",
//     justifyContent: "center",
//     marginRight: 40,
//     gap: 8,
//   },
//   webViewTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   webView: {
//     flex: 1,
//   },
//   loadingOverlay: {
//     ...StyleSheet.absoluteFillObject,
//     backgroundColor: "rgba(255, 255, 255, 0.95)",
//     justifyContent: "center",
//     alignItems: "center",
//     zIndex: 999,
//   },
//   loadingCard: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "80%",
//     maxWidth: 300,
//     ...Platform.select({
//       ios: {
//         shadowColor: "#000",
//         shadowOffset: { width: 0, height: 2 },
//         shadowOpacity: 0.25,
//         shadowRadius: 4,
//       },
//       android: {
//         elevation: 5,
//       },
//     }),
//   },
//   loadingTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   loadingSubtext: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//     marginTop: 8,
//     textAlign: "center",
//   },
//   helperText: {
//     fontSize: 12,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//     marginTop: 4,
//   },
// });

/************************************* */

// import React, { useState, useCallback, useEffect, useRef } from "react";
// import {
//   View,
//   Text,
//   ScrollView,
//   Alert,
//   ActivityIndicator,
//   StyleSheet,
//   Platform,
//   TouchableOpacity,
//   SafeAreaView,
//   BackHandler,
//   Modal,
//   StatusBar,
//   TextInput,
//   KeyboardAvoidingView,
//   Animated,
//   Easing,
//   Dimensions,
// } from "react-native";
// import { router, useNavigation } from "expo-router";
// import { WebView } from "react-native-webview";
// import { useFocusEffect } from "@react-navigation/native";
// import {
//   Shield,
//   CreditCard,
//   ArrowLeft,
//   Lock,
//   ChevronLeft,
//   CheckCircle,
//   XCircle,
//   User,
//   Mail,
//   Phone,
//   MapPin,
// } from "lucide-react-native";
// import Toast from "react-native-toast-message";
// import NetInfo from "@react-native-community/netinfo";
// import AsyncStorage from "@react-native-async-storage/async-storage";
// import useCartStore from "../../store/cartStore";
// import { OrderSummaryRow } from "../Components/OrderSummary";
// import useShippingFee from "../hooks/useShippingFee";
// import { useSafeAreaInsets } from "react-native-safe-area-context";
// import CryptoJS from "crypto-js";

// interface FormData {
//   firstName: string;
//   lastName: string;
//   address: string;
//   state: string;
//   city: string;
//   postCode: string;
//   phone: string;
//   email: string;
// }

// interface FormErrors {
//   firstName?: string;
//   lastName?: string;
//   address?: string;
//   phone?: string;
//   email?: string;
// }

// const IS_TEST_ENV = process.env.EXPO_PUBLIC_IS_TEST_ENV === "true";
// const PAYMENT_API_URL = IS_TEST_ENV
//   ? "https://demo.bookeey.com/pgapi/api/payment/requestLink"
//   : "https://pg.bookeey.com/internalapi/api/payment/requestLink";

// const MerchUID = process.env.EXPO_PUBLIC_MERCH_UID || "mer2400018";
// const SECRET_KEY = process.env.EXPO_PUBLIC_SECRET_KEY || "0623475";
// const SURL = "https://app.bookeeypayment.com/success";
// const FURL = "https://app.bookeeypayment.com/failure";
// const FORM_DATA_KEY = "user_delivery_info";

// const { width: SCREEN_WIDTH } = Dimensions.get("window");

// const REQUIRED_FIELDS = ["firstName", "lastName", "address", "phone"];
// const PHONE_REGEX = /^[569]\d{7}$/;

// const injectScript = `
// (function() {
//   ${IS_TEST_ENV ? `document.cookie = "ngrok-skip-browser-warning=true";` : ""}
//   const observer = new MutationObserver(function(mutations) {
//     mutations.forEach(function(mutation) {
//       if (mutation.target.textContent.includes('Payment Successful')) {
//         window.ReactNativeWebView.postMessage('PAYMENT_SUCCESS');
//       } else if (mutation.target.textContent.includes('Payment Failed')) {
//         window.ReactNativeWebView.postMessage('PAYMENT_FAILED');
//       }
//     });
//   });
//   observer.observe(document.body, { childList: true, subtree: true });
// })();
// `;

// const PaymentLoadingOverlay = () => (
//   <View style={styles.loadingOverlay}>
//     <View style={styles.loadingCard}>
//       <ActivityIndicator size="large" color="#10B981" />
//       <Text style={styles.loadingTitle}>Processing Payment</Text>
//       <Text style={styles.loadingSubtext}>Please don't close this window</Text>
//     </View>
//   </View>
// );

// const saveFormData = async (data: FormData) => {
//   try {
//     await AsyncStorage.setItem(FORM_DATA_KEY, JSON.stringify(data));
//   } catch (error) {
//     console.error("Error saving form data:", error);
//   }
// };

// const loadFormData = async () => {
//   try {
//     const savedData = await AsyncStorage.getItem(FORM_DATA_KEY);
//     if (savedData) {
//       return JSON.parse(savedData);
//     }
//   } catch (error) {
//     console.error("Error loading form data:", error);
//   }
//   return null;
// };

// export default function CheckoutPage() {
//   const insets = useSafeAreaInsets();
//   const navigation = useNavigation();
//   const successAnimationValue = useRef(new Animated.Value(0)).current;
//   const successScale = useRef(new Animated.Value(0)).current;
//   const checkmarkProgress = useRef(new Animated.Value(0)).current;

//   const [formData, setFormData] = useState<FormData>({
//     firstName: "",
//     lastName: "",
//     address: "",
//     state: "",
//     city: "",
//     postCode: "",
//     phone: "",
//     email: "",
//   });

//   const [formErrors, setFormErrors] = useState<FormErrors>({});
//   const [isProcessing, setIsProcessing] = useState(false);
//   const [paymentError, setPaymentError] = useState<string | null>(null);
//   const [showWebView, setShowWebView] = useState(false);
//   const [paymentUrl, setPaymentUrl] = useState<string | null>(null);
//   const [isWebViewLoading, setIsWebViewLoading] = useState(true);
//   const [showSuccessOverlay, setShowSuccessOverlay] = useState(false);

//   const { items, total, discountedTotal, appliedCoupon, clearCart } =
//     useCartStore();
//   const {
//     shippingFee,
//     loading: isLoadingShippingFee,
//     error: shippingFeeError,
//   } = useShippingFee();

//   useEffect(() => {
//     const loadSavedData = async () => {
//       const savedData = await loadFormData();
//       if (savedData) {
//         setFormData(savedData);
//       }
//     };
//     loadSavedData();
//   }, []);

//   const validateForm = (): boolean => {
//     const errors: FormErrors = {};
//     let isValid = true;

//     REQUIRED_FIELDS.forEach((field) => {
//       if (!formData[field as keyof FormData]) {
//         errors[field as keyof FormErrors] = `${
//           field.charAt(0).toUpperCase() + field.slice(1)
//         } is required`;
//         isValid = false;
//       }
//     });

//     if (formData.phone) {
//       const cleanPhone = formData.phone.replace(/[\s-]/g, "");
//       const phoneNumber = cleanPhone.replace(/^(\+965|965)/, "");

//       if (!/^[569]\d{7}$/g.test(phoneNumber)) {
//         errors.phone =
//           "Please enter a valid Kuwait phone number (8 digits starting with 5, 6, or 9)";
//         isValid = false;
//       }
//     }

//     if (formData.email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
//       errors.email = "Please enter a valid email address";
//       isValid = false;
//     }

//     setFormErrors(errors);
//     return isValid;
//   };

//   const animateSuccess = () => {
//     successScale.setValue(0);
//     checkmarkProgress.setValue(0);

//     Animated.parallel([
//       Animated.spring(successScale, {
//         toValue: 1,
//         friction: 8,
//         tension: 40,
//         useNativeDriver: true,
//       }),
//       Animated.timing(checkmarkProgress, {
//         toValue: 1,
//         duration: 800,
//         easing: Easing.bezier(0.65, 0, 0.45, 1),
//         useNativeDriver: true,
//       }),
//     ]).start(() => {
//       setTimeout(() => {
//         setShowSuccessOverlay(false);
//         router.push("/(root)/Cart");
//       }, 2000);
//     });
//   };

//   const handleBackPress = useCallback(() => {
//     if (showWebView) {
//       Alert.alert(
//         "Cancel Payment?",
//         "Are you sure you want to cancel? This payment will not be processed.",
//         [
//           { text: "Continue Payment", style: "cancel" },
//           {
//             text: "Cancel Payment",
//             style: "destructive",
//             onPress: () => {
//               setShowWebView(false);
//               setPaymentUrl(null);
//               Toast.show({
//                 type: "error",
//                 text1: "Payment Cancelled",
//                 text2: "Your payment has been cancelled",
//                 position: "top",
//               });
//             },
//           },
//         ]
//       );
//       return true;
//     }
//     return false;
//   }, [showWebView]);

//   useEffect(() => {
//     const backHandler = BackHandler.addEventListener(
//       "hardwareBackPress",
//       handleBackPress
//     );
//     return () => backHandler.remove();
//   }, [handleBackPress]);

//   useFocusEffect(
//     useCallback(() => {
//       navigation.setOptions({
//         gestureEnabled: !showWebView,
//         headerShown: false,
//       });
//     }, [showWebView])
//   );

//   const handlePaymentSuccess = async () => {
//     setShowWebView(false);
//     setPaymentUrl(null);
//     await saveFormData(formData);
//     clearCart();
//     setShowSuccessOverlay(true);
//     animateSuccess();
//   };

//   const handlePaymentFailure = () => {
//     setShowWebView(false);
//     setPaymentUrl(null);
//     Toast.show({
//       type: "error",
//       text1: "Payment Failed",
//       text2: "Please try again or use a different payment method",
//       position: "top",
//       visibilityTime: 4000,
//     });
//   };

//   const handlePaymentError = (errorMessage: string) => {
//     setPaymentError(errorMessage);
//     Toast.show({
//       type: "error",
//       text1: "Payment Error",
//       text2: errorMessage || "An error occurred during payment",
//       position: "top",
//     });
//   };

//   const handlePayment = async () => {
//     if (isProcessing || !validateForm()) return;

//     try {
//       const netInfo = await NetInfo.fetch();
//       if (!netInfo.isConnected) {
//         Toast.show({
//           type: "error",
//           text1: "No Internet Connection",
//           text2: "Please check your connection and try again",
//           position: "top",
//         });
//         return;
//       }

//       setIsProcessing(true);
//       setPaymentError(null);

//       const currentDate = new Date()
//         .toISOString()
//         .replace(/[^0-9]/g, "")
//         .slice(0, 14);
//       const randomSuffix = Math.random().toString(36).slice(2, 6);
//       const orderId = `ORD${currentDate}${randomSuffix}`;
//       const txnHDR = `${Date.now()}${Math.floor(Math.random() * 10000)}`;
//       const rndnum = Math.random().toString(36).slice(2);

//       const sequence = `${MerchUID}|${orderId}|${SURL}|${FURL}|${finalTotal.toFixed(
//         3
//       )}|GEN|${SECRET_KEY}|${rndnum}`;
//       const hashMac = CryptoJS.SHA512(sequence).toString(CryptoJS.enc.Hex);

//       const payload = {
//         DBRqst: "PY_ECom",
//         Do_Appinfo: {
//           APIVer: "2.1",
//           APPTyp: "MOB",
//           AppVer: "1.0",
//           Country: "KW",
//           OS: Platform.OS === "ios" ? "iOS" : "Android",
//           DevcType: "5",
//           HsCode: "",
//           IPAddrs: "",
//           MdlID: "",
//           UsrSessID: "",
//         },
//         Do_MerchDtl: {
//           BKY_PRDENUM: "ECom",
//           FURL: FURL,
//           MerchUID: MerchUID,
//           SURL: SURL,
//         },
//         Do_PyrDtl: {
//           Pyr_MPhone: formData.phone.replace(/[^\d]/g, ""),
//           ISDNCD: "965",
//           Pyr_Name: `${formData.firstName} ${formData.lastName}`,
//         },
//         Do_TxnDtl: [
//           {
//             SubMerchUID: MerchUID,
//             Txn_AMT: finalTotal.toFixed(3),
//           },
//         ],
//         Do_TxnHdr: {
//           BKY_Txn_UID: "",
//           Merch_Txn_UID: orderId,
//           PayFor: "ECom",
//           PayMethod: "KNET",
//           Txn_HDR: txnHDR,
//           hashMac: hashMac,
//         },
//         Do_MoreDtl: {
//           Cust_Data1: JSON.stringify({
//             orderDetails: {
//               items: items.map((item) => ({
//                 id: item.documentId,
//                 name: item.name,
//                 quantity: item.quantity,
//                 price: (item.salesPrice || item.price).toFixed(3),
//               })),
//               subtotal: total.toFixed(3),
//               discount: discount.toFixed(3),
//               shippingFee: shippingFee.toFixed(3),
//               total: finalTotal.toFixed(3),
//               orderDate: new Date().toISOString(),
//               expectedDelivery: new Date(
//                 Date.now() + 24 * 60 * 60 * 1000
//               ).toISOString(),
//             },
//             customerInfo: {
//               firstName: formData.firstName,
//               lastName: formData.lastName,
//               address: formData.address,
//               city: formData.city,
//               state: formData.state,
//               postCode: formData.postCode,
//               email: formData.email,
//               phone: formData.phone,
//             },
//           }),
//           Cust_Data2: "",
//           Cust_Data3: "",
//         },
//       };

//       const response = await fetch(PAYMENT_API_URL, {
//         method: "POST",
//         headers: {
//           "Content-Type": "application/json",
//           Accept: "application/json",
//         },
//         body: JSON.stringify(payload),
//       });

//       if (!response.ok) {
//         throw new Error("Payment service temporarily unavailable");
//       }

//       const data = await response.json();

//       if (
//         !data.PayUrl ||
//         typeof data.PayUrl !== "string" ||
//         !data.PayUrl.startsWith("https://")
//       ) {
//         throw new Error("Invalid payment URL received");
//       }

//       setPaymentUrl(data.PayUrl);
//       setShowWebView(true);
//     } catch (error: any) {
//       const errorMessage = error.message || "Payment failed";
//       setPaymentError(errorMessage);
//       handlePaymentError(errorMessage);
//     } finally {
//       setIsProcessing(false);
//     }
//   };

//   const subtotal = total;
//   const discount = appliedCoupon
//     ? appliedCoupon.type === "percentage"
//       ? (total * appliedCoupon.amount) / 100
//       : appliedCoupon.amount
//     : 0;
//   const finalTotal = (discountedTotal || total) + shippingFee;

//   if (items.length === 0) {
//     router.replace("/(root)/Cart");
//     return null;
//   }

//   return (
//     <SafeAreaView style={[styles.safeArea, { paddingTop: insets.top }]}>
//       <KeyboardAvoidingView
//         behavior={Platform.OS === "ios" ? "padding" : "height"}
//         style={styles.container}
//       >
//         <StatusBar barStyle="dark-content" backgroundColor="#f9fafb" />

//         <View style={styles.header}>
//           <TouchableOpacity
//             onPress={() => router.push("/(root)/Cart")}
//             style={styles.backButton}
//             hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//           >
//             <ChevronLeft color="#E53935" size={28} />
//           </TouchableOpacity>
//           <Text style={styles.headerTitle}>Secure Checkout</Text>
//         </View>

//         <ScrollView
//           style={styles.container}
//           contentContainerStyle={styles.contentContainer}
//           showsVerticalScrollIndicator={false}
//         >
//           <View style={styles.formContainer}>
//             <Text style={styles.formTitle}>Delivery Information</Text>

//             <View style={styles.formRow}>
//               <View style={styles.formColumn}>
//                 <Text style={styles.inputLabel}>First Name *</Text>
//                 <TextInput
//                   style={[
//                     styles.input,
//                     formErrors.firstName && styles.inputError,
//                   ]}
//                   value={formData.firstName}
//                   onChangeText={(text) => {
//                     setFormData((prev) => ({ ...prev, firstName: text }));
//                     if (formErrors.firstName) {
//                       setFormErrors((prev) => ({
//                         ...prev,
//                         firstName: undefined,
//                       }));
//                     }
//                   }}
//                   placeholder="First Name"
//                 />
//                 {formErrors.firstName && (
//                   <Text style={styles.errorText}>{formErrors.firstName}</Text>
//                 )}
//               </View>

//               <View style={styles.formColumn}>
//                 <Text style={styles.inputLabel}>Last Name *</Text>
//                 <TextInput
//                   style={[
//                     styles.input,
//                     formErrors.lastName && styles.inputError,
//                   ]}
//                   value={formData.lastName}
//                   onChangeText={(text) => {
//                     setFormData((prev) => ({ ...prev, lastName: text }));
//                     if (formErrors.lastName) {
//                       setFormErrors((prev) => ({
//                         ...prev,
//                         lastName: undefined,
//                       }));
//                     }
//                   }}
//                   placeholder="Last Name"
//                 />
//                 {formErrors.lastName && (
//                   <Text style={styles.errorText}>{formErrors.lastName}</Text>
//                 )}
//               </View>
//             </View>

//             <View style={styles.formField}>
//               <Text style={styles.inputLabel}>Country</Text>
//               <TextInput style={styles.input} value="Kuwait" editable={false} />
//             </View>

//             <View style={styles.formField}>
//               <Text style={styles.inputLabel}>Address *</Text>
//               <TextInput
//                 style={[styles.input, formErrors.address && styles.inputError]}
//                 value={formData.address}
//                 onChangeText={(text) => {
//                   setFormData((prev) => ({ ...prev, address: text }));
//                   if (formErrors.address) {
//                     setFormErrors((prev) => ({ ...prev, address: undefined }));
//                   }
//                 }}
//                 placeholder="Full Address"
//                 multiline
//               />
//               {formErrors.address && (
//                 <Text style={styles.errorText}>{formErrors.address}</Text>
//               )}
//             </View>

//             <View style={styles.formRow}>
//               <View style={styles.formColumn}>
//                 <Text style={styles.inputLabel}>City</Text>
//                 <TextInput
//                   style={styles.input}
//                   value={formData.city}
//                   onChangeText={(text) =>
//                     setFormData((prev) => ({ ...prev, city: text }))
//                   }
//                   placeholder="City"
//                 />
//               </View>

//               <View style={styles.formColumn}>
//                 <Text style={styles.inputLabel}>State</Text>
//                 <TextInput
//                   style={styles.input}
//                   value={formData.state}
//                   onChangeText={(text) =>
//                     setFormData((prev) => ({ ...prev, state: text }))
//                   }
//                   placeholder="State"
//                 />
//               </View>
//             </View>

//             <View style={styles.formRow}>
//               <View style={styles.formColumn}>
//                 <Text style={styles.inputLabel}>Post Code</Text>
//                 <TextInput
//                   style={styles.input}
//                   value={formData.postCode}
//                   onChangeText={(text) =>
//                     setFormData((prev) => ({ ...prev, postCode: text }))
//                   }
//                   placeholder="Post Code"
//                   keyboardType="numeric"
//                 />
//               </View>

//               <View style={styles.formColumn}>
//                 <Text style={styles.inputLabel}>Phone *</Text>
//                 <TextInput
//                   style={[styles.input, formErrors.phone && styles.inputError]}
//                   value={formData.phone}
//                   onChangeText={(text) => {
//                     const cleaned = text.replace(/[^\d\s-]/g, "");
//                     setFormData((prev) => ({ ...prev, phone: cleaned }));
//                     if (formErrors.phone) {
//                       setFormErrors((prev) => ({ ...prev, phone: undefined }));
//                     }
//                   }}
//                   placeholder="e.g., 50123456"
//                   keyboardType="phone-pad"
//                   maxLength={12}
//                 />
//                 {formErrors.phone ? (
//                   <Text style={styles.errorText}>{formErrors.phone}</Text>
//                 ) : (
//                   <Text style={styles.helperText}>
//                     Kuwait number (8 digits starting with 5, 6, or 9)
//                   </Text>
//                 )}
//               </View>
//             </View>

//             <View style={styles.formField}>
//               <Text style={styles.inputLabel}>Email</Text>
//               <TextInput
//                 style={styles.input}
//                 value={formData.email}
//                 onChangeText={(text) =>
//                   setFormData((prev) => ({ ...prev, email: text }))
//                 }
//                 placeholder="Email Address"
//                 keyboardType="email-address"
//                 autoCapitalize="none"
//               />
//             </View>

//             <Text style={styles.deliveryNote}>
//               Orders will be delivered within the next business day
//             </Text>
//           </View>

//           <View style={styles.card}>
//             <Text style={styles.cardTitle}>Order Summary</Text>
//             {items.map((item) => (
//               <View key={item.documentId} style={styles.itemRow}>
//                 <View style={styles.itemDetails}>
//                   <Text style={styles.itemName} numberOfLines={1}>
//                     {item.name}
//                   </Text>
//                   <Text style={styles.itemQuantity}>Qty: {item.quantity}</Text>
//                 </View>
//                 <Text style={styles.itemPrice}>
//                   {((item.salesPrice || item.price) * item.quantity).toFixed(3)}{" "}
//                   KWD
//                 </Text>
//               </View>
//             ))}

//             <View style={styles.summaryContainer}>
//               <OrderSummaryRow
//                 label="Subtotal"
//                 value={`${subtotal.toFixed(3)} KWD`}
//               />
//               {appliedCoupon && (
//                 <OrderSummaryRow
//                   label={`Discount (${appliedCoupon.code})`}
//                   value={`- ${discount.toFixed(3)} KWD`}
//                   isDiscount
//                 />
//               )}
//               <View style={styles.shippingFeeRow}>
//                 <Text style={styles.summaryLabel}>Shipping Fee</Text>
//                 <View style={styles.shippingFeeValueContainer}>
//                   {isLoadingShippingFee ? (
//                     <ActivityIndicator size="small" color="#10B981" />
//                   ) : shippingFeeError ? (
//                     <Text style={styles.errorValue}>Error loading fee</Text>
//                   ) : (
//                     <Text style={styles.summaryValue}>
//                       {shippingFee.toFixed(3)} KWD
//                     </Text>
//                   )}
//                 </View>
//               </View>
//               <View style={styles.divider} />
//               <OrderSummaryRow
//                 label="Total Amount"
//                 value={`${finalTotal.toFixed(3)} KWD`}
//                 isTotal
//               />
//             </View>
//           </View>

//           <View style={styles.securityCard}>
//             <View style={styles.securityHeader}>
//               <Lock size={20} color="#10B981" />
//               <Text style={styles.securityTitle}>Secure Payment</Text>
//             </View>
//             <Text style={styles.securityText}>
//               • SSL encrypted payment processing
//               {"\n"}• Verified by Bookeey Payment Gateway
//               {"\n"}• Your payment details are protected
//             </Text>
//           </View>

//           <TouchableOpacity
//             style={[
//               styles.payButton,
//               (isProcessing || isLoadingShippingFee) &&
//                 styles.payButtonDisabled,
//             ]}
//             onPress={handlePayment}
//             disabled={isProcessing || isLoadingShippingFee}
//           >
//             {isProcessing ? (
//               <ActivityIndicator color="white" size="small" />
//             ) : (
//               <View style={styles.payButtonContent}>
//                 <CreditCard size={20} color="white" />
//                 <Text style={styles.payButtonText}>
//                   Pay {finalTotal.toFixed(3)} KWD
//                 </Text>
//               </View>
//             )}
//           </TouchableOpacity>
//         </ScrollView>

//         {/* WebView Modal */}
//         <Modal
//           visible={showWebView}
//           animationType="slide"
//           onRequestClose={handleBackPress}
//         >
//           <SafeAreaView style={styles.modalContainer}>
//             <View style={styles.webViewHeader}>
//               <TouchableOpacity
//                 onPress={handleBackPress}
//                 style={styles.webViewCloseButton}
//                 hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//               >
//                 <ArrowLeft color="#E53935" size={24} />
//               </TouchableOpacity>
//               <View style={styles.webViewTitleContainer}>
//                 <Lock size={16} color="#10B981" />
//                 <Text style={styles.webViewTitle}>Secure Payment</Text>
//               </View>
//             </View>

//             {isWebViewLoading && <PaymentLoadingOverlay />}

//             {paymentUrl && (
//               <WebView
//                 source={{
//                   uri: paymentUrl,
//                   headers: {
//                     "ngrok-skip-browser-warning": "true",
//                   },
//                 }}
//                 injectedJavaScript={injectScript}
//                 onMessage={(event) => {
//                   const { data } = event.nativeEvent;
//                   if (data === "PAYMENT_SUCCESS") {
//                     handlePaymentSuccess();
//                   } else if (data === "PAYMENT_FAILED") {
//                     handlePaymentFailure();
//                   }
//                 }}
//                 onNavigationStateChange={(navState) => {
//                   if (
//                     navState.url.includes("success") ||
//                     navState.url.includes("KfastSuccess")
//                   ) {
//                     handlePaymentSuccess();
//                     return false;
//                   }
//                   if (
//                     navState.url.includes("fail") ||
//                     navState.url.includes("KfastFail")
//                   ) {
//                     handlePaymentFailure();
//                     return false;
//                   }
//                   return true;
//                 }}
//                 onLoadStart={() => setIsWebViewLoading(true)}
//                 onLoadEnd={() => setIsWebViewLoading(false)}
//                 onError={(syntheticEvent) => {
//                   handlePaymentError(syntheticEvent.nativeEvent.description);
//                 }}
//                 style={styles.webView}
//                 incognito={true}
//                 cacheEnabled={false}
//                 domStorageEnabled={true}
//                 javaScriptEnabled={true}
//               />
//             )}
//           </SafeAreaView>
//         </Modal>

//         {/* Success Overlay */}
//         <Modal visible={showSuccessOverlay} transparent animationType="fade">
//           <View style={styles.successOverlay}>
//             <Animated.View
//               style={[
//                 styles.successContent,
//                 {
//                   transform: [{ scale: successScale }],
//                 },
//               ]}
//             >
//               <Animated.View style={styles.checkmarkContainer}>
//                 <CheckCircle
//                   size={60}
//                   color="#10B981"
//                   style={{
//                     opacity: checkmarkProgress,
//                   }}
//                 />
//               </Animated.View>
//               <Text style={styles.successTitle}>Payment Successful!</Text>
//               <Text style={styles.successMessage}>
//                 Your order has been confirmed
//               </Text>
//             </Animated.View>
//           </View>
//         </Modal>
//       </KeyboardAvoidingView>
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: {
//     flex: 1,
//     backgroundColor: "#f9fafb",
//   },
//   container: {
//     flex: 1,
//   },
//   contentContainer: {
//     padding: 16,
//     paddingBottom: 32,
//   },
//   header: {
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     paddingVertical: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f0f0f0",
//     backgroundColor: "#f9fafb",
//   },
//   headerTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#1f2937",
//     marginLeft: 16,
//   },
//   formContainer: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     ...Platform.select({
//       ios: {
//         shadowColor: "#000",
//         shadowOffset: { width: 0, height: 2 },
//         shadowOpacity: 0.1,
//         shadowRadius: 4,
//       },
//       android: {
//         elevation: 3,
//       },
//     }),
//   },
//   formTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 16,
//   },
//   formRow: {
//     flexDirection: "row",
//     gap: 12,
//     marginBottom: 16,
//   },
//   formColumn: {
//     flex: 1,
//   },
//   formField: {
//     marginBottom: 16,
//   },
//   inputLabel: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#4b5563",
//     marginBottom: 4,
//   },
//   input: {
//     borderWidth: 1,
//     borderColor: "#e5e7eb",
//     borderRadius: 8,
//     padding: 12,
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#1f2937",
//     backgroundColor: "#fff",
//   },
//   inputError: {
//     borderColor: "#ef4444",
//   },
//   errorText: {
//     color: "#ef4444",
//     fontSize: 12,
//     fontFamily: "Cairo",
//     marginTop: 4,
//   },
//   helperText: {
//     fontSize: 12,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//     marginTop: 4,
//   },
//   deliveryNote: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//     marginTop: 16,
//     textAlign: "center",
//   },
//   card: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     ...Platform.select({
//       ios: {
//         shadowColor: "#000",
//         shadowOffset: { width: 0, height: 2 },
//         shadowOpacity: 0.1,
//         shadowRadius: 4,
//       },
//       android: {
//         elevation: 3,
//       },
//     }),
//   },
//   cardTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 16,
//   },
//   itemRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     paddingVertical: 8,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f1f5f9",
//   },
//   itemDetails: {
//     flex: 1,
//     marginRight: 12,
//   },
//   itemName: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   itemQuantity: {
//     fontSize: 12,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//     marginTop: 2,
//   },
//   itemPrice: {
//     fontSize: 14,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//   },
//   summaryContainer: {
//     marginTop: 16,
//     paddingTop: 16,
//     borderTopWidth: 1,
//     borderTopColor: "#e5e7eb",
//   },
//   shippingFeeRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginVertical: 8,
//   },
//   summaryLabel: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4b5563",
//   },
//   summaryValue: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   divider: {
//     height: 1,
//     backgroundColor: "#e5e7eb",
//     marginVertical: 12,
//   },
//   securityCard: {
//     backgroundColor: "#f0fdf4",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 24,
//     borderWidth: 1,
//     borderColor: "#86efac",
//   },
//   securityHeader: {
//     flexDirection: "row",
//     alignItems: "center",
//     marginBottom: 8,
//     gap: 8,
//   },
//   securityTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#047857",
//   },
//   securityText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4b5563",
//     lineHeight: 22,
//   },
//   payButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 12,
//     padding: 16,
//     alignItems: "center",
//     justifyContent: "center",
//     marginTop: 8,
//   },
//   payButtonDisabled: {
//     opacity: 0.6,
//   },
//   payButtonContent: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 8,
//   },
//   payButtonText: {
//     color: "white",
//     fontSize: 16,
//     fontFamily: "Cairo-Bold",
//   },
//   modalContainer: {
//     flex: 1,
//     backgroundColor: "#fff",
//   },
//   webViewHeader: {
//     height: 56,
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     borderBottomWidth: 1,
//     borderBottomColor: "#e5e7eb",
//     backgroundColor: "#f9fafb",
//   },
//   webViewCloseButton: {
//     padding: 8,
//   },
//   webViewTitleContainer: {
//     flex: 1,
//     flexDirection: "row",
//     alignItems: "center",
//     justifyContent: "center",
//     marginRight: 40,
//     gap: 8,
//   },
//   webViewTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   webView: {
//     flex: 1,
//   },
//   loadingOverlay: {
//     ...StyleSheet.absoluteFillObject,
//     backgroundColor: "rgba(255, 255, 255, 0.95)",
//     justifyContent: "center",
//     alignItems: "center",
//     zIndex: 999,
//   },
//   loadingCard: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "80%",
//     maxWidth: 300,
//     ...Platform.select({
//       ios: {
//         shadowColor: "#000",
//         shadowOffset: { width: 0, height: 2 },
//         shadowOpacity: 0.25,
//         shadowRadius: 4,
//       },
//       android: {
//         elevation: 5,
//       },
//     }),
//   },
//   loadingTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   loadingSubtext: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//     marginTop: 8,
//     textAlign: "center",
//   },
//   successOverlay: {
//     flex: 1,
//     backgroundColor: "rgba(0, 0, 0, 0.5)",
//     justifyContent: "center",
//     alignItems: "center",
//   },
//   successContent: {
//     backgroundColor: "white",
//     borderRadius: 20,
//     padding: 24,
//     alignItems: "center",
//     width: SCREEN_WIDTH * 0.8,
//     maxWidth: 320,
//   },
//   checkmarkContainer: {
//     width: 80,
//     height: 80,
//     borderRadius: 40,
//     backgroundColor: "#ecfdf5",
//     justifyContent: "center",
//     alignItems: "center",
//     marginBottom: 16,
//   },
//   successTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#10B981",
//     marginBottom: 8,
//   },
//   successMessage: {
//     fontSize: 16,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//     textAlign: "center",
//   },
// });

/************************************ */

// import React, { useState, useCallback, useEffect, useRef } from "react";
// import {
//   View,
//   Text,
//   ScrollView,
//   Alert,
//   ActivityIndicator,
//   StyleSheet,
//   Platform,
//   TouchableOpacity,
//   SafeAreaView,
//   BackHandler,
//   Modal,
//   StatusBar,
//   TextInput,
//   KeyboardAvoidingView,
//   Animated,
//   Easing,
//   Dimensions,
// } from "react-native";
// import { router, useNavigation } from "expo-router";
// import { WebView } from "react-native-webview";
// import { useFocusEffect } from "@react-navigation/native";
// import {
//   Shield,
//   CreditCard,
//   ArrowLeft,
//   Lock,
//   ChevronLeft,
//   CheckCircle,
//   XCircle,
//   User,
//   Mail,
//   Phone,
//   MapPin,
// } from "lucide-react-native";
// import Toast from "react-native-toast-message";
// import NetInfo from "@react-native-community/netinfo";
// import AsyncStorage from "@react-native-async-storage/async-storage";
// import useCartStore from "../../store/cartStore";
// import { OrderSummaryRow } from "../Components/OrderSummary";
// import useShippingFee from "../hooks/useShippingFee";
// import { useSafeAreaInsets } from "react-native-safe-area-context";
// import CryptoJS from "crypto-js";

// const IS_TEST_ENV = process.env.EXPO_PUBLIC_IS_TEST_ENV === "true";
// const PAYMENT_API_URL = IS_TEST_ENV
//   ? "https://demo.bookeey.com/pgapi/api/payment/requestLink"
//   : "https://pg.bookeey.com/internalapi/api/payment/requestLink";
// const MerchUID = process.env.EXPO_PUBLIC_MERCH_UID || "mer2400018";
// const SECRET_KEY = process.env.EXPO_PUBLIC_SECRET_KEY || "0623475";
// const SURL = "https://app.bookeeypayment.com/success";
// const FURL = "https://app.bookeeypayment.com/failure";
// const FORM_DATA_KEY = "user_delivery_info";
// const { width: SCREEN_WIDTH } = Dimensions.get("window");
// const REQUIRED_FIELDS = ["firstName", "lastName", "address", "phone"];
// const PHONE_REGEX = /^[569]\d{7}$/;

// const injectScript = `
// (function() {
//   ${IS_TEST_ENV ? `document.cookie = "ngrok-skip-browser-warning=true";` : ""}
//   const observer = new MutationObserver(function(mutations) {
//     mutations.forEach(function(mutation) {
//       if (mutation.target.textContent.includes('Payment Successful')) {
//         window.ReactNativeWebView.postMessage('PAYMENT_SUCCESS');
//       } else if (mutation.target.textContent.includes('Payment Failed')) {
//         window.ReactNativeWebView.postMessage('PAYMENT_FAILED');
//       }
//     });
//   });
//   observer.observe(document.body, { childList: true, subtree: true });
// })();
// `;

// const PaymentLoadingOverlay = () => (
//   <View style={styles.loadingOverlay}>
//     <View style={styles.loadingCard}>
//       <ActivityIndicator size="large" color="#10B981" />
//       <Text style={styles.loadingTitle}>Processing Payment</Text>
//       <Text style={styles.loadingSubtext}>Please don't close this window</Text>
//     </View>
//   </View>
// );

// const saveFormData = async (data) => {
//   try {
//     await AsyncStorage.setItem(FORM_DATA_KEY, JSON.stringify(data));
//   } catch (error) {
//     console.error(error);
//   }
// };

// const loadFormData = async () => {
//   try {
//     const savedData = await AsyncStorage.getItem(FORM_DATA_KEY);
//     return savedData ? JSON.parse(savedData) : null;
//   } catch (error) {
//     console.error(error);
//     return null;
//   }
// };

// export default function CheckoutPage() {
//   const insets = useSafeAreaInsets();
//   const navigation = useNavigation();
//   const successAnimationValue = useRef(new Animated.Value(0)).current;
//   const successScale = useRef(new Animated.Value(0)).current;
//   const checkmarkProgress = useRef(new Animated.Value(0)).current;

//   const [formData, setFormData] = useState({
//     firstName: "",
//     lastName: "",
//     address: "",
//     state: "",
//     city: "",
//     postCode: "",
//     phone: "",
//     email: "",
//   });

//   const [formErrors, setFormErrors] = useState({});
//   const [isProcessing, setIsProcessing] = useState(false);
//   const [paymentError, setPaymentError] = useState(null);
//   const [showWebView, setShowWebView] = useState(false);
//   const [paymentUrl, setPaymentUrl] = useState(null);
//   const [isWebViewLoading, setIsWebViewLoading] = useState(true);
//   const [showSuccessOverlay, setShowSuccessOverlay] = useState(false);

//   const { items, total, discountedTotal, appliedCoupon, clearCart } =
//     useCartStore();
//   const {
//     shippingFee,
//     loading: isLoadingShippingFee,
//     error: shippingFeeError,
//   } = useShippingFee();

//   useEffect(() => {
//     loadFormData().then((savedData) => {
//       if (savedData) setFormData(savedData);
//     });
//   }, []);

//   const validateForm = () => {
//     const errors = {};
//     let isValid = true;

//     REQUIRED_FIELDS.forEach((field) => {
//       if (!formData[field]) {
//         errors[field] = `${
//           field.charAt(0).toUpperCase() + field.slice(1)
//         } is required`;
//         isValid = false;
//       }
//     });

//     if (formData.phone) {
//       const cleanPhone = formData.phone.replace(/[\s-]/g, "");
//       const phoneNumber = cleanPhone.replace(/^(\+965|965)/, "");
//       if (!PHONE_REGEX.test(phoneNumber)) {
//         errors.phone = "Please enter a valid Kuwait phone number";
//         isValid = false;
//       }
//     }

//     if (formData.email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
//       errors.email = "Please enter a valid email address";
//       isValid = false;
//     }

//     setFormErrors(errors);
//     return isValid;
//   };

//   const animateSuccess = () => {
//     successScale.setValue(0);
//     checkmarkProgress.setValue(0);

//     Animated.parallel([
//       Animated.spring(successScale, {
//         toValue: 1,
//         friction: 8,
//         tension: 40,
//         useNativeDriver: true,
//       }),
//       Animated.timing(checkmarkProgress, {
//         toValue: 1,
//         duration: 800,
//         easing: Easing.bezier(0.65, 0, 0.45, 1),
//         useNativeDriver: true,
//       }),
//     ]).start(() => {
//       setTimeout(() => {
//         setShowSuccessOverlay(false);
//         router.push("/(root)/Cart");
//       }, 2000);
//     });
//   };

//   const handleBackPress = useCallback(() => {
//     if (showWebView) {
//       Alert.alert("Cancel Payment?", "Are you sure you want to cancel?", [
//         { text: "Continue Payment", style: "cancel" },
//         {
//           text: "Cancel Payment",
//           style: "destructive",
//           onPress: () => {
//             setShowWebView(false);
//             setPaymentUrl(null);
//             Toast.show({
//               type: "error",
//               text1: "Payment Cancelled",
//               text2: "Your payment has been cancelled",
//               position: "top",
//             });
//           },
//         },
//       ]);
//       return true;
//     }
//     return false;
//   }, [showWebView]);

//   useEffect(() => {
//     const backHandler = BackHandler.addEventListener(
//       "hardwareBackPress",
//       handleBackPress
//     );
//     return () => backHandler.remove();
//   }, [handleBackPress]);

//   useFocusEffect(
//     useCallback(() => {
//       navigation.setOptions({
//         gestureEnabled: !showWebView,
//         headerShown: false,
//       });
//     }, [showWebView])
//   );

//   const handlePaymentSuccess = async () => {
//     setShowWebView(false);
//     setPaymentUrl(null);
//     await saveFormData(formData);
//     clearCart();
//     setShowSuccessOverlay(true);
//     animateSuccess();
//   };

//   const handlePaymentFailure = () => {
//     setShowWebView(false);
//     setPaymentUrl(null);
//     Toast.show({
//       type: "error",
//       text1: "Payment Failed",
//       text2: "Please try again",
//       position: "top",
//       visibilityTime: 4000,
//     });
//   };

//   const handlePaymentError = (errorMessage) => {
//     setPaymentError(errorMessage);
//     Toast.show({
//       type: "error",
//       text1: "Payment Error",
//       text2: errorMessage || "An error occurred",
//       position: "top",
//     });
//   };

//   const handlePayment = async () => {
//     if (isProcessing || !validateForm()) return;

//     try {
//       const netInfo = await NetInfo.fetch();
//       if (!netInfo.isConnected) {
//         Toast.show({
//           type: "error",
//           text1: "No Internet Connection",
//           text2: "Please check your connection",
//           position: "top",
//         });
//         return;
//       }

//       setIsProcessing(true);
//       setPaymentError(null);

//       const currentDate = new Date()
//         .toISOString()
//         .replace(/[^0-9]/g, "")
//         .slice(0, 14);
//       const randomSuffix = Math.random().toString(36).slice(2, 6);
//       const orderId = `ORD${currentDate}${randomSuffix}`;
//       const txnHDR = `${Date.now()}${Math.floor(Math.random() * 10000)}`;
//       const rndnum = Math.random().toString(36).slice(2);

//       const sequence = `${MerchUID}|${orderId}|${SURL}|${FURL}|${finalTotal.toFixed(
//         3
//       )}|GEN|${SECRET_KEY}|${rndnum}`;
//       const hashMac = CryptoJS.SHA512(sequence).toString(CryptoJS.enc.Hex);

//       const payload = {
//         DBRqst: "PY_ECom",
//         Do_Appinfo: {
//           APIVer: "2.1",
//           APPTyp: "MOB",
//           AppVer: "1.0",
//           Country: "KW",
//           OS: Platform.OS === "ios" ? "iOS" : "Android",
//           DevcType: "5",
//           HsCode: "",
//           IPAddrs: "",
//           MdlID: "",
//           UsrSessID: "",
//         },
//         Do_MerchDtl: {
//           BKY_PRDENUM: "ECom",
//           FURL: FURL,
//           MerchUID: MerchUID,
//           SURL: SURL,
//         },
//         Do_PyrDtl: {
//           Pyr_MPhone: formData.phone.replace(/[^\d]/g, ""),
//           ISDNCD: "965",
//           Pyr_Name: `${formData.firstName} ${formData.lastName}`,
//         },
//         Do_TxnDtl: [
//           {
//             SubMerchUID: MerchUID,
//             Txn_AMT: finalTotal.toFixed(3),
//           },
//         ],
//         Do_TxnHdr: {
//           BKY_Txn_UID: "",
//           Merch_Txn_UID: orderId,
//           PayFor: "ECom",
//           PayMethod: "KNET",
//           Txn_HDR: txnHDR,
//           hashMac: hashMac,
//         },
//         Do_MoreDtl: {
//           Cust_Data1: JSON.stringify({
//             orderDetails: {
//               items: items.map((item) => ({
//                 id: item.documentId,
//                 name: item.name,
//                 quantity: item.quantity,
//                 price: (item.salesPrice || item.price).toFixed(3),
//               })),
//               subtotal: total.toFixed(3),
//               discount: discount.toFixed(3),
//               shippingFee: shippingFee.toFixed(3),
//               total: finalTotal.toFixed(3),
//               orderDate: new Date().toISOString(),
//               expectedDelivery: new Date(
//                 Date.now() + 24 * 60 * 60 * 1000
//               ).toISOString(),
//             },
//             customerInfo: {
//               firstName: formData.firstName,
//               lastName: formData.lastName,
//               address: formData.address,
//               city: formData.city,
//               state: formData.state,
//               postCode: formData.postCode,
//               email: formData.email,
//               phone: formData.phone,
//             },
//           }),
//           Cust_Data2: "",
//           Cust_Data3: "",
//         },
//       };

//       const response = await fetch(PAYMENT_API_URL, {
//         method: "POST",
//         headers: {
//           "Content-Type": "application/json",
//           Accept: "application/json",
//         },
//         body: JSON.stringify(payload),
//       });

//       if (!response.ok) {
//         throw new Error("Payment service unavailable");
//       }

//       const data = await response.json();
//       console.log(data);

//       if (
//         !data.PayUrl ||
//         typeof data.PayUrl !== "string" ||
//         !data.PayUrl.trim().startsWith("https://") ||
//         data.PayUrl.trim() === ""
//       ) {
//         throw new Error("Invalid payment URL");
//       }

//       setPaymentUrl(data.PayUrl.trim());
//       setShowWebView(true);
//     } catch (error) {
//       const errorMessage = error.message || "Payment failed";
//       setPaymentError(errorMessage);
//       handlePaymentError(errorMessage);
//     } finally {
//       setIsProcessing(false);
//     }
//   };

//   const subtotal = total;
//   const discount = appliedCoupon
//     ? appliedCoupon.type === "percentage"
//       ? (total * appliedCoupon.amount) / 100
//       : appliedCoupon.amount
//     : 0;
//   const finalTotal = (discountedTotal || total) + shippingFee;

//   if (items.length === 0) {
//     router.replace("/(root)/Cart");
//     return null;
//   }

//   return (
//     <SafeAreaView style={[styles.safeArea, { paddingTop: insets.top }]}>
//       <KeyboardAvoidingView
//         behavior={Platform.OS === "ios" ? "padding" : "height"}
//         style={styles.container}
//       >
//         <StatusBar barStyle="dark-content" backgroundColor="#f9fafb" />

//         <View style={styles.header}>
//           <TouchableOpacity
//             onPress={() => router.push("/(root)/Cart")}
//             style={styles.backButton}
//             hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//           >
//             <ChevronLeft color="#E53935" size={28} />
//           </TouchableOpacity>
//           <Text style={styles.headerTitle}>Secure Checkout</Text>
//         </View>

//         <ScrollView
//           style={styles.container}
//           contentContainerStyle={styles.contentContainer}
//           showsVerticalScrollIndicator={false}
//         >
//           <View style={styles.formContainer}>
//             <Text style={styles.formTitle}>Delivery Information</Text>

//             <View style={styles.formRow}>
//               <View style={styles.formColumn}>
//                 <Text style={styles.inputLabel}>First Name *</Text>
//                 <TextInput
//                   style={[
//                     styles.input,
//                     formErrors.firstName && styles.inputError,
//                   ]}
//                   value={formData.firstName}
//                   onChangeText={(text) => {
//                     setFormData((prev) => ({ ...prev, firstName: text }));
//                     if (formErrors.firstName) {
//                       setFormErrors((prev) => ({
//                         ...prev,
//                         firstName: undefined,
//                       }));
//                     }
//                   }}
//                   placeholder="First Name"
//                 />
//                 {formErrors.firstName && (
//                   <Text style={styles.errorText}>{formErrors.firstName}</Text>
//                 )}
//               </View>

//               <View style={styles.formColumn}>
//                 <Text style={styles.inputLabel}>Last Name *</Text>
//                 <TextInput
//                   style={[
//                     styles.input,
//                     formErrors.lastName && styles.inputError,
//                   ]}
//                   value={formData.lastName}
//                   onChangeText={(text) => {
//                     setFormData((prev) => ({ ...prev, lastName: text }));
//                     if (formErrors.lastName) {
//                       setFormErrors((prev) => ({
//                         ...prev,
//                         lastName: undefined,
//                       }));
//                     }
//                   }}
//                   placeholder="Last Name"
//                 />
//                 {formErrors.lastName && (
//                   <Text style={styles.errorText}>{formErrors.lastName}</Text>
//                 )}
//               </View>
//             </View>

//             <View style={styles.formField}>
//               <Text style={styles.inputLabel}>Country</Text>
//               <TextInput style={styles.input} value="Kuwait" editable={false} />
//             </View>

//             <View style={styles.formField}>
//               <Text style={styles.inputLabel}>Address *</Text>
//               <TextInput
//                 style={[styles.input, formErrors.address && styles.inputError]}
//                 value={formData.address}
//                 onChangeText={(text) => {
//                   setFormData((prev) => ({ ...prev, address: text }));
//                   if (formErrors.address) {
//                     setFormErrors((prev) => ({ ...prev, address: undefined }));
//                   }
//                 }}
//                 placeholder="Full Address"
//                 multiline
//               />
//               {formErrors.address && (
//                 <Text style={styles.errorText}>{formErrors.address}</Text>
//               )}
//             </View>

//             <View style={styles.formRow}>
//               <View style={styles.formColumn}>
//                 <Text style={styles.inputLabel}>City</Text>
//                 <TextInput
//                   style={styles.input}
//                   value={formData.city}
//                   onChangeText={(text) =>
//                     setFormData((prev) => ({ ...prev, city: text }))
//                   }
//                   placeholder="City"
//                 />
//               </View>

//               <View style={styles.formColumn}>
//                 <Text style={styles.inputLabel}>State</Text>
//                 <TextInput
//                   style={styles.input}
//                   value={formData.state}
//                   onChangeText={(text) =>
//                     setFormData((prev) => ({ ...prev, state: text }))
//                   }
//                   placeholder="State"
//                 />
//               </View>
//             </View>

//             <View style={styles.formRow}>
//               <View style={styles.formColumn}>
//                 <Text style={styles.inputLabel}>Post Code</Text>
//                 <TextInput
//                   style={styles.input}
//                   value={formData.postCode}
//                   onChangeText={(text) =>
//                     setFormData((prev) => ({ ...prev, postCode: text }))
//                   }
//                   placeholder="Post Code"
//                   keyboardType="numeric"
//                 />
//               </View>

//               <View style={styles.formColumn}>
//                 <Text style={styles.inputLabel}>Phone *</Text>
//                 <TextInput
//                   style={[styles.input, formErrors.phone && styles.inputError]}
//                   value={formData.phone}
//                   onChangeText={(text) => {
//                     const cleaned = text.replace(/[^\d\s-]/g, "");
//                     setFormData((prev) => ({ ...prev, phone: cleaned }));
//                     if (formErrors.phone) {
//                       setFormErrors((prev) => ({ ...prev, phone: undefined }));
//                     }
//                   }}
//                   placeholder="e.g., 50123456"
//                   keyboardType="phone-pad"
//                   maxLength={12}
//                 />
//                 {formErrors.phone ? (
//                   <Text style={styles.errorText}>{formErrors.phone}</Text>
//                 ) : (
//                   <Text style={styles.helperText}>
//                     Kuwait number (8 digits starting with 5, 6, or 9)
//                   </Text>
//                 )}
//               </View>
//             </View>

//             <View style={styles.formField}>
//               <Text style={styles.inputLabel}>Email</Text>
//               <TextInput
//                 style={styles.input}
//                 value={formData.email}
//                 onChangeText={(text) =>
//                   setFormData((prev) => ({ ...prev, email: text }))
//                 }
//                 placeholder="Email Address"
//                 keyboardType="email-address"
//                 autoCapitalize="none"
//               />
//             </View>

//             <Text style={styles.deliveryNote}>
//               Orders will be delivered within the next business day
//             </Text>
//           </View>

//           <View style={styles.card}>
//             <Text style={styles.cardTitle}>Order Summary</Text>
//             {items.map((item) => (
//               <View key={item.documentId} style={styles.itemRow}>
//                 <View style={styles.itemDetails}>
//                   <Text style={styles.itemName} numberOfLines={1}>
//                     {item.name}
//                   </Text>
//                   <Text style={styles.itemQuantity}>Qty: {item.quantity}</Text>
//                 </View>
//                 <Text style={styles.itemPrice}>
//                   {((item.salesPrice || item.price) * item.quantity).toFixed(3)}{" "}
//                   KWD
//                 </Text>
//               </View>
//             ))}

//             <View style={styles.summaryContainer}>
//               <OrderSummaryRow
//                 label="Subtotal"
//                 value={`${subtotal.toFixed(3)} KWD`}
//               />
//               {appliedCoupon && (
//                 <OrderSummaryRow
//                   label={`Discount (${appliedCoupon.code})`}
//                   value={`- ${discount.toFixed(3)} KWD`}
//                   isDiscount
//                 />
//               )}
//               <View style={styles.shippingFeeRow}>
//                 <Text style={styles.summaryLabel}>Shipping Fee</Text>
//                 <View style={styles.shippingFeeValueContainer}>
//                   {isLoadingShippingFee ? (
//                     <ActivityIndicator size="small" color="#10B981" />
//                   ) : shippingFeeError ? (
//                     <Text style={styles.errorValue}>Error loading fee</Text>
//                   ) : (
//                     <Text style={styles.summaryValue}>
//                       {shippingFee.toFixed(3)} KWD
//                     </Text>
//                   )}
//                 </View>
//               </View>
//               <View style={styles.divider} />
//               <OrderSummaryRow
//                 label="Total Amount"
//                 value={`${finalTotal.toFixed(3)} KWD`}
//                 isTotal
//               />
//             </View>
//           </View>

//           <View style={styles.securityCard}>
//             <View style={styles.securityHeader}>
//               <Lock size={20} color="#10B981" />
//               <Text style={styles.securityTitle}>Secure Payment</Text>
//             </View>
//             <Text style={styles.securityText}>
//               • SSL encrypted payment processing
//               {"\n"}• Verified by Bookeey Payment Gateway
//               {"\n"}• Your payment details are protected
//             </Text>
//           </View>

//           <TouchableOpacity
//             style={[
//               styles.payButton,
//               (isProcessing || isLoadingShippingFee) &&
//                 styles.payButtonDisabled,
//             ]}
//             onPress={handlePayment}
//             disabled={isProcessing || isLoadingShippingFee}
//           >
//             {isProcessing ? (
//               <ActivityIndicator color="white" size="small" />
//             ) : (
//               <View style={styles.payButtonContent}>
//                 <CreditCard size={20} color="white" />
//                 <Text style={styles.payButtonText}>
//                   Pay {finalTotal.toFixed(3)} KWD
//                 </Text>
//               </View>
//             )}
//           </TouchableOpacity>
//         </ScrollView>

//         <Modal
//           visible={showWebView}
//           animationType="slide"
//           onRequestClose={handleBackPress}
//         >
//           <SafeAreaView style={styles.modalContainer}>
//             <View style={styles.webViewHeader}>
//               <TouchableOpacity
//                 onPress={handleBackPress}
//                 style={styles.webViewCloseButton}
//                 hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//               >
//                 <ArrowLeft color="#E53935" size={24} />
//               </TouchableOpacity>
//               <View style={styles.webViewTitleContainer}>
//                 <Lock size={16} color="#10B981" />
//                 <Text style={styles.webViewTitle}>Secure Payment</Text>
//               </View>
//             </View>

//             {isWebViewLoading && <PaymentLoadingOverlay />}

//             {paymentUrl && (
//               <WebView
//                 source={{
//                   uri: paymentUrl,
//                   headers: {
//                     "ngrok-skip-browser-warning": "true",
//                   },
//                 }}
//                 injectedJavaScript={injectScript}
//                 onMessage={(event) => {
//                   const { data } = event.nativeEvent;
//                   if (data === "PAYMENT_SUCCESS") {
//                     handlePaymentSuccess();
//                   } else if (data === "PAYMENT_FAILED") {
//                     handlePaymentFailure();
//                   }
//                 }}
//                 onNavigationStateChange={(navState) => {
//                   if (
//                     navState.url.includes("success") ||
//                     navState.url.includes("KfastSuccess")
//                   ) {
//                     handlePaymentSuccess();
//                     return false;
//                   }
//                   if (
//                     navState.url.includes("fail") ||
//                     navState.url.includes("KfastFail")
//                   ) {
//                     handlePaymentFailure();
//                     return false;
//                   }
//                   return true;
//                 }}
//                 onLoadStart={() => setIsWebViewLoading(true)}
//                 onLoadEnd={() => setIsWebViewLoading(false)}
//                 onError={(syntheticEvent) => {
//                   handlePaymentError(syntheticEvent.nativeEvent.description);
//                 }}
//                 style={styles.webView}
//                 incognito={true}
//                 cacheEnabled={false}
//                 domStorageEnabled={true}
//                 javaScriptEnabled={true}
//               />
//             )}
//           </SafeAreaView>
//         </Modal>

//         <Modal visible={showSuccessOverlay} transparent animationType="fade">
//           <View style={styles.successOverlay}>
//             <Animated.View
//               style={[
//                 styles.successContent,
//                 {
//                   transform: [{ scale: successScale }],
//                 },
//               ]}
//             >
//               <Animated.View style={styles.checkmarkContainer}>
//                 <CheckCircle
//                   size={60}
//                   color="#10B981"
//                   style={{
//                     opacity: checkmarkProgress,
//                   }}
//                 />
//               </Animated.View>
//               <Text style={styles.successTitle}>Payment Successful!</Text>
//               <Text style={styles.successMessage}>
//                 Your order has been confirmed
//               </Text>
//             </Animated.View>
//           </View>
//         </Modal>
//       </KeyboardAvoidingView>
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: {
//     flex: 1,
//     backgroundColor: "#f9fafb",
//   },
//   container: {
//     flex: 1,
//   },
//   contentContainer: {
//     padding: 16,
//     paddingBottom: 32,
//   },
//   header: {
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     paddingVertical: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f0f0f0",
//     backgroundColor: "#f9fafb",
//   },
//   headerTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#1f2937",
//     marginLeft: 16,
//   },
//   formContainer: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     ...Platform.select({
//       ios: {
//         shadowColor: "#000",
//         shadowOffset: { width: 0, height: 2 },
//         shadowOpacity: 0.1,
//         shadowRadius: 4,
//       },
//       android: {
//         elevation: 3,
//       },
//     }),
//   },
//   formTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 16,
//   },
//   formRow: {
//     flexDirection: "row",
//     gap: 12,
//     marginBottom: 16,
//   },
//   formColumn: {
//     flex: 1,
//   },
//   formField: {
//     marginBottom: 16,
//   },
//   inputLabel: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#4b5563",
//     marginBottom: 4,
//   },
//   input: {
//     borderWidth: 1,
//     borderColor: "#e5e7eb",
//     borderRadius: 8,
//     padding: 12,
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#1f2937",
//     backgroundColor: "#fff",
//   },
//   inputError: {
//     borderColor: "#ef4444",
//   },
//   errorText: {
//     color: "#ef4444",
//     fontSize: 12,
//     fontFamily: "Cairo",
//     marginTop: 4,
//   },
//   helperText: {
//     fontSize: 12,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//     marginTop: 4,
//   },
//   deliveryNote: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//     marginTop: 16,
//     textAlign: "center",
//   },
//   card: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     ...Platform.select({
//       ios: {
//         shadowColor: "#000",
//         shadowOffset: { width: 0, height: 2 },
//         shadowOpacity: 0.1,
//         shadowRadius: 4,
//       },
//       android: {
//         elevation: 3,
//       },
//     }),
//   },
//   cardTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 16,
//   },
//   itemRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     paddingVertical: 8,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f1f5f9",
//   },
//   itemDetails: {
//     flex: 1,
//     marginRight: 12,
//   },
//   itemName: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   itemQuantity: {
//     fontSize: 12,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//     marginTop: 2,
//   },
//   itemPrice: {
//     fontSize: 14,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//   },
//   summaryContainer: {
//     marginTop: 16,
//     paddingTop: 16,
//     borderTopWidth: 1,
//     borderTopColor: "#e5e7eb",
//   },
//   shippingFeeRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginVertical: 8,
//   },
//   summaryLabel: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4b5563",
//   },
//   summaryValue: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   divider: {
//     height: 1,
//     backgroundColor: "#e5e7eb",
//     marginVertical: 12,
//   },
//   securityCard: {
//     backgroundColor: "#f0fdf4",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 24,
//     borderWidth: 1,
//     borderColor: "#86efac",
//   },
//   securityHeader: {
//     flexDirection: "row",
//     alignItems: "center",
//     marginBottom: 8,
//     gap: 8,
//   },
//   securityTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#047857",
//   },
//   securityText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4b5563",
//     lineHeight: 22,
//   },
//   payButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 12,
//     padding: 16,
//     alignItems: "center",
//     justifyContent: "center",
//     marginTop: 8,
//   },
//   payButtonDisabled: {
//     opacity: 0.6,
//   },
//   payButtonContent: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 8,
//   },
//   payButtonText: {
//     color: "white",
//     fontSize: 16,
//     fontFamily: "Cairo-Bold",
//   },
//   modalContainer: {
//     flex: 1,
//     backgroundColor: "#fff",
//   },
//   webViewHeader: {
//     height: 56,
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     borderBottomWidth: 1,
//     borderBottomColor: "#e5e7eb",
//     backgroundColor: "#f9fafb",
//   },
//   webViewCloseButton: {
//     padding: 8,
//   },
//   webViewTitleContainer: {
//     flex: 1,
//     flexDirection: "row",
//     alignItems: "center",
//     justifyContent: "center",
//     marginRight: 40,
//     gap: 8,
//   },
//   webViewTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   webView: {
//     flex: 1,
//   },
//   loadingOverlay: {
//     ...StyleSheet.absoluteFillObject,
//     backgroundColor: "rgba(255, 255, 255, 0.95)",
//     justifyContent: "center",
//     alignItems: "center",
//     zIndex: 999,
//   },
//   loadingCard: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "80%",
//     maxWidth: 300,
//     ...Platform.select({
//       ios: {
//         shadowColor: "#000",
//         shadowOffset: { width: 0, height: 2 },
//         shadowOpacity: 0.25,
//         shadowRadius: 4,
//       },
//       android: {
//         elevation: 5,
//       },
//     }),
//   },
//   loadingTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   loadingSubtext: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//     marginTop: 8,
//     textAlign: "center",
//   },
//   successOverlay: {
//     flex: 1,
//     backgroundColor: "rgba(0, 0, 0, 0.5)",
//     justifyContent: "center",
//     alignItems: "center",
//   },
//   successContent: {
//     backgroundColor: "white",
//     borderRadius: 20,
//     padding: 24,
//     alignItems: "center",
//     width: SCREEN_WIDTH * 0.8,
//     maxWidth: 320,
//   },
//   checkmarkContainer: {
//     width: 80,
//     height: 80,
//     borderRadius: 40,
//     backgroundColor: "#ecfdf5",
//     justifyContent: "center",
//     alignItems: "center",
//     marginBottom: 16,
//   },
//   successTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#10B981",
//     marginBottom: 8,
//   },
//   successMessage: {
//     fontSize: 16,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//     textAlign: "center",
//   },
// });

/****************************************** */

// import React, { useState, useCallback, useEffect, useRef } from "react";
// import {
//   View,
//   Text,
//   ScrollView,
//   Alert,
//   ActivityIndicator,
//   StyleSheet,
//   Platform,
//   TouchableOpacity,
//   SafeAreaView,
//   BackHandler,
//   Modal,
//   StatusBar,
//   TextInput,
//   KeyboardAvoidingView,
//   Animated,
//   Easing,
// } from "react-native";
// import { router, useNavigation } from "expo-router";
// import { WebView } from "react-native-webview";
// import { useFocusEffect } from "@react-navigation/native";
// import {
//   Shield,
//   CreditCard,
//   ArrowLeft,
//   Lock,
//   ChevronLeft,
//   CheckCircle,
//   XCircle,
// } from "lucide-react-native";
// import Toast from "react-native-toast-message";
// import NetInfo from "@react-native-community/netinfo";
// import * as SecureStore from "expo-secure-store";
// import useCartStore from "../../store/cartStore";
// import { OrderSummaryRow } from "../Components/OrderSummary";
// import useShippingFee from "../hooks/useShippingFee";
// import { useSafeAreaInsets } from "react-native-safe-area-context";
// import CryptoJS from "crypto-js";

// const IS_TEST_ENV = process.env.EXPO_PUBLIC_IS_TEST_ENV === "true";
// const PAYMENT_API_URL = IS_TEST_ENV
//   ? "https://f36b-37-36-175-221.ngrok-free.app/api/payments/initiate"
//   : "https://pg.bookeey.com/internalapi/api/payment/requestLink";

// const MerchUID = "mer2400018";
// const SECRET_KEY = "0623475"; // Verify this matches Bookeey's provided key
// const SURL = "https://app.bookeeypayment.com/success";
// const FURL = "https://app.bookeeypayment.com/failure";
// const FORM_DATA_KEY = "user_checkout_info";

// const injectScript = `
// (function() {
//   ${IS_TEST_ENV ? `document.cookie = "ngrok-skip-browser-warning=true";` : ""}
//   const observer = new MutationObserver(function(mutations) {
//     mutations.forEach(function(mutation) {
//       if (mutation.target.textContent.includes('Payment Successful')) {
//         window.ReactNativeWebView.postMessage('PAYMENT_SUCCESS');
//       } else if (mutation.target.textContent.includes('Payment Failed')) {
//         window.ReactNativeWebView.postMessage('PAYMENT_FAILED');
//       }
//     });
//   });
//   observer.observe(document.body, { childList: true, subtree: true });
// })();
// `;

// const PaymentLoadingOverlay = () => (
//   <View style={styles.loadingOverlay}>
//     <View style={styles.loadingCard}>
//       <ActivityIndicator size="large" color="#10B981" />
//       <Text style={styles.loadingTitle}>Processing Payment</Text>
//       <Text style={styles.loadingSubtext}>Please don't close this window</Text>
//     </View>
//   </View>
// );

// interface FormData {
//   name: string;
//   phone: string;
//   address: string;
// }

// interface FormErrors {
//   name?: string;
//   phone?: string;
//   address?: string;
// }

// const REQUIRED_FIELDS = ["name", "phone", "address"];
// const PHONE_REGEX = /^[569]\d{7}$/;

// const saveFormData = async (data: FormData) => {
//   try {
//     await SecureStore.setItemAsync(FORM_DATA_KEY, JSON.stringify(data));
//   } catch (error) {
//     console.error("Error saving form data:", error);
//   }
// };

// const loadFormData = async (): Promise<FormData | null> => {
//   try {
//     const savedData = await SecureStore.getItemAsync(FORM_DATA_KEY);
//     return savedData ? JSON.parse(savedData) : null;
//   } catch (error) {
//     console.error("Error loading form data:", error);
//     return null;
//   }
// };

// export default function CheckoutPage() {
//   const insets = useSafeAreaInsets();
//   const navigation = useNavigation();
//   const { items, total, discountedTotal, appliedCoupon, clearCart } =
//     useCartStore();
//   const {
//     shippingFee,
//     loading: isLoadingShippingFee,
//     error: shippingFeeError,
//   } = useShippingFee();

//   const successScale = useRef(new Animated.Value(0)).current;
//   const successOpacity = useRef(new Animated.Value(0)).current;
//   const checkmarkStroke = useRef(new Animated.Value(0)).current;

//   const [formData, setFormData] = useState<FormData>({
//     name: "",
//     phone: "",
//     address: "",
//   });
//   const [formErrors, setFormErrors] = useState<FormErrors>({});
//   const [isProcessing, setIsProcessing] = useState(false);
//   const [paymentError, setPaymentError] = useState<string | null>(null);
//   const [showWebView, setShowWebView] = useState(false);
//   const [paymentUrl, setPaymentUrl] = useState<string | null>(null);
//   const [isWebViewLoading, setIsWebViewLoading] = useState(true);
//   const [showSuccessModal, setShowSuccessModal] = useState(false);
//   const [showFailureModal, setShowFailureModal] = useState(false);

//   useEffect(() => {
//     const loadSavedData = async () => {
//       const savedData = await loadFormData();
//       if (savedData) {
//         setFormData(savedData);
//       }
//     };
//     loadSavedData();
//   }, []);

//   useEffect(() => {
//     if (items.length === 0) {
//       router.replace("/(root)/Cart");
//     }
//   }, [items.length]);

//   const validateForm = (): boolean => {
//     const errors: FormErrors = {};
//     let isValid = true;

//     REQUIRED_FIELDS.forEach((field) => {
//       if (!formData[field as keyof FormData]) {
//         errors[field as keyof FormErrors] = `${
//           field.charAt(0).toUpperCase() + field.slice(1)
//         } is required`;
//         isValid = false;
//       }
//     });

//     if (formData.phone) {
//       const cleanPhone = formData.phone.replace(/[\s-]/g, "");
//       const phoneNumber = cleanPhone.replace(/^(\+965|965)/, "");
//       if (!PHONE_REGEX.test(phoneNumber)) {
//         errors.phone =
//           "Please enter a valid Kuwait phone number (e.g., 50123456)";
//         isValid = false;
//       }
//     }

//     setFormErrors(errors);
//     if (!isValid) {
//       Toast.show({
//         type: "error",
//         text1: "Form Validation Error",
//         text2: "Please fill in all required fields correctly",
//         position: "top",
//       });
//     }
//     return isValid;
//   };

//   const animateSuccess = () => {
//     Animated.parallel([
//       Animated.spring(successScale, {
//         toValue: 1,
//         friction: 8,
//         tension: 40,
//         useNativeDriver: true,
//       }),
//       Animated.timing(successOpacity, {
//         toValue: 1,
//         duration: 200,
//         useNativeDriver: true,
//       }),
//       Animated.timing(checkmarkStroke, {
//         toValue: 1,
//         duration: 600,
//         easing: Easing.bezier(0.65, 0, 0.45, 1),
//         useNativeDriver: true,
//       }),
//     ]).start();
//   };

//   const handleBackPress = useCallback(() => {
//     if (showWebView) {
//       Alert.alert(
//         "Cancel Payment?",
//         "Are you sure you want to cancel? This payment will not be processed.",
//         [
//           { text: "Continue Payment", style: "cancel" },
//           {
//             text: "Cancel Payment",
//             style: "destructive",
//             onPress: () => {
//               setShowWebView(false);
//               setPaymentUrl(null);
//               setShowFailureModal(true);
//             },
//           },
//         ]
//       );
//       return true;
//     }
//     router.push("/(root)/Cart");
//     return true;
//   }, [showWebView]);

//   useEffect(() => {
//     const backHandler = BackHandler.addEventListener(
//       "hardwareBackPress",
//       handleBackPress
//     );
//     return () => backHandler.remove();
//   }, [handleBackPress]);

//   useFocusEffect(
//     useCallback(() => {
//       navigation.setOptions({
//         gestureEnabled: !showWebView,
//         headerShown: false,
//       });
//     }, [showWebView])
//   );

//   const handlePaymentSuccess = async () => {
//     await saveFormData(formData);
//     clearCart();
//     setShowWebView(false);
//     setPaymentUrl(null);
//     successScale.setValue(0);
//     successOpacity.setValue(0);
//     checkmarkStroke.setValue(0);
//     setShowSuccessModal(true);
//     animateSuccess();
//     setTimeout(() => {
//       setShowSuccessModal(false);
//       router.push("/(root)/Cart");
//     }, 2000);
//   };

//   const handlePaymentFailure = () => {
//     setShowWebView(false);
//     setPaymentUrl(null);
//     setShowFailureModal(true);
//   };

//   const handlePaymentError = (errorMessage: string) => {
//     setPaymentError(errorMessage);
//     setShowFailureModal(true);
//   };

//   const subtotal = total;
//   const discount = appliedCoupon
//     ? appliedCoupon.type === "percentage"
//       ? (total * appliedCoupon.amount) / 100
//       : appliedCoupon.amount
//     : 0;
//   const finalTotal = (discountedTotal || total) + shippingFee;

//   const handlePayment = async () => {
//     if (isProcessing || !validateForm()) return;

//     try {
//       const netInfo = await NetInfo.fetch();
//       if (!netInfo.isConnected) {
//         Toast.show({
//           type: "error",
//           text1: "No Internet Connection",
//           text2: "Please check your connection and try again",
//           position: "top",
//         });
//         return;
//       }

//       setIsProcessing(true);
//       setPaymentError(null);

//       const currentDate = new Date()
//         .toISOString()
//         .replace(/[^0-9]/g, "")
//         .slice(0, 14);
//       const randomSuffix = Math.random().toString(36).slice(2, 6);
//       const orderId = `ORD${currentDate}${randomSuffix}`;

//       let payload;
//       let headers = {
//         "Content-Type": "application/json",
//         Accept: "application/json",
//       };

//       if (IS_TEST_ENV) {
//         payload = {
//           amount: Number(finalTotal.toFixed(3)),
//           orderId,
//           customerInfo: {
//             platform: Platform.OS.toUpperCase(),
//             items: items.map((item) => ({
//               id: item.documentId,
//               name: item.name,
//               quantity: item.quantity,
//               price: Number((item.salesPrice || item.price).toFixed(3)),
//             })),
//           },
//         };
//         headers["ngrok-skip-browser-warning"] = "true";
//       } else {
//         const txnHDR = `${Date.now()}${Math.floor(Math.random() * 10000)}`;
//         const rndnum = Math.random().toString(36).slice(2);
//         const sequence = `${MerchUID}|${orderId}|${SURL}|${FURL}|${finalTotal.toFixed(
//           3
//         )}|GEN|${SECRET_KEY}|${rndnum}`;
//         const hashMac = CryptoJS.SHA512(sequence).toString(CryptoJS.enc.Hex);

//         payload = {
//           DBRqst: "PY_ECom",
//           Do_Appinfo: {
//             APIVer: "2.1",
//             APPTyp: "MOB",
//             AppVer: "1.0",
//             Country: "KW",
//             OS: Platform.OS === "ios" ? "iOS" : "Android",
//           },
//           Do_MerchDtl: {
//             BKY_PRDENUM: "ECom",
//             FURL: FURL,
//             MerchUID: MerchUID,
//             SURL: SURL,
//           },
//           Do_PyrDtl: {
//             Pyr_Name: formData.name,
//             Pyr_MPhone: formData.phone.replace(/[^\d]/g, ""),
//             ISDNCD: "965",
//           },
//           Do_TxnDtl: [
//             {
//               SubMerchUID: MerchUID,
//               Txn_AMT: finalTotal.toFixed(3),
//             },
//           ],
//           Do_TxnHdr: {
//             Merch_Txn_UID: orderId,
//             PayFor: "ECom",
//             PayMethod: "KNET",
//             Txn_HDR: txnHDR,
//             hashMac: hashMac,
//           },
//         };
//       }

//       const response = await fetch(PAYMENT_API_URL, {
//         method: "POST",
//         headers: headers,
//         body: JSON.stringify(payload),
//       });

//       if (!response.ok) {
//         throw new Error("Payment service unavailable");
//       }

//       const data = await response.json();
//       console.log("Payment response:", data); // For debugging
//       const paymentUrl = IS_TEST_ENV ? data?.paymentUrl : data?.PayUrl;

//       if (!paymentUrl || !paymentUrl.startsWith("https://")) {
//         throw new Error("Invalid or insecure payment URL");
//       }

//       setPaymentUrl(paymentUrl);
//       setShowWebView(true);
//     } catch (error: any) {
//       const errorMessage = error.message || "Payment failed";
//       setPaymentError(errorMessage);
//       handlePaymentError(errorMessage);
//     } finally {
//       setIsProcessing(false);
//     }
//   };

//   if (items.length === 0) {
//     return null;
//   }

//   return (
//     <SafeAreaView style={[styles.safeArea, { paddingTop: insets.top }]}>
//       <KeyboardAvoidingView
//         behavior={Platform.OS === "ios" ? "padding" : "height"}
//         style={styles.container}
//       >
//         <StatusBar barStyle="dark-content" backgroundColor="#f9fafb" />
//         <View style={styles.header}>
//           <TouchableOpacity
//             onPress={() => router.push("/(root)/Cart")}
//             style={styles.backButton}
//             hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//           >
//             <ChevronLeft color="#E53935" size={28} />
//           </TouchableOpacity>
//           <Text style={styles.headerTitle}>Secure Checkout</Text>
//         </View>

//         <ScrollView
//           style={styles.container}
//           contentContainerStyle={styles.contentContainer}
//           showsVerticalScrollIndicator={false}
//         >
//           {/* Form Section */}
//           <View style={styles.formContainer}>
//             <Text style={styles.formTitle}>Delivery Information</Text>

//             <View style={styles.formField}>
//               <Text style={styles.inputLabel}>Full Name *</Text>
//               <TextInput
//                 style={[styles.input, formErrors.name && styles.inputError]}
//                 value={formData.name}
//                 onChangeText={(text) => {
//                   setFormData((prev) => ({ ...prev, name: text }));
//                   if (formErrors.name) {
//                     setFormErrors((prev) => ({ ...prev, name: undefined }));
//                   }
//                 }}
//                 placeholder="Enter your full name"
//               />
//               {formErrors.name && (
//                 <Text style={styles.errorText}>{formErrors.name}</Text>
//               )}
//             </View>

//             <View style={styles.formField}>
//               <Text style={styles.inputLabel}>Phone Number *</Text>
//               <TextInput
//                 style={[styles.input, formErrors.phone && styles.inputError]}
//                 value={formData.phone}
//                 onChangeText={(text) => {
//                   const cleaned = text.replace(/[^\d\s-]/g, "");
//                   setFormData((prev) => ({ ...prev, phone: cleaned }));
//                   if (formErrors.phone) {
//                     setFormErrors((prev) => ({ ...prev, phone: undefined }));
//                   }
//                 }}
//                 placeholder="e.g., 50123456"
//                 keyboardType="phone-pad"
//                 maxLength={12}
//               />
//               {formErrors.phone ? (
//                 <Text style={styles.errorText}>{formErrors.phone}</Text>
//               ) : (
//                 <Text style={styles.helperText}>
//                   Kuwait number (8 digits starting with 5, 6, or 9)
//                 </Text>
//               )}
//             </View>

//             <View style={styles.formField}>
//               <Text style={styles.inputLabel}>Delivery Address *</Text>
//               <TextInput
//                 style={[styles.input, formErrors.address && styles.inputError]}
//                 value={formData.address}
//                 onChangeText={(text) => {
//                   setFormData((prev) => ({ ...prev, address: text }));
//                   if (formErrors.address) {
//                     setFormErrors((prev) => ({ ...prev, address: undefined }));
//                   }
//                 }}
//                 placeholder="Enter your delivery address"
//                 multiline
//               />
//               {formErrors.address && (
//                 <Text style={styles.errorText}>{formErrors.address}</Text>
//               )}
//             </View>

//             <Text style={styles.deliveryNote}>
//               Orders will be delivered within the next business day
//             </Text>
//           </View>

//           {/* Order Summary */}
//           <View style={styles.card}>
//             <View style={styles.cardTitleContainer}>
//               <Text style={styles.cardTitle}>Order Summary</Text>
//               <Text style={styles.itemCount}>{items.length} items</Text>
//             </View>
//             {items.map((item) => (
//               <View key={item.documentId} style={styles.itemRow}>
//                 <View style={styles.itemDetails}>
//                   <Text style={styles.itemName} numberOfLines={1}>
//                     {item.name}
//                   </Text>
//                   <Text style={styles.itemQuantity}>Qty: {item.quantity}</Text>
//                 </View>
//                 <Text style={styles.itemPrice}>
//                   {((item.salesPrice || item.price) * item.quantity).toFixed(3)}{" "}
//                   KWD
//                 </Text>
//               </View>
//             ))}

//             <View style={styles.summaryContainer}>
//               <OrderSummaryRow
//                 label="Subtotal"
//                 value={`${subtotal.toFixed(3)} KWD`}
//               />
//               {appliedCoupon && (
//                 <OrderSummaryRow
//                   label={`Discount (${appliedCoupon.code})`}
//                   value={`- ${discount.toFixed(3)} KWD`}
//                   isDiscount
//                 />
//               )}
//               <View style={styles.shippingFeeRow}>
//                 <Text style={styles.summaryLabel}>Shipping Fee</Text>
//                 <View style={styles.shippingFeeValueContainer}>
//                   {isLoadingShippingFee ? (
//                     <ActivityIndicator size="small" color="#10B981" />
//                   ) : shippingFeeError ? (
//                     <Text style={styles.errorValue}>Error loading fee</Text>
//                   ) : (
//                     <Text style={styles.summaryValue}>
//                       {`${shippingFee.toFixed(3)} KWD`}
//                     </Text>
//                   )}
//                 </View>
//               </View>
//               <View style={styles.divider} />
//               <OrderSummaryRow
//                 label="Total Amount"
//                 value={`${finalTotal.toFixed(3)} KWD`}
//                 isTotal
//                 isLoading={isLoadingShippingFee}
//               />
//             </View>
//           </View>

//           {/* Security Info */}
//           <View style={styles.securityCard}>
//             <View style={styles.securityHeader}>
//               <Lock size={20} color="#10B981" />
//               <Text style={styles.securityTitle}>Secure Payment</Text>
//             </View>
//             <Text style={styles.securityText}>
//               • SSL encrypted payment processing • Verified by Bookeey Payment
//               Gateway • Your payment details are protected
//             </Text>
//           </View>

//           {/* Pay Button */}
//           <TouchableOpacity
//             style={[
//               styles.payButton,
//               (isProcessing || isLoadingShippingFee) &&
//                 styles.payButtonDisabled,
//             ]}
//             onPress={handlePayment}
//             disabled={isProcessing || isLoadingShippingFee}
//           >
//             {isProcessing ? (
//               <ActivityIndicator color="white" size="small" />
//             ) : (
//               <View style={styles.payButtonContent}>
//                 <CreditCard size={20} color="white" />
//                 <Text style={styles.payButtonText}>
//                   Pay {finalTotal.toFixed(3)} KWD
//                 </Text>
//               </View>
//             )}
//           </TouchableOpacity>
//           {paymentError && <Text style={styles.errorText}>{paymentError}</Text>}
//         </ScrollView>

//         {/* WebView Modal */}
//         <Modal
//           visible={showWebView}
//           animationType="slide"
//           onRequestClose={handleBackPress}
//         >
//           <SafeAreaView style={styles.modalContainer}>
//             <View style={styles.webViewHeader}>
//               <TouchableOpacity
//                 onPress={handleBackPress}
//                 style={styles.webViewCloseButton}
//                 hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//               >
//                 <ArrowLeft color="#E53935" size={24} />
//               </TouchableOpacity>
//               <View style={styles.webViewTitleContainer}>
//                 <Lock size={16} color="#10B981" />
//                 <Text style={styles.webViewTitle}>Secure Payment</Text>
//               </View>
//             </View>
//             {isWebViewLoading && <PaymentLoadingOverlay />}
//             {paymentUrl && (
//               <WebView
//                 source={{ uri: paymentUrl }}
//                 injectedJavaScript={injectScript}
//                 onMessage={(event) => {
//                   const { data } = event.nativeEvent;
//                   if (data === "PAYMENT_SUCCESS") {
//                     handlePaymentSuccess();
//                   } else if (data === "PAYMENT_FAILED") {
//                     handlePaymentFailure();
//                   }
//                 }}
//                 onLoadStart={() => setIsWebViewLoading(true)}
//                 onLoadEnd={() => setIsWebViewLoading(false)}
//                 onError={(syntheticEvent) => {
//                   handlePaymentError(syntheticEvent.nativeEvent.description);
//                 }}
//                 onHttpError={() => {
//                   handlePaymentError("Connection error");
//                 }}
//                 style={styles.webView}
//                 incognito={true}
//                 cacheEnabled={false}
//                 domStorageEnabled={true}
//                 javaScriptEnabled={true}
//                 startInLoadingState={true}
//               />
//             )}
//           </SafeAreaView>
//         </Modal>

//         {/* Success Modal */}
//         <Modal
//           visible={showSuccessModal}
//           transparent={true}
//           animationType="fade"
//           onRequestClose={() => setShowSuccessModal(false)}
//         >
//           <View style={styles.modalBackground}>
//             <Animated.View
//               style={[
//                 styles.modalContent,
//                 styles.successModal,
//                 {
//                   transform: [{ scale: successScale }],
//                   opacity: successOpacity,
//                 },
//               ]}
//             >
//               <View style={styles.checkmarkContainer}>
//                 <Animated.View
//                   style={[
//                     styles.checkmarkCircle,
//                     { transform: [{ scale: successScale }] },
//                   ]}
//                 >
//                   <Animated.View
//                     style={[
//                       styles.checkmarkStroke,
//                       { opacity: checkmarkStroke },
//                     ]}
//                   >
//                     <CheckCircle size={48} color="#10B981" />
//                   </Animated.View>
//                 </Animated.View>
//               </View>
//               <Animated.Text
//                 style={[styles.modalTitle, { opacity: successOpacity }]}
//               >
//                 Payment Successful!
//               </Animated.Text>
//               <Animated.Text
//                 style={[styles.modalText, { opacity: successOpacity }]}
//               >
//                 Your order has been placed successfully.
//               </Animated.Text>
//             </Animated.View>
//           </View>
//         </Modal>

//         {/* Failure Modal */}
//         <Modal
//           visible={showFailureModal}
//           transparent={true}
//           animationType="fade"
//           onRequestClose={() => setShowFailureModal(false)}
//         >
//           <View style={styles.modalBackground}>
//             <View style={[styles.modalContent, styles.failureModal]}>
//               <XCircle size={48} color="#E53935" />
//               <Text style={styles.modalTitle}>Payment Failed</Text>
//               <Text style={styles.modalText}>
//                 {paymentError ||
//                   "There was an issue with your payment. Please try again."}
//               </Text>
//               <TouchableOpacity
//                 style={styles.modalButton}
//                 onPress={() => setShowFailureModal(false)}
//               >
//                 <Text style={styles.modalButtonText}>Try Again</Text>
//               </TouchableOpacity>
//             </View>
//           </View>
//         </Modal>
//       </KeyboardAvoidingView>
//       <Toast />
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: {
//     flex: 1,
//     backgroundColor: "#f9fafb",
//   },
//   container: {
//     flex: 1,
//   },
//   contentContainer: {
//     padding: 16,
//     paddingBottom: 100,
//   },
//   header: {
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     paddingVertical: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f0f0f0",
//     backgroundColor: "#f9fafb",
//   },
//   backButton: {
//     padding: 4,
//   },
//   headerTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#1f2937",
//     marginLeft: 16,
//   },
//   formContainer: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   formTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 16,
//   },
//   formField: {
//     marginBottom: 16,
//   },
//   inputLabel: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#4b5563",
//     marginBottom: 4,
//   },
//   input: {
//     borderWidth: 1,
//     borderColor: "#e5e7eb",
//     borderRadius: 8,
//     padding: 12,
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#1f2937",
//     backgroundColor: "#fff",
//   },
//   inputError: {
//     borderColor: "#ef4444",
//   },
//   errorText: {
//     color: "#ef4444",
//     fontSize: 12,
//     fontFamily: "Cairo",
//     marginTop: 4,
//   },
//   helperText: {
//     fontSize: 12,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//     marginTop: 4,
//   },
//   deliveryNote: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//     marginTop: 16,
//     textAlign: "center",
//   },
//   card: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   cardTitleContainer: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 16,
//   },
//   cardTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//   },
//   itemCount: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//   },
//   itemRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 12,
//     paddingBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f1f5f9",
//   },
//   itemDetails: {
//     flex: 1,
//     paddingRight: 8,
//   },
//   itemName: {
//     fontSize: 15,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//     marginBottom: 4,
//   },
//   itemQuantity: {
//     fontSize: 13,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//   },
//   itemPrice: {
//     fontSize: 15,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//   },
//   summaryContainer: {
//     marginTop: 16,
//     paddingTop: 16,
//     borderTopWidth: 1,
//     borderTopColor: "#e5e7eb",
//   },
//   divider: {
//     height: 1,
//     backgroundColor: "#e5e7eb",
//     marginVertical: 12,
//   },
//   securityCard: {
//     backgroundColor: "#f0fdf4",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 24,
//     borderWidth: 1,
//     borderColor: "#86efac",
//   },
//   securityHeader: {
//     flexDirection: "row",
//     alignItems: "center",
//     marginBottom: 12,
//     gap: 8,
//   },
//   securityTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#047857",
//   },
//   securityText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4B5563",
//     lineHeight: 22,
//   },
//   payButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 12,
//     padding: 18,
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 12,
//   },
//   payButtonDisabled: {
//     opacity: 0.6,
//   },
//   payButtonContent: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 10,
//   },
//   payButtonText: {
//     color: "white",
//     fontSize: 16,
//     fontFamily: "Cairo-Bold",
//   },
//   modalBackground: {
//     flex: 1,
//     backgroundColor: "rgba(0, 0, 0, 0.5)",
//     justifyContent: "center",
//     alignItems: "center",
//   },
//   modalContainer: {
//     flex: 1,
//     backgroundColor: "#fff",
//   },
//   modalContent: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "80%",
//     maxWidth: 300,
//   },
//   successModal: {
//     backgroundColor: "#FFFFFF",
//     borderColor: "#10B981",
//     borderWidth: 2,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//   },
//   failureModal: {
//     borderColor: "#E53935",
//     borderWidth: 2,
//   },
//   checkmarkContainer: {
//     width: 80,
//     height: 80,
//     marginBottom: 16,
//     alignItems: "center",
//     justifyContent: "center",
//   },
//   checkmarkCircle: {
//     width: 80,
//     height: 80,
//     borderRadius: 40,
//     backgroundColor: "#E8FFF5",
//     alignItems: "center",
//     justifyContent: "center",
//   },
//   checkmarkStroke: {
//     transform: [{ scale: 1.2 }],
//   },
//   modalTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   modalText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   modalButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 8,
//     paddingVertical: 12,
//     paddingHorizontal: 24,
//     marginTop: 24,
//   },
//   modalButtonText: {
//     color: "white",
//     fontSize: 16,
//     fontFamily: "Cairo-Bold",
//   },
//   webView: {
//     flex: 1,
//   },
//   webViewHeader: {
//     height: 56,
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     borderBottomWidth: 1,
//     borderBottomColor: "#E5E7EB",
//     backgroundColor: "#f9fafb",
//   },
//   webViewCloseButton: {
//     padding: 8,
//   },
//   webViewTitleContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 8,
//     flex: 1,
//     justifyContent: "center",
//     marginRight: 40,
//   },
//   webViewTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   loadingOverlay: {
//     position: "absolute",
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//     backgroundColor: "rgba(255,255,255,0.95)",
//     justifyContent: "center",
//     alignItems: "center",
//     zIndex: 1000,
//   },
//   loadingCard: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//     width: "80%",
//     maxWidth: 300,
//   },
//   loadingTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   loadingSubtext: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   errorText: {
//     color: "#DC2626",
//     textAlign: "center",
//     marginTop: 8,
//     fontFamily: "Cairo",
//   },
//   errorValue: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#DC2626",
//   },
//   shippingFeeRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginVertical: 4,
//   },
//   shippingFeeValueContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     justifyContent: "flex-end",
//   },
//   summaryLabel: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4b5563",
//   },
//   summaryValue: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
// });

/**************************************** */

// import React, { useState, useCallback, useEffect, useRef } from "react";
// import {
//   View,
//   Text,
//   ScrollView,
//   Alert,
//   ActivityIndicator,
//   StyleSheet,
//   Platform,
//   TouchableOpacity,
//   SafeAreaView,
//   BackHandler,
//   Modal,
//   StatusBar,
//   TextInput,
//   KeyboardAvoidingView,
//   Animated,
//   Easing,
// } from "react-native";
// import { router, useNavigation } from "expo-router";
// import { WebView } from "react-native-webview";
// import { useFocusEffect } from "@react-navigation/native";
// import {
//   Shield,
//   CreditCard,
//   ArrowLeft,
//   Lock,
//   ChevronLeft,
//   CheckCircle,
//   XCircle,
//   User,
//   Phone,
//   Mail,
//   MapPin,
// } from "lucide-react-native";
// import Toast from "react-native-toast-message";
// import NetInfo from "@react-native-community/netinfo";
// import * as SecureStore from "expo-secure-store";
// import useCartStore from "../../store/cartStore";
// import { OrderSummaryRow } from "../Components/OrderSummary";
// import useShippingFee from "../hooks/useShippingFee";
// import { useSafeAreaInsets } from "react-native-safe-area-context";
// import CryptoJS from "crypto-js";

// const IS_TEST_ENV = process.env.EXPO_PUBLIC_IS_TEST_ENV === "true";
// const PAYMENT_API_URL = IS_TEST_ENV
//   ? "https://4f54-37-36-175-221.ngrok-free.app/api/payments/initiate"
//   : "https://pg.bookeey.com/internalapi/api/payment/requestLink";

// const MerchUID = "mer2400018";
// const SECRET_KEY = "0623475"; // Verify this matches Bookeey's provided key
// const SURL = "https://app.bookeeypayment.com/success";
// const FURL = "https://app.bookeeypayment.com/failure";
// const FORM_DATA_KEY = "user_checkout_info";

// const PaymentLoadingOverlay = () => (
//   <View style={styles.loadingOverlay}>
//     <View style={styles.loadingCard}>
//       <ActivityIndicator size="large" color="#10B981" />
//       <Text style={styles.loadingTitle}>Processing Payment</Text>
//       <Text style={styles.loadingSubtext}>Please don't close this window</Text>
//     </View>
//   </View>
// );

// interface FormData {
//   firstName: string;
//   lastName: string;
//   phone: string;
//   email: string;
//   state: string;
//   city: string;
//   address: string;
// }

// interface FormErrors {
//   firstName?: string;
//   lastName?: string;
//   phone?: string;
//   email?: string;
//   state?: string;
//   city?: string;
//   address?: string;
// }

// const REQUIRED_FIELDS = [
//   "firstName",
//   "lastName",
//   "phone",
//   "email",
//   "state",
//   "city",
//   "address",
// ];
// const PHONE_REGEX = /^[569]\d{7}$/;
// const EMAIL_REGEX = /\S+@\S+\.\S+/;

// const saveFormData = async (data: FormData) => {
//   try {
//     await SecureStore.setItemAsync(FORM_DATA_KEY, JSON.stringify(data));
//   } catch (error) {
//     console.error("Error saving form data:", error);
//   }
// };

// const loadFormData = async (): Promise<FormData | null> => {
//   try {
//     const savedData = await SecureStore.getItemAsync(FORM_DATA_KEY);
//     return savedData ? JSON.parse(savedData) : null;
//   } catch (error) {
//     console.error("Error loading form data:", error);
//     return null;
//   }
// };

// export default function CheckoutPage() {
//   const insets = useSafeAreaInsets();
//   const navigation = useNavigation();
//   const { items, total, discountedTotal, appliedCoupon, clearCart } =
//     useCartStore();
//   const {
//     shippingFee,
//     loading: isLoadingShippingFee,
//     error: shippingFeeError,
//   } = useShippingFee();

//   const successScale = useRef(new Animated.Value(0)).current;
//   const successOpacity = useRef(new Animated.Value(0)).current;
//   const checkmarkStroke = useRef(new Animated.Value(0)).current;

//   const [formData, setFormData] = useState<FormData>({
//     firstName: "",
//     lastName: "",
//     phone: "",
//     email: "",
//     state: "",
//     city: "",
//     address: "",
//   });
//   const [formErrors, setFormErrors] = useState<FormErrors>({});
//   const [isProcessing, setIsProcessing] = useState(false);
//   const [paymentError, setPaymentError] = useState<string | null>(null);
//   const [showWebView, setShowWebView] = useState(false);
//   const [paymentUrl, setPaymentUrl] = useState<string | null>(null);
//   const [isWebViewLoading, setIsWebViewLoading] = useState(true);
//   const [showSuccessModal, setShowSuccessModal] = useState(false);
//   const [showFailureModal, setShowFailureModal] = useState(false);

//   useEffect(() => {
//     const loadSavedData = async () => {
//       const savedData = await loadFormData();
//       if (savedData) {
//         setFormData(savedData);
//       }
//     };
//     loadSavedData();
//   }, []);

//   useEffect(() => {
//     if (items.length === 0) {
//       router.replace("/(root)/Cart");
//     }
//   }, [items.length]);

//   const validateForm = (): boolean => {
//     const errors: FormErrors = {};
//     let isValid = true;

//     if (!formData.firstName.trim()) {
//       errors.firstName = "First name is required";
//       isValid = false;
//     }
//     if (!formData.lastName.trim()) {
//       errors.lastName = "Last name is required";
//       isValid = false;
//     }
//     if (!formData.email.trim()) {
//       errors.email = "Email is required";
//       isValid = false;
//     } else if (!EMAIL_REGEX.test(formData.email)) {
//       errors.email = "Invalid email address";
//       isValid = false;
//     }
//     if (!formData.phone.trim()) {
//       errors.phone = "Phone number is required";
//       isValid = false;
//     } else {
//       const cleanPhone = formData.phone
//         .replace(/[\s-]/g, "")
//         .replace(/^(\+965|965)/, "");
//       if (!PHONE_REGEX.test(cleanPhone)) {
//         errors.phone = "Invalid Kuwait phone number (e.g., 50123456)";
//         isValid = false;
//       }
//     }
//     if (!formData.state.trim()) {
//       errors.state = "State is required";
//       isValid = false;
//     }
//     if (!formData.city.trim()) {
//       errors.city = "City is required";
//       isValid = false;
//     }
//     if (!formData.address.trim()) {
//       errors.address = "Delivery address is required";
//       isValid = false;
//     }

//     setFormErrors(errors);
//     if (!isValid) {
//       Toast.show({
//         type: "error",
//         text1: "Form Validation Error",
//         text2: "Please fill in all required fields correctly",
//         position: "top",
//       });
//     }
//     return isValid;
//   };

//   const animateSuccess = () => {
//     Animated.parallel([
//       Animated.spring(successScale, {
//         toValue: 1,
//         friction: 8,
//         tension: 40,
//         useNativeDriver: true,
//       }),
//       Animated.timing(successOpacity, {
//         toValue: 1,
//         duration: 200,
//         useNativeDriver: true,
//       }),
//       Animated.timing(checkmarkStroke, {
//         toValue: 1,
//         duration: 600,
//         easing: Easing.bezier(0.65, 0, 0.45, 1),
//         useNativeDriver: true,
//       }),
//     ]).start();
//   };

//   const handleBackPress = useCallback(() => {
//     if (showWebView) {
//       Alert.alert(
//         "Cancel Payment?",
//         "Are you sure you want to cancel? This payment will not be processed.",
//         [
//           { text: "Continue Payment", style: "cancel" },
//           {
//             text: "Cancel Payment",
//             style: "destructive",
//             onPress: () => {
//               setShowWebView(false);
//               setPaymentUrl(null);
//               setShowFailureModal(true);
//             },
//           },
//         ]
//       );
//       return true;
//     }
//     router.push("/(root)/Cart");
//     return true;
//   }, [showWebView]);

//   useEffect(() => {
//     const backHandler = BackHandler.addEventListener(
//       "hardwareBackPress",
//       handleBackPress
//     );
//     return () => backHandler.remove();
//   }, [handleBackPress]);

//   useFocusEffect(
//     useCallback(() => {
//       navigation.setOptions({
//         gestureEnabled: !showWebView,
//         headerShown: false,
//       });
//     }, [showWebView])
//   );

//   const handlePaymentSuccess = async () => {
//     await saveFormData(formData);
//     clearCart();
//     setShowWebView(false);
//     setPaymentUrl(null);
//     successScale.setValue(0);
//     successOpacity.setValue(0);
//     checkmarkStroke.setValue(0);
//     setShowSuccessModal(true);
//     animateSuccess();
//     setTimeout(() => {
//       setShowSuccessModal(false);
//       router.push("/(root)/Cart");
//     }, 3000);
//   };

//   const handlePaymentFailure = () => {
//     setShowWebView(false);
//     setPaymentUrl(null);
//     setShowFailureModal(true);
//   };

//   const handlePaymentError = (errorMessage: string) => {
//     setPaymentError(errorMessage);
//     setShowFailureModal(true);
//   };

//   const subtotal = total;
//   const discount = appliedCoupon
//     ? appliedCoupon.type === "percentage"
//       ? (total * appliedCoupon.amount) / 100
//       : appliedCoupon.amount
//     : 0;
//   const finalTotal = (discountedTotal || total) + shippingFee;

//   const handlePayment = async () => {
//     if (isProcessing || !validateForm()) return;

//     try {
//       const netInfo = await NetInfo.fetch();
//       if (!netInfo.isConnected) {
//         Toast.show({
//           type: "error",
//           text1: "No Internet Connection",
//           text2: "Please check your connection and try again",
//           position: "top",
//         });
//         return;
//       }

//       setIsProcessing(true);
//       setPaymentError(null);

//       const currentDate = new Date()
//         .toISOString()
//         .replace(/[^0-9]/g, "")
//         .slice(0, 14);
//       const randomSuffix = Math.random().toString(36).slice(2, 6);
//       const orderId = `ORD${currentDate}${randomSuffix}`;
//       const fullName = `${formData.firstName} ${formData.lastName}`;
//       const cleanPhone = formData.phone
//         .replace(/[^\d]/g, "")
//         .replace(/^(\+965|965)/, "");

//       let payload;
//       let headers = {
//         "Content-Type": "application/json",
//         Accept: "application/json",
//       };

//       if (IS_TEST_ENV) {
//         payload = {
//           amount: Number(finalTotal.toFixed(3)),
//           orderId,
//           customerInfo: {
//             platform: Platform.OS.toUpperCase(),
//             items: items.map((item) => ({
//               id: item.documentId,
//               name: item.name,
//               quantity: item.quantity,
//               price: Number((item.salesPrice || item.price).toFixed(3)),
//             })),
//           },
//         };
//         headers["ngrok-skip-browser-warning"] = "true";
//       } else {
//         const txnHDR = `${Date.now()}${Math.floor(Math.random() * 10000)}`;
//         const rndnum = Math.random().toString(36).slice(2);
//         const sequence = `${MerchUID}|${orderId}|${SURL}|${FURL}|${finalTotal.toFixed(
//           3
//         )}|GEN|${SECRET_KEY}|${rndnum}`;
//         const hashMac = CryptoJS.SHA512(sequence).toString(CryptoJS.enc.Hex);

//         payload = {
//           DBRqst: "PY_ECom",
//           Do_Appinfo: {
//             APIVer: "2.1",
//             APPTyp: "MOB",
//             AppVer: "1.0",
//             Country: "KW",
//             DevcType: "5",
//             OS: Platform.OS === "ios" ? "iOS" : "Android",
//           },
//           Do_MerchDtl: {
//             BKY_PRDENUM: "ECom",
//             FURL: FURL,
//             MerchUID: MerchUID,
//             SURL: SURL,
//           },
//           Do_PyrDtl: {
//             Pyr_Name: fullName,
//             Pyr_MPhone: cleanPhone,
//             ISDNCD: "965",
//           },
//           Do_TxnDtl: [
//             {
//               SubMerchUID: MerchUID,
//               Txn_AMT: finalTotal.toFixed(3),
//             },
//           ],
//           Do_TxnHdr: {
//             Merch_Txn_UID: orderId,
//             PayFor: "ECom",
//             PayMethod: "KNET",
//             Txn_HDR: txnHDR,
//             hashMac: hashMac,
//           },
//         };
//       }

//       const response = await fetch(PAYMENT_API_URL, {
//         method: "POST",
//         headers: headers,
//         body: JSON.stringify(payload),
//       });

//       if (!response.ok) {
//         throw new Error("Payment service unavailable");
//       }

//       const data = await response.json();
//       console.log("Payment response:", data); // For debugging
//       const paymentUrl = IS_TEST_ENV ? data?.paymentUrl : data?.PayUrl;

//       if (!paymentUrl || !paymentUrl.startsWith("https://")) {
//         throw new Error("Invalid or insecure payment URL");
//       }

//       setPaymentUrl(paymentUrl);
//       setShowWebView(true);
//     } catch (error: any) {
//       const errorMessage = error.message || "Payment initiation failed";
//       setPaymentError(errorMessage);
//       handlePaymentError(errorMessage);
//     } finally {
//       setIsProcessing(false);
//     }
//   };

//   if (items.length === 0) {
//     return null;
//   }

//   return (
//     <SafeAreaView style={[styles.safeArea, { paddingTop: insets.top }]}>
//       <KeyboardAvoidingView
//         behavior={Platform.OS === "ios" ? "padding" : "height"}
//         style={styles.container}
//       >
//         <StatusBar barStyle="dark-content" backgroundColor="#f9fafb" />
//         <View style={styles.header}>
//           <TouchableOpacity
//             onPress={() => router.push("/(root)/Cart")}
//             style={styles.backButton}
//             hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//           >
//             <ChevronLeft color="#E53935" size={28} />
//           </TouchableOpacity>
//           <Text style={styles.headerTitle}>Secure Checkout</Text>
//         </View>

//         <ScrollView
//           style={styles.container}
//           contentContainerStyle={styles.contentContainer}
//           showsVerticalScrollIndicator={false}
//         >
//           {/* Delivery Information Section */}
//           <View style={styles.formContainer}>
//             <Text style={styles.formTitle}>Delivery Information</Text>
//             <Text style={styles.deliveryNote}>
//               Orders will be delivered within the next business day.
//             </Text>

//             {/* Personal Information */}
//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>Personal Information</Text>
//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <User size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>First Name *</Text>
//                 </View>
//                 <TextInput
//                   style={[
//                     styles.input,
//                     formErrors.firstName && styles.inputError,
//                   ]}
//                   value={formData.firstName}
//                   onChangeText={(text) => {
//                     setFormData((prev) => ({ ...prev, firstName: text }));
//                     if (formErrors.firstName) {
//                       setFormErrors((prev) => ({
//                         ...prev,
//                         firstName: undefined,
//                       }));
//                     }
//                   }}
//                   placeholder="Enter your first name"
//                 />
//                 {formErrors.firstName && (
//                   <Text style={styles.errorText}>{formErrors.firstName}</Text>
//                 )}
//               </View>

//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <User size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>Last Name *</Text>
//                 </View>
//                 <TextInput
//                   style={[
//                     styles.input,
//                     formErrors.lastName && styles.inputError,
//                   ]}
//                   value={formData.lastName}
//                   onChangeText={(text) => {
//                     setFormData((prev) => ({ ...prev, lastName: text }));
//                     if (formErrors.lastName) {
//                       setFormErrors((prev) => ({
//                         ...prev,
//                         lastName: undefined,
//                       }));
//                     }
//                   }}
//                   placeholder="Enter your last name"
//                 />
//                 {formErrors.lastName && (
//                   <Text style={styles.errorText}>{formErrors.lastName}</Text>
//                 )}
//               </View>

//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <Mail size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>Email *</Text>
//                 </View>
//                 <TextInput
//                   style={[styles.input, formErrors.email && styles.inputError]}
//                   value={formData.email}
//                   onChangeText={(text) => {
//                     setFormData((prev) => ({ ...prev, email: text }));
//                     if (formErrors.email) {
//                       setFormErrors((prev) => ({ ...prev, email: undefined }));
//                     }
//                   }}
//                   placeholder="Enter your email"
//                   keyboardType="email-address"
//                   autoCapitalize="none"
//                 />
//                 {formErrors.email && (
//                   <Text style={styles.errorText}>{formErrors.email}</Text>
//                 )}
//               </View>

//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <Phone size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>Phone Number *</Text>
//                 </View>
//                 <TextInput
//                   style={[styles.input, formErrors.phone && styles.inputError]}
//                   value={formData.phone}
//                   onChangeText={(text) => {
//                     const cleaned = text.replace(/[^\d\s-]/g, "");
//                     setFormData((prev) => ({ ...prev, phone: cleaned }));
//                     if (formErrors.phone) {
//                       setFormErrors((prev) => ({ ...prev, phone: undefined }));
//                     }
//                   }}
//                   placeholder="e.g., 50123456"
//                   keyboardType="phone-pad"
//                   maxLength={12}
//                 />
//                 {formErrors.phone ? (
//                   <Text style={styles.errorText}>{formErrors.phone}</Text>
//                 ) : (
//                   <Text style={styles.helperText}>
//                     Kuwait number (8 digits starting with 5, 6, or 9)
//                   </Text>
//                 )}
//               </View>
//             </View>

//             {/* Delivery Address */}
//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>Delivery Address</Text>
//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <MapPin size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>State *</Text>
//                 </View>
//                 <TextInput
//                   style={[styles.input, formErrors.state && styles.inputError]}
//                   value={formData.state}
//                   onChangeText={(text) => {
//                     setFormData((prev) => ({ ...prev, state: text }));
//                     if (formErrors.state) {
//                       setFormErrors((prev) => ({ ...prev, state: undefined }));
//                     }
//                   }}
//                   placeholder="Enter your state/governorate"
//                 />
//                 {formErrors.state && (
//                   <Text style={styles.errorText}>{formErrors.state}</Text>
//                 )}
//               </View>

//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <MapPin size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>City *</Text>
//                 </View>
//                 <TextInput
//                   style={[styles.input, formErrors.city && styles.inputError]}
//                   value={formData.city}
//                   onChangeText={(text) => {
//                     setFormData((prev) => ({ ...prev, city: text }));
//                     if (formErrors.city) {
//                       setFormErrors((prev) => ({ ...prev, city: undefined }));
//                     }
//                   }}
//                   placeholder="Enter your city"
//                 />
//                 {formErrors.city && (
//                   <Text style={styles.errorText}>{formErrors.city}</Text>
//                 )}
//               </View>

//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <MapPin size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>Delivery Address *</Text>
//                 </View>
//                 <TextInput
//                   style={[
//                     styles.input,
//                     formErrors.address && styles.inputError,
//                   ]}
//                   value={formData.address}
//                   onChangeText={(text) => {
//                     setFormData((prev) => ({ ...prev, address: text }));
//                     if (formErrors.address) {
//                       setFormErrors((prev) => ({
//                         ...prev,
//                         address: undefined,
//                       }));
//                     }
//                   }}
//                   placeholder="Enter your full delivery address"
//                   multiline
//                   numberOfLines={3}
//                 />
//                 {formErrors.address && (
//                   <Text style={styles.errorText}>{formErrors.address}</Text>
//                 )}
//               </View>
//             </View>
//           </View>

//           {/* Order Summary */}
//           <View style={styles.card}>
//             <View style={styles.cardTitleContainer}>
//               <Text style={styles.cardTitle}>Order Summary</Text>
//               <Text style={styles.itemCount}>{items.length} items</Text>
//             </View>
//             {items.map((item) => (
//               <View key={item.documentId} style={styles.itemRow}>
//                 <View style={styles.itemDetails}>
//                   <Text style={styles.itemName} numberOfLines={1}>
//                     {item.name}
//                   </Text>
//                   <Text style={styles.itemQuantity}>Qty: {item.quantity}</Text>
//                 </View>
//                 <Text style={styles.itemPrice}>
//                   {((item.salesPrice || item.price) * item.quantity).toFixed(3)}{" "}
//                   KWD
//                 </Text>
//               </View>
//             ))}

//             <View style={styles.summaryContainer}>
//               <OrderSummaryRow
//                 label="Subtotal"
//                 value={`${subtotal.toFixed(3)} KWD`}
//               />
//               {appliedCoupon && (
//                 <OrderSummaryRow
//                   label={`Discount (${appliedCoupon.code})`}
//                   value={`- ${discount.toFixed(3)} KWD`}
//                   isDiscount
//                 />
//               )}
//               <View style={styles.shippingFeeRow}>
//                 <Text style={styles.summaryLabel}>Shipping Fee</Text>
//                 <View style={styles.shippingFeeValueContainer}>
//                   {isLoadingShippingFee ? (
//                     <ActivityIndicator size="small" color="#10B981" />
//                   ) : shippingFeeError ? (
//                     <Text style={styles.errorValue}>Error loading fee</Text>
//                   ) : (
//                     <Text style={styles.summaryValue}>
//                       {`${shippingFee.toFixed(3)} KWD`}
//                     </Text>
//                   )}
//                 </View>
//               </View>
//               <View style={styles.divider} />
//               <OrderSummaryRow
//                 label="Total Amount"
//                 value={`${finalTotal.toFixed(3)} KWD`}
//                 isTotal
//                 isLoading={isLoadingShippingFee}
//               />
//             </View>
//           </View>

//           {/* Security Info */}
//           <View style={styles.securityCard}>
//             <View style={styles.securityHeader}>
//               <Lock size={20} color="#10B981" />
//               <Text style={styles.securityTitle}>Secure Payment</Text>
//             </View>
//             <Text style={styles.securityText}>
//               • SSL encrypted payment processing • Verified by Bookeey Payment
//               Gateway • Your payment details are protected
//             </Text>
//           </View>

//           {/* Pay Button */}
//           <TouchableOpacity
//             style={[
//               styles.payButton,
//               (isProcessing || isLoadingShippingFee) &&
//                 styles.payButtonDisabled,
//             ]}
//             onPress={handlePayment}
//             disabled={isProcessing || isLoadingShippingFee}
//           >
//             {isProcessing ? (
//               <ActivityIndicator color="white" size="small" />
//             ) : (
//               <View style={styles.payButtonContent}>
//                 <CreditCard size={20} color="white" />
//                 <Text style={styles.payButtonText}>
//                   Pay {finalTotal.toFixed(3)} KWD
//                 </Text>
//               </View>
//             )}
//           </TouchableOpacity>
//           {paymentError && <Text style={styles.errorText}>{paymentError}</Text>}
//         </ScrollView>

//         {/* WebView Modal */}
//         <Modal
//           visible={showWebView}
//           animationType="slide"
//           onRequestClose={handleBackPress}
//         >
//           <SafeAreaView style={styles.modalContainer}>
//             <View style={styles.webViewHeader}>
//               <TouchableOpacity
//                 onPress={handleBackPress}
//                 style={styles.webViewCloseButton}
//                 hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//               >
//                 <ArrowLeft color="#E53935" size={24} />
//               </TouchableOpacity>
//               <View style={styles.webViewTitleContainer}>
//                 <Lock size={16} color="#10B981" />
//                 <Text style={styles.webViewTitle}>Secure Payment</Text>
//               </View>
//             </View>
//             {isWebViewLoading && <PaymentLoadingOverlay />}
//             {paymentUrl && (
//               <WebView
//                 source={{ uri: paymentUrl }}
//                 onNavigationStateChange={(navState) => {
//                   if (navState.url.startsWith(SURL)) {
//                     handlePaymentSuccess();
//                   } else if (navState.url.startsWith(FURL)) {
//                     handlePaymentFailure();
//                   }
//                 }}
//                 onLoadStart={() => setIsWebViewLoading(true)}
//                 onLoadEnd={() => setIsWebViewLoading(false)}
//                 onError={(syntheticEvent) => {
//                   handlePaymentError(syntheticEvent.nativeEvent.description);
//                 }}
//                 onHttpError={() => {
//                   handlePaymentError("Connection error");
//                 }}
//                 style={styles.webView}
//                 incognito={true}
//                 cacheEnabled={false}
//                 domStorageEnabled={true}
//                 javaScriptEnabled={true}
//                 startInLoadingState={true}
//               />
//             )}
//           </SafeAreaView>
//         </Modal>

//         {/* Success Modal */}
//         <Modal
//           visible={showSuccessModal}
//           transparent={true}
//           animationType="fade"
//           onRequestClose={() => setShowSuccessModal(false)}
//         >
//           <View style={styles.modalBackground}>
//             <Animated.View
//               style={[
//                 styles.modalContent,
//                 styles.successModal,
//                 {
//                   transform: [{ scale: successScale }],
//                   opacity: successOpacity,
//                 },
//               ]}
//             >
//               <View style={styles.checkmarkContainer}>
//                 <Animated.View
//                   style={[
//                     styles.checkmarkCircle,
//                     { transform: [{ scale: successScale }] },
//                   ]}
//                 >
//                   <Animated.View
//                     style={[
//                       styles.checkmarkStroke,
//                       { opacity: checkmarkStroke },
//                     ]}
//                   >
//                     <CheckCircle size={48} color="#10B981" />
//                   </Animated.View>
//                 </Animated.View>
//               </View>
//               <Animated.Text
//                 style={[styles.modalTitle, { opacity: successOpacity }]}
//               >
//                 Payment Successful! 🎉
//               </Animated.Text>
//               <Animated.Text
//                 style={[styles.modalText, { opacity: successOpacity }]}
//               >
//                 Thank you for your order. It will be delivered by the next
//                 business day.
//               </Animated.Text>
//             </Animated.View>
//           </View>
//         </Modal>

//         {/* Failure Modal */}
//         <Modal
//           visible={showFailureModal}
//           transparent={true}
//           animationType="fade"
//           onRequestClose={() => setShowFailureModal(false)}
//         >
//           <View style={styles.modalBackground}>
//             <View style={[styles.modalContent, styles.failureModal]}>
//               <XCircle size={48} color="#E53935" />
//               <Text style={styles.modalTitle}>Payment Failed</Text>
//               <Text style={styles.modalText}>
//                 {paymentError ||
//                   "Please try again or use a different payment method."}
//               </Text>
//               <TouchableOpacity
//                 style={styles.modalButton}
//                 onPress={() => setShowFailureModal(false)}
//               >
//                 <Text style={styles.modalButtonText}>Try Again</Text>
//               </TouchableOpacity>
//             </View>
//           </View>
//         </Modal>
//       </KeyboardAvoidingView>
//       <Toast />
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: {
//     flex: 1,
//     backgroundColor: "#f9fafb",
//   },
//   container: {
//     flex: 1,
//   },
//   contentContainer: {
//     padding: 16,
//     paddingBottom: 100,
//   },
//   header: {
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     paddingVertical: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f0f0f0",
//     backgroundColor: "#f9fafb",
//   },
//   backButton: {
//     padding: 4,
//   },
//   headerTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#1f2937",
//     marginLeft: 16,
//   },
//   formContainer: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   section: {
//     marginBottom: 24,
//   },
//   sectionTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#e5e7eb",
//     paddingBottom: 4,
//   },
//   formTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 12,
//   },
//   formField: {
//     marginBottom: 16,
//   },
//   inputLabelContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 6,
//     marginBottom: 4,
//   },
//   inputLabel: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#4b5563",
//   },
//   input: {
//     borderWidth: 1,
//     borderColor: "#e5e7eb",
//     borderRadius: 8,
//     padding: 12,
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#1f2937",
//     backgroundColor: "#fafafa",
//   },
//   inputError: {
//     borderColor: "#ef4444",
//   },
//   errorText: {
//     color: "#ef4444",
//     fontSize: 12,
//     fontFamily: "Cairo",
//     marginTop: 4,
//   },
//   helperText: {
//     fontSize: 12,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//     marginTop: 4,
//   },
//   deliveryNote: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#10B981",
//     marginBottom: 16,
//     textAlign: "center",
//     backgroundColor: "#f0fdf4",
//     padding: 8,
//     borderRadius: 8,
//   },
//   card: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   cardTitleContainer: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 16,
//   },
//   cardTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//   },
//   itemCount: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//   },
//   itemRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 12,
//     paddingBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f1f5f9",
//   },
//   itemDetails: {
//     flex: 1,
//     paddingRight: 8,
//   },
//   itemName: {
//     fontSize: 15,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//     marginBottom: 4,
//   },
//   itemQuantity: {
//     fontSize: 13,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//   },
//   itemPrice: {
//     fontSize: 15,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//   },
//   summaryContainer: {
//     marginTop: 16,
//     paddingTop: 16,
//     borderTopWidth: 1,
//     borderTopColor: "#e5e7eb",
//   },
//   divider: {
//     height: 1,
//     backgroundColor: "#e5e7eb",
//     marginVertical: 12,
//   },
//   securityCard: {
//     backgroundColor: "#f0fdf4",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 24,
//     borderWidth: 1,
//     borderColor: "#86efac",
//   },
//   securityHeader: {
//     flexDirection: "row",
//     alignItems: "center",
//     marginBottom: 12,
//     gap: 8,
//   },
//   securityTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#047857",
//   },
//   securityText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4B5563",
//     lineHeight: 22,
//   },
//   payButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 12,
//     padding: 18,
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 12,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//   },
//   payButtonDisabled: {
//     opacity: 0.6,
//   },
//   payButtonContent: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 10,
//   },
//   payButtonText: {
//     color: "white",
//     fontSize: 16,
//     fontFamily: "Cairo-Bold",
//   },
//   modalBackground: {
//     flex: 1,
//     backgroundColor: "rgba(0, 0, 0, 0.5)",
//     justifyContent: "center",
//     alignItems: "center",
//   },
//   modalContainer: {
//     flex: 1,
//     backgroundColor: "#fff",
//   },
//   modalContent: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "80%",
//     maxWidth: 300,
//   },
//   successModal: {
//     backgroundColor: "#FFFFFF",
//     borderColor: "#10B981",
//     borderWidth: 2,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//   },
//   failureModal: {
//     borderColor: "#E53935",
//     borderWidth: 2,
//   },
//   checkmarkContainer: {
//     width: 80,
//     height: 80,
//     marginBottom: 16,
//     alignItems: "center",
//     justifyContent: "center",
//   },
//   checkmarkCircle: {
//     width: 80,
//     height: 80,
//     borderRadius: 40,
//     backgroundColor: "#E8FFF5",
//     alignItems: "center",
//     justifyContent: "center",
//   },
//   checkmarkStroke: {
//     transform: [{ scale: 1.2 }],
//   },
//   modalTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   modalText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   modalButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 8,
//     paddingVertical: 12,
//     paddingHorizontal: 24,
//     marginTop: 24,
//   },
//   modalButtonText: {
//     color: "white",
//     fontSize: 16,
//     fontFamily: "Cairo-Bold",
//   },
//   webView: {
//     flex: 1,
//   },
//   webViewHeader: {
//     height: 56,
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     borderBottomWidth: 1,
//     borderBottomColor: "#E5E7EB",
//     backgroundColor: "#f9fafb",
//   },
//   webViewCloseButton: {
//     padding: 8,
//   },
//   webViewTitleContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 8,
//     flex: 1,
//     justifyContent: "center",
//     marginRight: 40,
//   },
//   webViewTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   loadingOverlay: {
//     position: "absolute",
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//     backgroundColor: "rgba(255,255,255,0.95)",
//     justifyContent: "center",
//     alignItems: "center",
//     zIndex: 1000,
//   },
//   loadingCard: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//     width: "80%",
//     maxWidth: 300,
//   },
//   loadingTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   loadingSubtext: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   errorValue: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#DC2626",
//   },
//   shippingFeeRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginVertical: 4,
//   },
//   shippingFeeValueContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     justifyContent: "flex-end",
//   },
//   summaryLabel: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4b5563",
//   },
//   summaryValue: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
// });

/******************************************/

// // Works but not sending backend correct informations

// import React, { useState, useCallback, useEffect, useRef } from "react";
// import {
//   View,
//   Text,
//   ScrollView,
//   Alert,
//   ActivityIndicator,
//   StyleSheet,
//   Platform,
//   TouchableOpacity,
//   SafeAreaView,
//   BackHandler,
//   Modal,
//   StatusBar,
//   TextInput,
//   KeyboardAvoidingView,
//   Animated,
//   Easing,
// } from "react-native";
// import { router, useNavigation } from "expo-router";
// import { WebView } from "react-native-webview";
// import { useFocusEffect } from "@react-navigation/native";
// import {
//   Shield,
//   CreditCard,
//   ArrowLeft,
//   Lock,
//   ChevronLeft,
//   CheckCircle,
//   XCircle,
//   User,
//   Phone,
//   Mail,
//   MapPin,
// } from "lucide-react-native";
// import Toast from "react-native-toast-message";
// import NetInfo from "@react-native-community/netinfo";
// import * as SecureStore from "expo-secure-store";
// import useCartStore from "../../store/cartStore";
// import { OrderSummaryRow } from "../Components/OrderSummary";
// import useShippingFee from "../hooks/useShippingFee";
// import { useSafeAreaInsets } from "react-native-safe-area-context";
// import CryptoJS from "crypto-js";

// const IS_TEST_ENV = process.env.EXPO_PUBLIC_IS_TEST_ENV === "true";
// const PAYMENT_API_URL = IS_TEST_ENV
//   ? "https://4f54-37-36-175-221.ngrok-free.app/api/payments/initiate"
//   : "https://pg.bookeey.com/internalapi/api/payment/requestLink";

// const MerchUID = "mer2400018";
// const SECRET_KEY = "0623475"; // Ensure this matches Bookeey's provided key
// const SURL = IS_TEST_ENV
//   ? "https://f36b-37-36-175-221.ngrok-free.app/api/payments/success"
//   : "https://app.bookeeypayment.com/success";
// const FURL = IS_TEST_ENV
//   ? "https://f36b-37-36-175-221.ngrok-free.app/api/payments/failure"
//   : "https://app.bookeeypayment.com/failure";
// const FORM_DATA_KEY = "user_checkout_info";

// // Component for Payment Loading Overlay
// const PaymentLoadingOverlay = () => (
//   <View style={styles.loadingOverlay}>
//     <View style={styles.loadingCard}>
//       <ActivityIndicator size="large" color="#10B981" />
//       <Text style={styles.loadingTitle}>Processing Payment</Text>
//       <Text style={styles.loadingSubtext}>Please don't close this window</Text>
//     </View>
//   </View>
// );

// // Form Data Interface
// interface FormData {
//   firstName: string;
//   lastName: string;
//   phone: string;
//   email: string;
//   state: string;
//   city: string;
//   address: string;
// }

// // Form Errors Interface
// interface FormErrors {
//   firstName?: string;
//   lastName?: string;
//   phone?: string;
//   email?: string;
//   state?: string;
//   city?: string;
//   address?: string;
// }

// const REQUIRED_FIELDS = [
//   "firstName",
//   "lastName",
//   "phone",
//   "email",
//   "state",
//   "city",
//   "address",
// ];
// const PHONE_REGEX = /^\d{8,}$/; // Flexible: Accepts 8 or more digits
// const EMAIL_REGEX = /\S+@\S+\.\S+/;

// // Utility Functions
// const saveFormData = async (data: FormData) => {
//   try {
//     await SecureStore.setItemAsync(FORM_DATA_KEY, JSON.stringify(data));
//   } catch (error) {
//     console.error("Error saving form data:", error);
//   }
// };

// const loadFormData = async (): Promise<FormData | null> => {
//   try {
//     const savedData = await SecureStore.getItemAsync(FORM_DATA_KEY);
//     return savedData ? JSON.parse(savedData) : null;
//   } catch (error) {
//     console.error("Error loading form data:", error);
//     return null;
//   }
// };

// export default function CheckoutPage() {
//   const insets = useSafeAreaInsets();
//   const navigation = useNavigation();
//   const { items, total, discountedTotal, appliedCoupon, clearCart } =
//     useCartStore();
//   const {
//     shippingFee,
//     loading: isLoadingShippingFee,
//     error: shippingFeeError,
//   } = useShippingFee();

//   const successScale = useRef(new Animated.Value(0)).current;
//   const successOpacity = useRef(new Animated.Value(0)).current;
//   const checkmarkStroke = useRef(new Animated.Value(0)).current;

//   const [formData, setFormData] = useState<FormData>({
//     firstName: "",
//     lastName: "",
//     phone: "",
//     email: "",
//     state: "",
//     city: "",
//     address: "",
//   });
//   const [formErrors, setFormErrors] = useState<FormErrors>({});
//   const [isProcessing, setIsProcessing] = useState(false);
//   const [paymentError, setPaymentError] = useState<string | null>(null);
//   const [showWebView, setShowWebView] = useState(false);
//   const [paymentUrl, setPaymentUrl] = useState<string | null>(null);
//   const [isWebViewLoading, setIsWebViewLoading] = useState(true);
//   const [showSuccessModal, setShowSuccessModal] = useState(false);
//   const [showFailureModal, setShowFailureModal] = useState(false);

//   // Load saved form data on mount
//   useEffect(() => {
//     const loadSavedData = async () => {
//       const savedData = await loadFormData();
//       if (savedData) {
//         setFormData(savedData);
//       }
//     };
//     loadSavedData();
//   }, []);

//   // Redirect to cart if no items
//   useEffect(() => {
//     if (items.length === 0) {
//       router.replace("/(root)/Cart");
//     }
//   }, [items.length]);

//   // Form Validation
//   const validateForm = (): boolean => {
//     const errors: FormErrors = {};
//     let isValid = true;

//     if (!formData.firstName.trim()) {
//       errors.firstName = "First name is required";
//       isValid = false;
//     }
//     if (!formData.lastName.trim()) {
//       errors.lastName = "Last name is required";
//       isValid = false;
//     }
//     if (!formData.email.trim()) {
//       errors.email = "Email is required";
//       isValid = false;
//     } else if (!EMAIL_REGEX.test(formData.email)) {
//       errors.email = "Invalid email address";
//       isValid = false;
//     }
//     if (!formData.phone.trim()) {
//       errors.phone = "Phone number is required";
//       isValid = false;
//     } else {
//       const cleanPhone = formData.phone.replace(/[^\d]/g, "");
//       if (!PHONE_REGEX.test(cleanPhone)) {
//         errors.phone = "Phone number must be at least 8 digits";
//         isValid = false;
//       }
//     }
//     if (!formData.state.trim()) {
//       errors.state = "State is required";
//       isValid = false;
//     }
//     if (!formData.city.trim()) {
//       errors.city = "City is required";
//       isValid = false;
//     }
//     if (!formData.address.trim()) {
//       errors.address = "Delivery address is required";
//       isValid = false;
//     }

//     setFormErrors(errors);
//     if (!isValid) {
//       Toast.show({
//         type: "error",
//         text1: "Form Validation Error",
//         text2: "Please fill in all required fields correctly",
//         position: "top",
//       });
//     }
//     return isValid;
//   };

//   // Success Animation
//   const animateSuccess = () => {
//     Animated.parallel([
//       Animated.spring(successScale, {
//         toValue: 1,
//         friction: 8,
//         tension: 40,
//         useNativeDriver: true,
//       }),
//       Animated.timing(successOpacity, {
//         toValue: 1,
//         duration: 200,
//         useNativeDriver: true,
//       }),
//       Animated.timing(checkmarkStroke, {
//         toValue: 1,
//         duration: 600,
//         easing: Easing.bezier(0.65, 0, 0.45, 1),
//         useNativeDriver: true,
//       }),
//     ]).start();
//   };

//   // Handle Back Press
//   const handleBackPress = useCallback(() => {
//     if (showWebView) {
//       Alert.alert(
//         "Cancel Payment?",
//         "Are you sure you want to cancel? This payment will not be processed.",
//         [
//           { text: "Continue Payment", style: "cancel" },
//           {
//             text: "Cancel Payment",
//             style: "destructive",
//             onPress: () => {
//               setShowWebView(false);
//               setPaymentUrl(null);
//               setShowFailureModal(true);
//             },
//           },
//         ]
//       );
//       return true;
//     }
//     router.push("/(root)/Cart");
//     return true;
//   }, [showWebView]);

//   useEffect(() => {
//     const backHandler = BackHandler.addEventListener(
//       "hardwareBackPress",
//       handleBackPress
//     );
//     return () => backHandler.remove();
//   }, [handleBackPress]);

//   useFocusEffect(
//     useCallback(() => {
//       navigation.setOptions({
//         gestureEnabled: !showWebView,
//         headerShown: false,
//       });
//     }, [showWebView])
//   );

//   // Payment Success Handler
//   const handlePaymentSuccess = async () => {
//     await saveFormData(formData);
//     clearCart();
//     setShowWebView(false);
//     setPaymentUrl(null);
//     successScale.setValue(0);
//     successOpacity.setValue(0);
//     checkmarkStroke.setValue(0);
//     setShowSuccessModal(true);
//     animateSuccess();
//     setTimeout(() => {
//       setShowSuccessModal(false);
//       router.push("/(root)/Cart");
//     }, 3000);
//   };

//   // Payment Failure Handler
//   const handlePaymentFailure = () => {
//     setShowWebView(false);
//     setPaymentUrl(null);
//     setShowFailureModal(true);
//   };

//   // Payment Error Handler
//   const handlePaymentError = (errorMessage: string) => {
//     setPaymentError(errorMessage);
//     setShowFailureModal(true);
//   };

//   // Calculate Totals
//   const subtotal = total;
//   const discount = appliedCoupon
//     ? appliedCoupon.type === "percentage"
//       ? (total * appliedCoupon.amount) / 100
//       : appliedCoupon.amount
//     : 0;
//   const finalTotal = (discountedTotal || total) + shippingFee;

//   // Handle Payment Submission
//   const handlePayment = async () => {
//     if (isProcessing || !validateForm()) return;

//     try {
//       const netInfo = await NetInfo.fetch();
//       if (!netInfo.isConnected) {
//         Toast.show({
//           type: "error",
//           text1: "No Internet Connection",
//           text2: "Please check your connection and try again",
//           position: "top",
//         });
//         return;
//       }

//       setIsProcessing(true);
//       setPaymentError(null);

//       const currentDate = new Date()
//         .toISOString()
//         .replace(/[^0-9]/g, "")
//         .slice(0, 14);
//       const randomSuffix = Math.random().toString(36).slice(2, 6);
//       const orderId = `ORD${currentDate}${randomSuffix}`;
//       const fullName = `${formData.firstName} ${formData.lastName}`;
//       const cleanPhone = formData.phone.replace(/[^\d]/g, "");

//       let payload;
//       let headers = {
//         "Content-Type": "application/json",
//         Accept: "application/json",
//       };

//       if (IS_TEST_ENV) {
//         payload = {
//           amount: Number(finalTotal.toFixed(3)),
//           orderId,
//           customerInfo: {
//             platform: Platform.OS.toUpperCase(),
//             customerName: fullName,
//             customerPhone: cleanPhone,
//             items: items.map((item) => ({
//               id: item.documentId,
//               name: item.name,
//               quantity: item.quantity,
//               price: Number((item.salesPrice || item.price).toFixed(3)),
//             })),
//           },
//         };
//         headers["ngrok-skip-browser-warning"] = "true";
//       } else {
//         const txnHDR = `${Date.now()}${Math.floor(Math.random() * 10000)}`;
//         const rndnum = Math.random().toString(36).slice(2);
//         const sequence = `${MerchUID}|${orderId}|${SURL}|${FURL}|${finalTotal.toFixed(
//           3
//         )}|GEN|${SECRET_KEY}|${rndnum}`;
//         const hashMac = CryptoJS.SHA512(sequence).toString(CryptoJS.enc.Hex);

//         payload = {
//           DBRqst: "PY_ECom",
//           Do_Appinfo: {
//             APIVer: "2.1",
//             APPTyp: "MOB",
//             AppVer: "1.0",
//             Country: "KW",
//             DevcType: "5",
//             OS: Platform.OS === "ios" ? "iOS" : "Android",
//           },
//           Do_MerchDtl: {
//             BKY_PRDENUM: "ECom",
//             FURL: FURL,
//             MerchUID: MerchUID,
//             SURL: SURL,
//           },
//           Do_PyrDtl: {
//             Pyr_Name: fullName,
//             Pyr_MPhone: cleanPhone,
//             ISDNCD: "965",
//           },
//           Do_TxnDtl: [
//             {
//               SubMerchUID: MerchUID,
//               Txn_AMT: finalTotal.toFixed(3),
//             },
//           ],
//           Do_TxnHdr: {
//             Merch_Txn_UID: orderId,
//             PayFor: "ECom",
//             PayMethod: "KNET",
//             Txn_HDR: txnHDR,
//             hashMac: hashMac,
//           },
//         };
//       }

//       console.log("Payment Payload:", JSON.stringify(payload, null, 2)); // Debug payload

//       const response = await fetch(PAYMENT_API_URL, {
//         method: "POST",
//         headers: headers,
//         body: JSON.stringify(payload),
//       });

//       if (!response.ok) {
//         throw new Error(`Payment service unavailable: ${response.status}`);
//       }

//       const data = await response.json();
//       console.log("Payment Response:", data); // Debug response
//       const paymentUrl = IS_TEST_ENV ? data?.paymentUrl : data?.PayUrl;

//       if (!paymentUrl || !paymentUrl.startsWith("https://")) {
//         throw new Error("Invalid or insecure payment URL received");
//       }

//       setPaymentUrl(paymentUrl);
//       setShowWebView(true);
//     } catch (error: any) {
//       const errorMessage = error.message || "Payment initiation failed";
//       console.error("Payment Error:", error);
//       setPaymentError(errorMessage);
//       handlePaymentError(errorMessage);
//     } finally {
//       setIsProcessing(false);
//     }
//   };

//   if (items.length === 0) {
//     return null;
//   }

//   return (
//     <SafeAreaView style={[styles.safeArea, { paddingTop: insets.top }]}>
//       <KeyboardAvoidingView
//         behavior={Platform.OS === "ios" ? "padding" : "height"}
//         style={styles.container}
//       >
//         <StatusBar barStyle="dark-content" backgroundColor="#f9fafb" />
//         <View style={styles.header}>
//           <TouchableOpacity
//             onPress={handleBackPress}
//             style={styles.backButton}
//             hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//           >
//             <ChevronLeft color="#E53935" size={28} />
//           </TouchableOpacity>
//           <Text style={styles.headerTitle}>Secure Checkout</Text>
//         </View>

//         <ScrollView
//           style={styles.container}
//           contentContainerStyle={styles.contentContainer}
//           showsVerticalScrollIndicator={false}
//         >
//           {/* Delivery Information Section */}
//           <View style={styles.formContainer}>
//             <Text style={styles.formTitle}>Delivery Information</Text>
//             <Text style={styles.deliveryNote}>
//               Orders will be delivered within the next business day.
//             </Text>

//             {/* Personal Information */}
//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>Personal Information</Text>
//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <User size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>First Name *</Text>
//                 </View>
//                 <TextInput
//                   style={[
//                     styles.input,
//                     formErrors.firstName && styles.inputError,
//                   ]}
//                   value={formData.firstName}
//                   onChangeText={(text) => {
//                     setFormData((prev) => ({ ...prev, firstName: text }));
//                     if (formErrors.firstName)
//                       setFormErrors((prev) => ({
//                         ...prev,
//                         firstName: undefined,
//                       }));
//                   }}
//                   placeholder="Enter your first name"
//                   autoCapitalize="words"
//                 />
//                 {formErrors.firstName && (
//                   <Text style={styles.errorText}>{formErrors.firstName}</Text>
//                 )}
//               </View>

//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <User size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>Last Name *</Text>
//                 </View>
//                 <TextInput
//                   style={[
//                     styles.input,
//                     formErrors.lastName && styles.inputError,
//                   ]}
//                   value={formData.lastName}
//                   onChangeText={(text) => {
//                     setFormData((prev) => ({ ...prev, lastName: text }));
//                     if (formErrors.lastName)
//                       setFormErrors((prev) => ({
//                         ...prev,
//                         lastName: undefined,
//                       }));
//                   }}
//                   placeholder="Enter your last name"
//                   autoCapitalize="words"
//                 />
//                 {formErrors.lastName && (
//                   <Text style={styles.errorText}>{formErrors.lastName}</Text>
//                 )}
//               </View>

//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <Mail size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>Email *</Text>
//                 </View>
//                 <TextInput
//                   style={[styles.input, formErrors.email && styles.inputError]}
//                   value={formData.email}
//                   onChangeText={(text) => {
//                     setFormData((prev) => ({ ...prev, email: text }));
//                     if (formErrors.email)
//                       setFormErrors((prev) => ({ ...prev, email: undefined }));
//                   }}
//                   placeholder="Enter your email"
//                   keyboardType="email-address"
//                   autoCapitalize="none"
//                 />
//                 {formErrors.email && (
//                   <Text style={styles.errorText}>{formErrors.email}</Text>
//                 )}
//               </View>

//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <Phone size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>Phone Number *</Text>
//                 </View>
//                 <TextInput
//                   style={[styles.input, formErrors.phone && styles.inputError]}
//                   value={formData.phone}
//                   onChangeText={(text) => {
//                     const cleaned = text.replace(/[^\d]/g, "");
//                     setFormData((prev) => ({ ...prev, phone: cleaned }));
//                     if (formErrors.phone)
//                       setFormErrors((prev) => ({ ...prev, phone: undefined }));
//                   }}
//                   placeholder="e.g., 12345678"
//                   keyboardType="phone-pad"
//                   maxLength={15}
//                 />
//                 {formErrors.phone ? (
//                   <Text style={styles.errorText}>{formErrors.phone}</Text>
//                 ) : (
//                   <Text style={styles.helperText}>
//                     Enter your Kuwait mobile number (minimum 8 digits)
//                   </Text>
//                 )}
//               </View>
//             </View>

//             {/* Delivery Address */}
//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>Delivery Address</Text>
//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <MapPin size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>State *</Text>
//                 </View>
//                 <TextInput
//                   style={[styles.input, formErrors.state && styles.inputError]}
//                   value={formData.state}
//                   onChangeText={(text) => {
//                     setFormData((prev) => ({ ...prev, state: text }));
//                     if (formErrors.state)
//                       setFormErrors((prev) => ({ ...prev, state: undefined }));
//                   }}
//                   placeholder="Enter your state/governorate"
//                 />
//                 {formErrors.state && (
//                   <Text style={styles.errorText}>{formErrors.state}</Text>
//                 )}
//               </View>

//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <MapPin size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>City *</Text>
//                 </View>
//                 <TextInput
//                   style={[styles.input, formErrors.city && styles.inputError]}
//                   value={formData.city}
//                   onChangeText={(text) => {
//                     setFormData((prev) => ({ ...prev, city: text }));
//                     if (formErrors.city)
//                       setFormErrors((prev) => ({ ...prev, city: undefined }));
//                   }}
//                   placeholder="Enter your city"
//                 />
//                 {formErrors.city && (
//                   <Text style={styles.errorText}>{formErrors.city}</Text>
//                 )}
//               </View>

//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <MapPin size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>Delivery Address *</Text>
//                 </View>
//                 <TextInput
//                   style={[
//                     styles.input,
//                     formErrors.address && styles.inputError,
//                   ]}
//                   value={formData.address}
//                   onChangeText={(text) => {
//                     setFormData((prev) => ({ ...prev, address: text }));
//                     if (formErrors.address)
//                       setFormErrors((prev) => ({
//                         ...prev,
//                         address: undefined,
//                       }));
//                   }}
//                   placeholder="Enter your full delivery address"
//                   multiline
//                   numberOfLines={3}
//                 />
//                 {formErrors.address && (
//                   <Text style={styles.errorText}>{formErrors.address}</Text>
//                 )}
//               </View>
//             </View>
//           </View>

//           {/* Order Summary */}
//           <View style={styles.card}>
//             <View style={styles.cardTitleContainer}>
//               <Text style={styles.cardTitle}>Order Summary</Text>
//               <Text style={styles.itemCount}>{items.length} items</Text>
//             </View>
//             {items.map((item) => (
//               <View key={item.documentId} style={styles.itemRow}>
//                 <View style={styles.itemDetails}>
//                   <Text style={styles.itemName} numberOfLines={1}>
//                     {item.name}
//                   </Text>
//                   <Text style={styles.itemQuantity}>Qty: {item.quantity}</Text>
//                 </View>
//                 <Text style={styles.itemPrice}>
//                   {((item.salesPrice || item.price) * item.quantity).toFixed(3)}{" "}
//                   KWD
//                 </Text>
//               </View>
//             ))}

//             <View style={styles.summaryContainer}>
//               <OrderSummaryRow
//                 label="Subtotal"
//                 value={`${subtotal.toFixed(3)} KWD`}
//               />
//               {appliedCoupon && (
//                 <OrderSummaryRow
//                   label={`Discount (${appliedCoupon.code})`}
//                   value={`- ${discount.toFixed(3)} KWD`}
//                   isDiscount
//                 />
//               )}
//               <View style={styles.shippingFeeRow}>
//                 <Text style={styles.summaryLabel}>Shipping Fee</Text>
//                 <View style={styles.shippingFeeValueContainer}>
//                   {isLoadingShippingFee ? (
//                     <ActivityIndicator size="small" color="#10B981" />
//                   ) : shippingFeeError ? (
//                     <Text style={styles.errorValue}>Error loading fee</Text>
//                   ) : (
//                     <Text style={styles.summaryValue}>{`${shippingFee.toFixed(
//                       3
//                     )} KWD`}</Text>
//                   )}
//                 </View>
//               </View>
//               <View style={styles.divider} />
//               <OrderSummaryRow
//                 label="Total Amount"
//                 value={`${finalTotal.toFixed(3)} KWD`}
//                 isTotal
//                 isLoading={isLoadingShippingFee}
//               />
//             </View>
//           </View>

//           {/* Security Info */}
//           <View style={styles.securityCard}>
//             <View style={styles.securityHeader}>
//               <Lock size={20} color="#10B981" />
//               <Text style={styles.securityTitle}>Secure Payment</Text>
//             </View>
//             <Text style={styles.securityText}>
//               • SSL encrypted payment processing • Verified by Bookeey Payment
//               Gateway • Your payment details are protected
//             </Text>
//           </View>

//           {/* Pay Button */}
//           <TouchableOpacity
//             style={[
//               styles.payButton,
//               (isProcessing || isLoadingShippingFee) &&
//                 styles.payButtonDisabled,
//             ]}
//             onPress={handlePayment}
//             disabled={isProcessing || isLoadingShippingFee}
//           >
//             {isProcessing ? (
//               <ActivityIndicator color="white" size="small" />
//             ) : (
//               <View style={styles.payButtonContent}>
//                 <CreditCard size={20} color="white" />
//                 <Text style={styles.payButtonText}>
//                   Pay {finalTotal.toFixed(3)} KWD
//                 </Text>
//               </View>
//             )}
//           </TouchableOpacity>
//           {paymentError && <Text style={styles.errorText}>{paymentError}</Text>}
//         </ScrollView>

//         {/* WebView Modal */}
//         <Modal
//           visible={showWebView}
//           animationType="slide"
//           onRequestClose={handleBackPress}
//         >
//           <SafeAreaView style={styles.modalContainer}>
//             <View style={styles.webViewHeader}>
//               <TouchableOpacity
//                 onPress={handleBackPress}
//                 style={styles.webViewCloseButton}
//                 hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//               >
//                 <ArrowLeft color="#E53935" size={24} />
//               </TouchableOpacity>
//               <View style={styles.webViewTitleContainer}>
//                 <Lock size={16} color="#10B981" />
//                 <Text style={styles.webViewTitle}>Secure Payment</Text>
//               </View>
//             </View>
//             {isWebViewLoading && <PaymentLoadingOverlay />}
//             {paymentUrl && (
//               <WebView
//                 source={{ uri: paymentUrl }}
//                 onNavigationStateChange={(navState) => {
//                   if (navState.url.includes("/success")) {
//                     handlePaymentSuccess();
//                   } else if (navState.url.includes("/failure")) {
//                     handlePaymentFailure();
//                   }
//                 }}
//                 onLoadStart={() => setIsWebViewLoading(true)}
//                 onLoadEnd={() => setIsWebViewLoading(false)}
//                 onError={(syntheticEvent) =>
//                   handlePaymentError(syntheticEvent.nativeEvent.description)
//                 }
//                 onHttpError={() => handlePaymentError("Connection error")}
//                 style={styles.webView}
//                 incognito={true}
//                 cacheEnabled={false}
//                 domStorageEnabled={true}
//                 javaScriptEnabled={true}
//                 startInLoadingState={true}
//               />
//             )}
//           </SafeAreaView>
//         </Modal>

//         {/* Success Modal */}
//         <Modal
//           visible={showSuccessModal}
//           transparent={true}
//           animationType="fade"
//           onRequestClose={() => setShowSuccessModal(false)}
//         >
//           <View style={styles.modalBackground}>
//             <Animated.View
//               style={[
//                 styles.modalContent,
//                 styles.successModal,
//                 {
//                   transform: [{ scale: successScale }],
//                   opacity: successOpacity,
//                 },
//               ]}
//             >
//               <View style={styles.checkmarkContainer}>
//                 <Animated.View
//                   style={[
//                     styles.checkmarkCircle,
//                     { transform: [{ scale: successScale }] },
//                   ]}
//                 >
//                   <Animated.View
//                     style={[
//                       styles.checkmarkStroke,
//                       { opacity: checkmarkStroke },
//                     ]}
//                   >
//                     <CheckCircle size={48} color="#10B981" />
//                   </Animated.View>
//                 </Animated.View>
//               </View>
//               <Animated.Text
//                 style={[styles.modalTitle, { opacity: successOpacity }]}
//               >
//                 Payment Successful! 🎉
//               </Animated.Text>
//               <Animated.Text
//                 style={[styles.modalText, { opacity: successOpacity }]}
//               >
//                 Thank you for your order. It will be delivered by the next
//                 business day.
//               </Animated.Text>
//             </Animated.View>
//           </View>
//         </Modal>

//         {/* Failure Modal */}
//         <Modal
//           visible={showFailureModal}
//           transparent={true}
//           animationType="fade"
//           onRequestClose={() => setShowFailureModal(false)}
//         >
//           <View style={styles.modalBackground}>
//             <View style={[styles.modalContent, styles.failureModal]}>
//               <XCircle size={48} color="#E53935" />
//               <Text style={styles.modalTitle}>Payment Failed</Text>
//               <Text style={styles.modalText}>
//                 {paymentError ||
//                   "Please try again or use a different payment method."}
//               </Text>
//               <TouchableOpacity
//                 style={styles.modalButton}
//                 onPress={() => setShowFailureModal(false)}
//               >
//                 <Text style={styles.modalButtonText}>Try Again</Text>
//               </TouchableOpacity>
//             </View>
//           </View>
//         </Modal>
//       </KeyboardAvoidingView>
//       <Toast />
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: { flex: 1, backgroundColor: "#f9fafb" },
//   container: { flex: 1 },
//   contentContainer: { padding: 16, paddingBottom: 100 },
//   header: {
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     paddingVertical: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f0f0f0",
//     backgroundColor: "#f9fafb",
//   },
//   backButton: { padding: 4 },
//   headerTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#1f2937",
//     marginLeft: 16,
//   },
//   formContainer: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   section: { marginBottom: 24 },
//   sectionTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#e5e7eb",
//     paddingBottom: 4,
//   },
//   formTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 12,
//   },
//   formField: { marginBottom: 16 },
//   inputLabelContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 6,
//     marginBottom: 4,
//   },
//   inputLabel: { fontSize: 14, fontFamily: "Cairo-SemiBold", color: "#4b5563" },
//   input: {
//     borderWidth: 1,
//     borderColor: "#e5e7eb",
//     borderRadius: 8,
//     padding: 12,
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#1f2937",
//     backgroundColor: "#fafafa",
//   },
//   inputError: { borderColor: "#ef4444" },
//   errorText: {
//     color: "#ef4444",
//     fontSize: 12,
//     fontFamily: "Cairo",
//     marginTop: 4,
//   },
//   helperText: {
//     fontSize: 12,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//     marginTop: 4,
//   },
//   deliveryNote: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#10B981",
//     marginBottom: 16,
//     textAlign: "center",
//     backgroundColor: "#f0fdf4",
//     padding: 8,
//     borderRadius: 8,
//   },
//   card: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   cardTitleContainer: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 16,
//   },
//   cardTitle: { fontSize: 18, fontFamily: "Cairo-SemiBold", color: "#1f2937" },
//   itemCount: { fontSize: 14, fontFamily: "Cairo", color: "#6b7280" },
//   itemRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 12,
//     paddingBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f1f5f9",
//   },
//   itemDetails: { flex: 1, paddingRight: 8 },
//   itemName: {
//     fontSize: 15,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//     marginBottom: 4,
//   },
//   itemQuantity: { fontSize: 13, fontFamily: "Cairo", color: "#6b7280" },
//   itemPrice: { fontSize: 15, fontFamily: "Cairo-Bold", color: "#374151" },
//   summaryContainer: {
//     marginTop: 16,
//     paddingTop: 16,
//     borderTopWidth: 1,
//     borderTopColor: "#e5e7eb",
//   },
//   divider: { height: 1, backgroundColor: "#e5e7eb", marginVertical: 12 },
//   securityCard: {
//     backgroundColor: "#f0fdf4",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 24,
//     borderWidth: 1,
//     borderColor: "#86efac",
//   },
//   securityHeader: {
//     flexDirection: "row",
//     alignItems: "center",
//     marginBottom: 12,
//     gap: 8,
//   },
//   securityTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#047857",
//   },
//   securityText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4B5563",
//     lineHeight: 22,
//   },
//   payButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 12,
//     padding: 18,
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 12,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//   },
//   payButtonDisabled: { opacity: 0.6 },
//   payButtonContent: { flexDirection: "row", alignItems: "center", gap: 10 },
//   payButtonText: { color: "white", fontSize: 16, fontFamily: "Cairo-Bold" },
//   modalBackground: {
//     flex: 1,
//     backgroundColor: "rgba(0, 0, 0, 0.5)",
//     justifyContent: "center",
//     alignItems: "center",
//   },
//   modalContainer: { flex: 1, backgroundColor: "#fff" },
//   modalContent: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "80%",
//     maxWidth: 300,
//   },
//   successModal: {
//     backgroundColor: "#FFFFFF",
//     borderColor: "#10B981",
//     borderWidth: 2,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//   },
//   failureModal: { borderColor: "#E53935", borderWidth: 2 },
//   checkmarkContainer: {
//     width: 80,
//     height: 80,
//     marginBottom: 16,
//     alignItems: "center",
//     justifyContent: "center",
//   },
//   checkmarkCircle: {
//     width: 80,
//     height: 80,
//     borderRadius: 40,
//     backgroundColor: "#E8FFF5",
//     alignItems: "center",
//     justifyContent: "center",
//   },
//   checkmarkStroke: { transform: [{ scale: 1.2 }] },
//   modalTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   modalText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   modalButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 8,
//     paddingVertical: 12,
//     paddingHorizontal: 24,
//     marginTop: 24,
//   },
//   modalButtonText: { color: "white", fontSize: 16, fontFamily: "Cairo-Bold" },
//   webView: { flex: 1 },
//   webViewHeader: {
//     height: 56,
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     borderBottomWidth: 1,
//     borderBottomColor: "#E5E7EB",
//     backgroundColor: "#f9fafb",
//   },
//   webViewCloseButton: { padding: 8 },
//   webViewTitleContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 8,
//     flex: 1,
//     justifyContent: "center",
//     marginRight: 40,
//   },
//   webViewTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   loadingOverlay: {
//     position: "absolute",
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//     backgroundColor: "rgba(255,255,255,0.95)",
//     justifyContent: "center",
//     alignItems: "center",
//     zIndex: 1000,
//   },
//   loadingCard: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//     width: "80%",
//     maxWidth: 300,
//   },
//   loadingTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   loadingSubtext: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   errorValue: { fontSize: 14, fontFamily: "Cairo", color: "#DC2626" },
//   shippingFeeRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginVertical: 4,
//   },
//   shippingFeeValueContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     justifyContent: "flex-end",
//   },
//   summaryLabel: { fontSize: 14, fontFamily: "Cairo", color: "#4b5563" },
//   summaryValue: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
// });

/***************************************** */

//Type safe

// import React, { useState, useCallback, useEffect, useRef } from "react";
// import {
//   View,
//   Text,
//   ScrollView,
//   Alert,
//   ActivityIndicator,
//   StyleSheet,
//   Platform,
//   TouchableOpacity,
//   SafeAreaView,
//   BackHandler,
//   Modal,
//   StatusBar,
//   TextInput,
//   KeyboardAvoidingView,
//   Animated,
//   Easing,
// } from "react-native";
// import { router, useNavigation } from "expo-router";
// import { WebView } from "react-native-webview";
// import { useFocusEffect } from "@react-navigation/native";
// import {
//   Shield,
//   CreditCard,
//   ArrowLeft,
//   Lock,
//   ChevronLeft,
//   CheckCircle,
//   XCircle,
//   User,
//   Phone,
//   Mail,
//   MapPin,
// } from "lucide-react-native";
// import Toast from "react-native-toast-message";
// import NetInfo from "@react-native-community/netinfo";
// import * as SecureStore from "expo-secure-store";
// import useCartStore from "../../store/cartStore";
// import { OrderSummaryRow } from "../Components/OrderSummary";
// import useShippingFee from "../hooks/useShippingFee";
// import { useSafeAreaInsets } from "react-native-safe-area-context";
// import CryptoJS from "crypto-js";

// const IS_TEST_ENV = process.env.EXPO_PUBLIC_IS_TEST_ENV === "true";
// const PAYMENT_API_URL = IS_TEST_ENV
//   ? "https://4f54-37-36-175-221.ngrok-free.app/api/payments/initiate"
//   : "https://pg.bookeey.com/internalapi/api/payment/requestLink";

// const MerchUID = "mer2400018";
// const SECRET_KEY = "0623475"; // Ensure this matches Bookeey's provided key
// const SURL = IS_TEST_ENV
//   ? "https://4f54-37-36-175-221.ngrok-free.app/api/payments/success"
//   : "https://app.bookeeypayment.com/success";
// const FURL = IS_TEST_ENV
//   ? "https://4f54-37-36-175-221.ngrok-free.app/api/payments/failure"
//   : "https://app.bookeeypayment.com/failure";
// const FORM_DATA_KEY = "user_checkout_info";

// // Component for Payment Loading Overlay
// const PaymentLoadingOverlay = () => (
//   <View style={styles.loadingOverlay}>
//     <View style={styles.loadingCard}>
//       <ActivityIndicator size="large" color="#10B981" />
//       <Text style={styles.loadingTitle}>Processing Payment</Text>
//       <Text style={styles.loadingSubtext}>Please don't close this window</Text>
//     </View>
//   </View>
// );

// // payment type interface
// interface PaymentRequest {
//   DBRqst: string;
//   Do_Appinfo: {
//     APIVer: string;
//     APPID: string;
//     APPTyp: string;
//     AppVer: string;
//     Country: string;
//     DevcType: string;
//     HsCode: string;
//     IPAddrs: string;
//     MdlID: string;
//     OS: string;
//     UsrSessID: string;
//   };
//   Do_MerchDtl: {
//     BKY_PRDENUM: string;
//     FURL: string;
//     MerchUID: string;
//     SURL: string;
//   };
//   Do_PyrDtl: {
//     Pyr_MPhone: string;
//     Pyr_Name: string;
//     Emailid?: string;
//     ISDNCD?: string;
//   };
//   Do_TxnDtl: Array<{
//     SubMerchUID: string;
//     Txn_AMT: string;
//   }>;
//   Do_TxnHdr: {
//     BKY_Txn_UID: string;
//     Merch_Txn_UID: string;
//     PayFor: string;
//     PayMethod: string;
//     Txn_HDR: string;
//     hashMac: string;
//   };
// }

// // Form Data Interface
// interface FormData {
//   firstName: string;
//   lastName: string;
//   phone: string;
//   email: string;
//   state: string;
//   city: string;
//   address: string;
// }

// // Form Errors Interface
// interface FormErrors {
//   firstName?: string;
//   lastName?: string;
//   phone?: string;
//   email?: string;
//   state?: string;
//   city?: string;
//   address?: string;
// }

// const REQUIRED_FIELDS = [
//   "firstName",
//   "lastName",
//   "phone",
//   "email",
//   "state",
//   "city",
//   "address",
// ];
// const PHONE_REGEX = /^\d{8,}$/; // Flexible: Accepts 8 or more digits
// const EMAIL_REGEX = /\S+@\S+\.\S+/;

// // Utility Functions
// const saveFormData = async (data: FormData) => {
//   try {
//     await SecureStore.setItemAsync(FORM_DATA_KEY, JSON.stringify(data));
//   } catch (error) {
//     console.error("Error saving form data:", error);
//   }
// };

// const loadFormData = async (): Promise<FormData | null> => {
//   try {
//     const savedData = await SecureStore.getItemAsync(FORM_DATA_KEY);
//     return savedData ? JSON.parse(savedData) : null;
//   } catch (error) {
//     console.error("Error loading form data:", error);
//     return null;
//   }
// };

// export default function CheckoutPage() {
//   const insets = useSafeAreaInsets();
//   const navigation = useNavigation();
//   const { items, total, discountedTotal, appliedCoupon, clearCart } =
//     useCartStore();
//   const {
//     shippingFee,
//     loading: isLoadingShippingFee,
//     error: shippingFeeError,
//   } = useShippingFee();

//   const successScale = useRef(new Animated.Value(0)).current;
//   const successOpacity = useRef(new Animated.Value(0)).current;
//   const checkmarkStroke = useRef(new Animated.Value(0)).current;

//   const [formData, setFormData] = useState<FormData>({
//     firstName: "",
//     lastName: "",
//     phone: "",
//     email: "",
//     state: "",
//     city: "",
//     address: "",
//   });
//   const [formErrors, setFormErrors] = useState<FormErrors>({});
//   const [isProcessing, setIsProcessing] = useState(false);
//   const [paymentError, setPaymentError] = useState<string | null>(null);
//   const [showWebView, setShowWebView] = useState(false);
//   const [paymentUrl, setPaymentUrl] = useState<string | null>(null);
//   const [isWebViewLoading, setIsWebViewLoading] = useState(true);
//   const [showSuccessModal, setShowSuccessModal] = useState(false);
//   const [showFailureModal, setShowFailureModal] = useState(false);

//   // Load saved form data on mount
//   useEffect(() => {
//     const loadSavedData = async () => {
//       const savedData = await loadFormData();
//       if (savedData) {
//         setFormData(savedData);
//       }
//     };
//     loadSavedData();
//   }, []);

//   // Redirect to cart if no items
//   useEffect(() => {
//     if (items.length === 0) {
//       router.replace("/(root)/Cart");
//     }
//   }, [items.length]);

//   // Form Validation
//   const validateForm = (): boolean => {
//     const errors: FormErrors = {};
//     let isValid = true;

//     if (!formData.firstName.trim()) {
//       errors.firstName = "First name is required";
//       isValid = false;
//     }
//     if (!formData.lastName.trim()) {
//       errors.lastName = "Last name is required";
//       isValid = false;
//     }
//     if (!formData.email.trim()) {
//       errors.email = "Email is required";
//       isValid = false;
//     } else if (!EMAIL_REGEX.test(formData.email)) {
//       errors.email = "Invalid email address";
//       isValid = false;
//     }
//     if (!formData.phone.trim()) {
//       errors.phone = "Phone number is required";
//       isValid = false;
//     } else {
//       const cleanPhone = formData.phone.replace(/[^\d]/g, "");
//       if (!PHONE_REGEX.test(cleanPhone)) {
//         errors.phone = "Phone number must be at least 8 digits";
//         isValid = false;
//       }
//     }
//     if (!formData.state.trim()) {
//       errors.state = "State is required";
//       isValid = false;
//     }
//     if (!formData.city.trim()) {
//       errors.city = "City is required";
//       isValid = false;
//     }
//     if (!formData.address.trim()) {
//       errors.address = "Delivery address is required";
//       isValid = false;
//     }

//     setFormErrors(errors);
//     if (!isValid) {
//       Toast.show({
//         type: "error",
//         text1: "Form Validation Error",
//         text2: "Please fill in all required fields correctly",
//         position: "top",
//       });
//     }
//     return isValid;
//   };

//   // Success Animation
//   const animateSuccess = () => {
//     Animated.parallel([
//       Animated.spring(successScale, {
//         toValue: 1,
//         friction: 8,
//         tension: 40,
//         useNativeDriver: true,
//       }),
//       Animated.timing(successOpacity, {
//         toValue: 1,
//         duration: 200,
//         useNativeDriver: true,
//       }),
//       Animated.timing(checkmarkStroke, {
//         toValue: 1,
//         duration: 600,
//         easing: Easing.bezier(0.65, 0, 0.45, 1),
//         useNativeDriver: true,
//       }),
//     ]).start();
//   };

//   // Handle Back Press
//   const handleBackPress = useCallback(() => {
//     if (showWebView) {
//       Alert.alert(
//         "Cancel Payment?",
//         "Are you sure you want to cancel? This payment will not be processed.",
//         [
//           { text: "Continue Payment", style: "cancel" },
//           {
//             text: "Cancel Payment",
//             style: "destructive",
//             onPress: () => {
//               setShowWebView(false);
//               setPaymentUrl(null);
//               setShowFailureModal(true);
//             },
//           },
//         ]
//       );
//       return true;
//     }
//     router.push("/(root)/Cart");
//     return true;
//   }, [showWebView]);

//   useEffect(() => {
//     const backHandler = BackHandler.addEventListener(
//       "hardwareBackPress",
//       handleBackPress
//     );
//     return () => backHandler.remove();
//   }, [handleBackPress]);

//   useFocusEffect(
//     useCallback(() => {
//       navigation.setOptions({
//         gestureEnabled: !showWebView,
//         headerShown: false,
//       });
//     }, [showWebView])
//   );

//   // Payment Success Handler
//   const handlePaymentSuccess = async () => {
//     await saveFormData(formData);
//     clearCart();
//     setShowWebView(false);
//     setPaymentUrl(null);
//     successScale.setValue(0);
//     successOpacity.setValue(0);
//     checkmarkStroke.setValue(0);
//     setShowSuccessModal(true);
//     animateSuccess();
//     setTimeout(() => {
//       setShowSuccessModal(false);
//       router.push("/(root)/Cart");
//     }, 3000);
//   };

//   // Payment Failure Handler
//   const handlePaymentFailure = () => {
//     setShowWebView(false);
//     setPaymentUrl(null);
//     setShowFailureModal(true);
//   };

//   // Payment Error Handler
//   const handlePaymentError = (errorMessage: string) => {
//     setPaymentError(errorMessage);
//     setShowFailureModal(true);
//   };

//   // Calculate Totals
//   const subtotal = total;
//   const discount = appliedCoupon
//     ? appliedCoupon.type === "percentage"
//       ? (total * appliedCoupon.amount) / 100
//       : appliedCoupon.amount
//     : 0;
//   const finalTotal = (discountedTotal || total) + shippingFee;

//   // Handle Payment Submission
//   const handlePayment = async () => {
//     if (isProcessing || !validateForm()) return;

//     try {
//       const netInfo = await NetInfo.fetch();
//       if (!netInfo.isConnected) {
//         Toast.show({
//           type: "error",
//           text1: "No Internet Connection",
//           text2: "Please check your connection and try again",
//           position: "top",
//         });
//         return;
//       }

//       setIsProcessing(true);
//       setPaymentError(null);

//       const currentDate = new Date()
//         .toISOString()
//         .replace(/[^0-9]/g, "")
//         .slice(0, 14);
//       const randomSuffix = Math.random().toString(36).slice(2, 6);
//       const orderId = `ORD${currentDate}${randomSuffix}`;

//       // createPaymentRequest function
//       const createPaymentRequest = (
//         formData: FormData,
//         orderId: string,
//         amount: number,
//         merchantId: string
//       ): PaymentRequest => {
//         const txnHDR = `${Date.now()}${Math.floor(Math.random() * 10000)}`;
//         const rndnum = Math.random().toString(36).slice(2);
//         const sequence = `${merchantId}|${orderId}|${SURL}|${FURL}|${amount.toFixed(
//           3
//         )}|GEN|${SECRET_KEY}|${rndnum}`;
//         const hashMac = CryptoJS.SHA512(sequence).toString(CryptoJS.enc.Hex);

//         return {
//           DBRqst: "PY_ECom",
//           Do_Appinfo: {
//             APIVer: "2.1",
//             APPID: "PG",
//             APPTyp: "MOB",
//             AppVer: "1.0",
//             Country: "KW",
//             DevcType: "5",
//             HsCode: "",
//             IPAddrs: "",
//             MdlID: "Pay_Req",
//             OS: Platform.OS === "ios" ? "iOS" : "Android",
//             UsrSessID: "",
//           },
//           Do_MerchDtl: {
//             BKY_PRDENUM: "ECom",
//             FURL: FURL,
//             MerchUID: merchantId,
//             SURL: SURL,
//           },
//           Do_PyrDtl: {
//             Pyr_Name: `${formData.firstName} ${formData.lastName}`.trim(),
//             Pyr_MPhone: formData.phone.replace(/[^0-9]/g, ""),
//             Emailid: formData.email,
//             ISDNCD: "965",
//           },
//           Do_TxnDtl: [
//             {
//               SubMerchUID: merchantId,
//               Txn_AMT: amount.toFixed(3),
//             },
//           ],
//           Do_TxnHdr: {
//             BKY_Txn_UID: "",
//             Merch_Txn_UID: orderId,
//             PayFor: "ECom",
//             PayMethod: "KNET",
//             Txn_HDR: txnHDR,
//             hashMac: hashMac,
//           },
//         };
//       };

//       const paymentRequest = createPaymentRequest(
//         formData,
//         orderId,
//         finalTotal,
//         MerchUID
//       );

//       console.log("Payment Request:", JSON.stringify(paymentRequest, null, 2));

//       const response = await fetch(PAYMENT_API_URL, {
//         method: "POST",
//         headers: {
//           "Content-Type": "application/json",
//           Accept: "application/json",
//         },
//         body: JSON.stringify(paymentRequest),
//       });

//       if (!response.ok) {
//         throw new Error(`Payment service unavailable: ${response.status}`);
//       }

//       const data = await response.json();
//       console.log("Payment Response:", data);

//       const paymentUrl = IS_TEST_ENV ? data?.paymentUrl : data?.PayUrl;

//       if (!paymentUrl || !paymentUrl.startsWith("https://")) {
//         throw new Error("Invalid or insecure payment URL received");
//       }

//       setPaymentUrl(paymentUrl);
//       setShowWebView(true);
//     } catch (error: any) {
//       const errorMessage = error.message || "Payment initiation failed";
//       console.error("Payment Error:", error);
//       setPaymentError(errorMessage);
//       Toast.show({
//         type: "error",
//         text1: "Payment Error",
//         text2: errorMessage,
//         position: "top",
//       });
//     } finally {
//       setIsProcessing(false);
//     }
//   };

//   if (items.length === 0) {
//     return null;
//   }

//   return (
//     <SafeAreaView style={[styles.safeArea, { paddingTop: insets.top }]}>
//       <KeyboardAvoidingView
//         behavior={Platform.OS === "ios" ? "padding" : "height"}
//         style={styles.container}
//       >
//         <StatusBar barStyle="dark-content" backgroundColor="#f9fafb" />
//         <View style={styles.header}>
//           <TouchableOpacity
//             onPress={handleBackPress}
//             style={styles.backButton}
//             hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//           >
//             <ChevronLeft color="#E53935" size={28} />
//           </TouchableOpacity>
//           <Text style={styles.headerTitle}>Secure Checkout</Text>
//         </View>

//         <ScrollView
//           style={styles.container}
//           contentContainerStyle={styles.contentContainer}
//           showsVerticalScrollIndicator={false}
//         >
//           {/* Delivery Information Section */}
//           <View style={styles.formContainer}>
//             <Text style={styles.formTitle}>Delivery Information</Text>
//             <Text style={styles.deliveryNote}>
//               Orders will be delivered within the next business day.
//             </Text>

//             {/* Personal Information */}
//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>Personal Information</Text>
//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <User size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>First Name *</Text>
//                 </View>
//                 <TextInput
//                   style={[
//                     styles.input,
//                     formErrors.firstName && styles.inputError,
//                   ]}
//                   value={formData.firstName}
//                   onChangeText={(text) => {
//                     setFormData((prev) => ({ ...prev, firstName: text }));
//                     if (formErrors.firstName)
//                       setFormErrors((prev) => ({
//                         ...prev,
//                         firstName: undefined,
//                       }));
//                   }}
//                   placeholder="Enter your first name"
//                   autoCapitalize="words"
//                 />
//                 {formErrors.firstName && (
//                   <Text style={styles.errorText}>{formErrors.firstName}</Text>
//                 )}
//               </View>

//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <User size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>Last Name *</Text>
//                 </View>
//                 <TextInput
//                   style={[
//                     styles.input,
//                     formErrors.lastName && styles.inputError,
//                   ]}
//                   value={formData.lastName}
//                   onChangeText={(text) => {
//                     setFormData((prev) => ({ ...prev, lastName: text }));
//                     if (formErrors.lastName)
//                       setFormErrors((prev) => ({
//                         ...prev,
//                         lastName: undefined,
//                       }));
//                   }}
//                   placeholder="Enter your last name"
//                   autoCapitalize="words"
//                 />
//                 {formErrors.lastName && (
//                   <Text style={styles.errorText}>{formErrors.lastName}</Text>
//                 )}
//               </View>

//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <Mail size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>Email *</Text>
//                 </View>
//                 <TextInput
//                   style={[styles.input, formErrors.email && styles.inputError]}
//                   value={formData.email}
//                   onChangeText={(text) => {
//                     setFormData((prev) => ({ ...prev, email: text }));
//                     if (formErrors.email)
//                       setFormErrors((prev) => ({ ...prev, email: undefined }));
//                   }}
//                   placeholder="Enter your email"
//                   keyboardType="email-address"
//                   autoCapitalize="none"
//                 />
//                 {formErrors.email && (
//                   <Text style={styles.errorText}>{formErrors.email}</Text>
//                 )}
//               </View>

//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <Phone size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>Phone Number *</Text>
//                 </View>
//                 <TextInput
//                   style={[styles.input, formErrors.phone && styles.inputError]}
//                   value={formData.phone}
//                   onChangeText={(text) => {
//                     const cleaned = text.replace(/[^\d]/g, "");
//                     setFormData((prev) => ({ ...prev, phone: cleaned }));
//                     if (formErrors.phone)
//                       setFormErrors((prev) => ({ ...prev, phone: undefined }));
//                   }}
//                   placeholder="e.g., 12345678"
//                   keyboardType="phone-pad"
//                   maxLength={15}
//                 />
//                 {formErrors.phone ? (
//                   <Text style={styles.errorText}>{formErrors.phone}</Text>
//                 ) : (
//                   <Text style={styles.helperText}>
//                     Enter your Kuwait mobile number (minimum 8 digits)
//                   </Text>
//                 )}
//               </View>
//             </View>

//             {/* Delivery Address */}
//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>Delivery Address</Text>
//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <MapPin size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>State *</Text>
//                 </View>
//                 <TextInput
//                   style={[styles.input, formErrors.state && styles.inputError]}
//                   value={formData.state}
//                   onChangeText={(text) => {
//                     setFormData((prev) => ({ ...prev, state: text }));
//                     if (formErrors.state)
//                       setFormErrors((prev) => ({ ...prev, state: undefined }));
//                   }}
//                   placeholder="Enter your state/governorate"
//                 />
//                 {formErrors.state && (
//                   <Text style={styles.errorText}>{formErrors.state}</Text>
//                 )}
//               </View>

//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <MapPin size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>City *</Text>
//                 </View>
//                 <TextInput
//                   style={[styles.input, formErrors.city && styles.inputError]}
//                   value={formData.city}
//                   onChangeText={(text) => {
//                     setFormData((prev) => ({ ...prev, city: text }));
//                     if (formErrors.city)
//                       setFormErrors((prev) => ({ ...prev, city: undefined }));
//                   }}
//                   placeholder="Enter your city"
//                 />
//                 {formErrors.city && (
//                   <Text style={styles.errorText}>{formErrors.city}</Text>
//                 )}
//               </View>

//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <MapPin size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>Delivery Address *</Text>
//                 </View>
//                 <TextInput
//                   style={[
//                     styles.input,
//                     formErrors.address && styles.inputError,
//                   ]}
//                   value={formData.address}
//                   onChangeText={(text) => {
//                     setFormData((prev) => ({ ...prev, address: text }));
//                     if (formErrors.address)
//                       setFormErrors((prev) => ({
//                         ...prev,
//                         address: undefined,
//                       }));
//                   }}
//                   placeholder="Enter your full delivery address"
//                   multiline
//                   numberOfLines={3}
//                 />
//                 {formErrors.address && (
//                   <Text style={styles.errorText}>{formErrors.address}</Text>
//                 )}
//               </View>
//             </View>
//           </View>

//           {/* Order Summary */}
//           <View style={styles.card}>
//             <View style={styles.cardTitleContainer}>
//               <Text style={styles.cardTitle}>Order Summary</Text>
//               <Text style={styles.itemCount}>{items.length} items</Text>
//             </View>
//             {items.map((item) => (
//               <View key={item.documentId} style={styles.itemRow}>
//                 <View style={styles.itemDetails}>
//                   <Text style={styles.itemName} numberOfLines={1}>
//                     {item.name}
//                   </Text>
//                   <Text style={styles.itemQuantity}>Qty: {item.quantity}</Text>
//                 </View>
//                 <Text style={styles.itemPrice}>
//                   {((item.salesPrice || item.price) * item.quantity).toFixed(3)}{" "}
//                   KWD
//                 </Text>
//               </View>
//             ))}

//             <View style={styles.summaryContainer}>
//               <OrderSummaryRow
//                 label="Subtotal"
//                 value={`${subtotal.toFixed(3)} KWD`}
//               />
//               {appliedCoupon && (
//                 <OrderSummaryRow
//                   label={`Discount (${appliedCoupon.code})`}
//                   value={`- ${discount.toFixed(3)} KWD`}
//                   isDiscount
//                 />
//               )}
//               <View style={styles.shippingFeeRow}>
//                 <Text style={styles.summaryLabel}>Shipping Fee</Text>
//                 <View style={styles.shippingFeeValueContainer}>
//                   {isLoadingShippingFee ? (
//                     <ActivityIndicator size="small" color="#10B981" />
//                   ) : shippingFeeError ? (
//                     <Text style={styles.errorValue}>Error loading fee</Text>
//                   ) : (
//                     <Text style={styles.summaryValue}>{`${shippingFee.toFixed(
//                       3
//                     )} KWD`}</Text>
//                   )}
//                 </View>
//               </View>
//               <View style={styles.divider} />
//               <OrderSummaryRow
//                 label="Total Amount"
//                 value={`${finalTotal.toFixed(3)} KWD`}
//                 isTotal
//                 isLoading={isLoadingShippingFee}
//               />
//             </View>
//           </View>

//           {/* Security Info */}
//           <View style={styles.securityCard}>
//             <View style={styles.securityHeader}>
//               <Lock size={20} color="#10B981" />
//               <Text style={styles.securityTitle}>Secure Payment</Text>
//             </View>
//             <Text style={styles.securityText}>
//               • SSL encrypted payment processing • Verified by Bookeey Payment
//               Gateway • Your payment details are protected
//             </Text>
//           </View>

//           {/* Pay Button */}
//           <TouchableOpacity
//             style={[
//               styles.payButton,
//               (isProcessing || isLoadingShippingFee) &&
//                 styles.payButtonDisabled,
//             ]}
//             onPress={handlePayment}
//             disabled={isProcessing || isLoadingShippingFee}
//           >
//             {isProcessing ? (
//               <ActivityIndicator color="white" size="small" />
//             ) : (
//               <View style={styles.payButtonContent}>
//                 <CreditCard size={20} color="white" />
//                 <Text style={styles.payButtonText}>
//                   Pay {finalTotal.toFixed(3)} KWD
//                 </Text>
//               </View>
//             )}
//           </TouchableOpacity>
//           {paymentError && <Text style={styles.errorText}>{paymentError}</Text>}
//         </ScrollView>

//         {/* WebView Modal */}
//         <Modal
//           visible={showWebView}
//           animationType="slide"
//           onRequestClose={handleBackPress}
//         >
//           <SafeAreaView style={styles.modalContainer}>
//             <View style={styles.webViewHeader}>
//               <TouchableOpacity
//                 onPress={handleBackPress}
//                 style={styles.webViewCloseButton}
//                 hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//               >
//                 <ArrowLeft color="#E53935" size={24} />
//               </TouchableOpacity>
//               <View style={styles.webViewTitleContainer}>
//                 <Lock size={16} color="#10B981" />
//                 <Text style={styles.webViewTitle}>Secure Payment</Text>
//               </View>
//             </View>
//             {isWebViewLoading && <PaymentLoadingOverlay />}
//             {paymentUrl && (
//               <WebView
//                 source={{ uri: paymentUrl }}
//                 onNavigationStateChange={(navState) => {
//                   if (navState.url.includes("/success")) {
//                     handlePaymentSuccess();
//                   } else if (navState.url.includes("/failure")) {
//                     handlePaymentFailure();
//                   }
//                 }}
//                 onLoadStart={() => setIsWebViewLoading(true)}
//                 onLoadEnd={() => setIsWebViewLoading(false)}
//                 onError={(syntheticEvent) =>
//                   handlePaymentError(syntheticEvent.nativeEvent.description)
//                 }
//                 onHttpError={() => handlePaymentError("Connection error")}
//                 style={styles.webView}
//                 incognito={true}
//                 cacheEnabled={false}
//                 domStorageEnabled={true}
//                 javaScriptEnabled={true}
//                 startInLoadingState={true}
//               />
//             )}
//           </SafeAreaView>
//         </Modal>

//         {/* Success Modal */}
//         <Modal
//           visible={showSuccessModal}
//           transparent={true}
//           animationType="fade"
//           onRequestClose={() => setShowSuccessModal(false)}
//         >
//           <View style={styles.modalBackground}>
//             <Animated.View
//               style={[
//                 styles.modalContent,
//                 styles.successModal,
//                 {
//                   transform: [{ scale: successScale }],
//                   opacity: successOpacity,
//                 },
//               ]}
//             >
//               <View style={styles.checkmarkContainer}>
//                 <Animated.View
//                   style={[
//                     styles.checkmarkCircle,
//                     { transform: [{ scale: successScale }] },
//                   ]}
//                 >
//                   <Animated.View
//                     style={[
//                       styles.checkmarkStroke,
//                       { opacity: checkmarkStroke },
//                     ]}
//                   >
//                     <CheckCircle size={48} color="#10B981" />
//                   </Animated.View>
//                 </Animated.View>
//               </View>
//               <Animated.Text
//                 style={[styles.modalTitle, { opacity: successOpacity }]}
//               >
//                 Payment Successful! 🎉
//               </Animated.Text>
//               <Animated.Text
//                 style={[styles.modalText, { opacity: successOpacity }]}
//               >
//                 Thank you for your order. It will be delivered by the next
//                 business day.
//               </Animated.Text>
//             </Animated.View>
//           </View>
//         </Modal>

//         {/* Failure Modal */}
//         <Modal
//           visible={showFailureModal}
//           transparent={true}
//           animationType="fade"
//           onRequestClose={() => setShowFailureModal(false)}
//         >
//           <View style={styles.modalBackground}>
//             <View style={[styles.modalContent, styles.failureModal]}>
//               <XCircle size={48} color="#E53935" />
//               <Text style={styles.modalTitle}>Payment Failed</Text>
//               <Text style={styles.modalText}>
//                 {paymentError ||
//                   "Please try again or use a different payment method."}
//               </Text>
//               <TouchableOpacity
//                 style={styles.modalButton}
//                 onPress={() => setShowFailureModal(false)}
//               >
//                 <Text style={styles.modalButtonText}>Try Again</Text>
//               </TouchableOpacity>
//             </View>
//           </View>
//         </Modal>
//       </KeyboardAvoidingView>
//       <Toast />
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: { flex: 1, backgroundColor: "#f9fafb" },
//   container: { flex: 1 },
//   contentContainer: { padding: 16, paddingBottom: 100 },
//   header: {
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     paddingVertical: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f0f0f0",
//     backgroundColor: "#f9fafb",
//   },
//   backButton: { padding: 4 },
//   headerTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#1f2937",
//     marginLeft: 16,
//   },
//   formContainer: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   section: { marginBottom: 24 },
//   sectionTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#e5e7eb",
//     paddingBottom: 4,
//   },
//   formTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 12,
//   },
//   formField: { marginBottom: 16 },
//   inputLabelContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 6,
//     marginBottom: 4,
//   },
//   inputLabel: { fontSize: 14, fontFamily: "Cairo-SemiBold", color: "#4b5563" },
//   input: {
//     borderWidth: 1,
//     borderColor: "#e5e7eb",
//     borderRadius: 8,
//     padding: 12,
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#1f2937",
//     backgroundColor: "#fafafa",
//   },
//   inputError: { borderColor: "#ef4444" },
//   errorText: {
//     color: "#ef4444",
//     fontSize: 12,
//     fontFamily: "Cairo",
//     marginTop: 4,
//   },
//   helperText: {
//     fontSize: 12,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//     marginTop: 4,
//   },
//   deliveryNote: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#10B981",
//     marginBottom: 16,
//     textAlign: "center",
//     backgroundColor: "#f0fdf4",
//     padding: 8,
//     borderRadius: 8,
//   },
//   card: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   cardTitleContainer: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 16,
//   },
//   cardTitle: { fontSize: 18, fontFamily: "Cairo-SemiBold", color: "#1f2937" },
//   itemCount: { fontSize: 14, fontFamily: "Cairo", color: "#6b7280" },
//   itemRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 12,
//     paddingBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f1f5f9",
//   },
//   itemDetails: { flex: 1, paddingRight: 8 },
//   itemName: {
//     fontSize: 15,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//     marginBottom: 4,
//   },
//   itemQuantity: { fontSize: 13, fontFamily: "Cairo", color: "#6b7280" },
//   itemPrice: { fontSize: 15, fontFamily: "Cairo-Bold", color: "#374151" },
//   summaryContainer: {
//     marginTop: 16,
//     paddingTop: 16,
//     borderTopWidth: 1,
//     borderTopColor: "#e5e7eb",
//   },
//   divider: { height: 1, backgroundColor: "#e5e7eb", marginVertical: 12 },
//   securityCard: {
//     backgroundColor: "#f0fdf4",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 24,
//     borderWidth: 1,
//     borderColor: "#86efac",
//   },
//   securityHeader: {
//     flexDirection: "row",
//     alignItems: "center",
//     marginBottom: 12,
//     gap: 8,
//   },
//   securityTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#047857",
//   },
//   securityText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4B5563",
//     lineHeight: 22,
//   },
//   payButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 12,
//     padding: 18,
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 12,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//   },
//   payButtonDisabled: { opacity: 0.6 },
//   payButtonContent: { flexDirection: "row", alignItems: "center", gap: 10 },
//   payButtonText: { color: "white", fontSize: 16, fontFamily: "Cairo-Bold" },
//   modalBackground: {
//     flex: 1,
//     backgroundColor: "rgba(0, 0, 0, 0.5)",
//     justifyContent: "center",
//     alignItems: "center",
//   },
//   modalContainer: { flex: 1, backgroundColor: "#fff" },
//   modalContent: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "80%",
//     maxWidth: 300,
//   },
//   successModal: {
//     backgroundColor: "#FFFFFF",
//     borderColor: "#10B981",
//     borderWidth: 2,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//   },
//   failureModal: { borderColor: "#E53935", borderWidth: 2 },
//   checkmarkContainer: {
//     width: 80,
//     height: 80,
//     marginBottom: 16,
//     alignItems: "center",
//     justifyContent: "center",
//   },
//   checkmarkCircle: {
//     width: 80,
//     height: 80,
//     borderRadius: 40,
//     backgroundColor: "#E8FFF5",
//     alignItems: "center",
//     justifyContent: "center",
//   },
//   checkmarkStroke: { transform: [{ scale: 1.2 }] },
//   modalTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   modalText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   modalButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 8,
//     paddingVertical: 12,
//     paddingHorizontal: 24,
//     marginTop: 24,
//   },
//   modalButtonText: { color: "white", fontSize: 16, fontFamily: "Cairo-Bold" },
//   webView: { flex: 1 },
//   webViewHeader: {
//     height: 56,
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     borderBottomWidth: 1,
//     borderBottomColor: "#E5E7EB",
//     backgroundColor: "#f9fafb",
//   },
//   webViewCloseButton: { padding: 8 },
//   webViewTitleContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 8,
//     flex: 1,
//     justifyContent: "center",
//     marginRight: 40,
//   },
//   webViewTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   loadingOverlay: {
//     position: "absolute",
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//     backgroundColor: "rgba(255,255,255,0.95)",
//     justifyContent: "center",
//     alignItems: "center",
//     zIndex: 1000,
//   },
//   loadingCard: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//     width: "80%",
//     maxWidth: 300,
//   },
//   loadingTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   loadingSubtext: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   errorValue: { fontSize: 14, fontFamily: "Cairo", color: "#DC2626" },
//   shippingFeeRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginVertical: 4,
//   },
//   shippingFeeValueContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     justifyContent: "flex-end",
//   },
//   summaryLabel: { fontSize: 14, fontFamily: "Cairo", color: "#4b5563" },
//   summaryValue: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
// });

/********************************** */

// import React, { useState, useCallback, useEffect, useRef } from "react";
// import {
//   View,
//   Text,
//   ScrollView,
//   Alert,
//   ActivityIndicator,
//   StyleSheet,
//   Platform,
//   TouchableOpacity,
//   SafeAreaView,
//   BackHandler,
//   Modal,
//   StatusBar,
//   TextInput,
//   KeyboardAvoidingView,
//   Animated,
//   Easing,
// } from "react-native";
// import { router, useNavigation } from "expo-router";
// import { WebView } from "react-native-webview";
// import { useFocusEffect } from "@react-navigation/native";
// import {
//   Shield,
//   CreditCard,
//   ArrowLeft,
//   Lock,
//   ChevronLeft,
//   XCircle,
//   User,
//   Phone,
//   Mail,
//   MapPin,
// } from "lucide-react-native";
// import Toast from "react-native-toast-message";
// import NetInfo from "@react-native-community/netinfo";
// import * as SecureStore from "expo-secure-store";
// import useCartStore from "../../store/cartStore";
// import { OrderSummaryRow } from "../Components/OrderSummary";
// import useShippingFee from "../hooks/useShippingFee";
// import { useSafeAreaInsets } from "react-native-safe-area-context";
// import CryptoJS from "crypto-js";
// import { PaymentSuccessModal } from "../Components/PaymentSuccessModal";

// // Environment and API Constants
// const IS_TEST_ENV = process.env.EXPO_PUBLIC_IS_TEST_ENV === "true";
// const PAYMENT_API_URL = IS_TEST_ENV
//   ? "https://4f54-37-36-175-221.ngrok-free.app/api/payments/initiate"
//   : "https://pg.bookeey.com/internalapi/api/payment/requestLink";

// const MerchUID = "mer2400018";
// const SECRET_KEY = "0623475"; // Ensure this matches Bookeey's provided key
// const SURL = IS_TEST_ENV
//   ? "https://f36b-37-36-175-221.ngrok-free.app/api/payments/success"
//   : "https://app.bookeeypayment.com/success";
// const FURL = IS_TEST_ENV
//   ? "https://f36b-37-36-175-221.ngrok-free.app/api/payments/failure"
//   : "https://app.bookeeypayment.com/failure";
// const FORM_DATA_KEY = "user_checkout_info";

// // Component for Payment Loading Overlay
// const PaymentLoadingOverlay = () => (
//   <View style={styles.loadingOverlay}>
//     <View style={styles.loadingCard}>
//       <ActivityIndicator size="large" color="#10B981" />
//       <Text style={styles.loadingTitle}>Processing Payment</Text>
//       <Text style={styles.loadingSubtext}>Please don't close this window</Text>
//     </View>
//   </View>
// );

// // Form Data Interface
// interface FormData {
//   firstName: string;
//   lastName: string;
//   phone: string;
//   email: string;
//   state: string;
//   city: string;
//   address: string;
// }

// // Form Errors Interface
// interface FormErrors {
//   firstName?: string;
//   lastName?: string;
//   phone?: string;
//   email?: string;
//   state?: string;
//   city?: string;
//   address?: string;
// }

// // Payment Payload Interfaces
// interface DoAppInfo {
//   APIVer: string;
//   APPID: string;
//   APPTyp: string;
//   AppVer: string;
//   Country: string;
//   DevcType: string;
//   HsCode: string;
//   IPAddrs: string;
//   MdlID: string;
//   OS: string;
//   UsrSessID: string;
// }

// interface DoMerchDtl {
//   BKY_PRDENUM: string;
//   FURL: string;
//   MerchUID: string;
//   SURL: string;
// }

// interface DoPyrDtl {
//   Pyr_Name: string;
//   Pyr_MPhone: string;
//   ISDNCD: string;
// }

// interface DoTxnDtl {
//   SubMerchUID: string;
//   Txn_AMT: string;
// }

// interface DoTxnHdr {
//   BKY_Txn_UID: string;
//   Merch_Txn_UID: string;
//   PayFor: string;
//   PayMethod: string;
//   Txn_HDR: string;
//   hashMac: string;
// }

// interface ProductionPayload {
//   DBRqst: string;
//   Do_Appinfo: DoAppInfo;
//   Do_MerchDtl: DoMerchDtl;
//   Do_PyrDtl: DoPyrDtl;
//   Do_TxnDtl: DoTxnDtl[];
//   Do_TxnHdr: DoTxnHdr;
// }

// interface TestPayload {
//   amount: number;
//   orderId: string;
//   customerInfo: {
//     platform: string;
//     customerName: string;
//     customerPhone: string;
//     items: Array<{
//       id: string;
//       name: string;
//       quantity: number;
//       price: number;
//     }>;
//   };
// }

// // Constants
// const REQUIRED_FIELDS = [
//   "firstName",
//   "lastName",
//   "phone",
//   "email",
//   "state",
//   "city",
//   "address",
// ] as const;
// const PHONE_REGEX = /^\d{8,}$/; // Flexible: Accepts 8 or more digits
// const EMAIL_REGEX = /\S+@\S+\.\S+/;

// // Utility Functions
// const saveFormData = async (data: FormData): Promise<void> => {
//   try {
//     await SecureStore.setItemAsync(FORM_DATA_KEY, JSON.stringify(data));
//   } catch (error) {
//     console.error("Error saving form data:", error);
//   }
// };

// const loadFormData = async (): Promise<FormData | null> => {
//   try {
//     const savedData = await SecureStore.getItemAsync(FORM_DATA_KEY);
//     return savedData ? JSON.parse(savedData) : null;
//   } catch (error) {
//     console.error("Error loading form data:", error);
//     return null;
//   }
// };

// export default function CheckoutPage() {
//   const insets = useSafeAreaInsets();
//   const navigation = useNavigation();
//   const { items, total, discountedTotal, appliedCoupon, clearCart } =
//     useCartStore();
//   const {
//     shippingFee,
//     loading: isLoadingShippingFee,
//     error: shippingFeeError,
//   } = useShippingFee();

//   // Animation Refs
//   const successScale = useRef(new Animated.Value(0)).current;
//   const successOpacity = useRef(new Animated.Value(0)).current;
//   const checkmarkStroke = useRef(new Animated.Value(0)).current;

//   // State Declarations
//   const [formData, setFormData] = useState<FormData>({
//     firstName: "",
//     lastName: "",
//     phone: "",
//     email: "",
//     state: "",
//     city: "",
//     address: "",
//   });
//   const [formErrors, setFormErrors] = useState<FormErrors>({});
//   const [isProcessing, setIsProcessing] = useState(false);
//   const [paymentError, setPaymentError] = useState<string | null>(null);
//   const [showWebView, setShowWebView] = useState(false);
//   const [paymentUrl, setPaymentUrl] = useState<string | null>(null);
//   const [isWebViewLoading, setIsWebViewLoading] = useState(true);
//   const [showSuccessModal, setShowSuccessModal] = useState(false);
//   const [showFailureModal, setShowFailureModal] = useState(false);

//   // Load saved form data on mount
//   useEffect(() => {
//     const loadSavedData = async () => {
//       const savedData = await loadFormData();
//       if (savedData) {
//         setFormData(savedData);
//       }
//     };
//     loadSavedData();
//   }, []);

//   // Redirect to cart if no items
//   useEffect(() => {
//     if (items.length === 0) {
//       router.replace("/(root)/Cart");
//     }
//   }, [items.length]);

//   // Form Validation
//   const validateForm = (): boolean => {
//     const errors: FormErrors = {};
//     let isValid = true;

//     if (!formData.firstName.trim()) {
//       errors.firstName = "First name is required";
//       isValid = false;
//     }
//     if (!formData.lastName.trim()) {
//       errors.lastName = "Last name is required";
//       isValid = false;
//     }
//     if (!formData.email.trim()) {
//       errors.email = "Email is required";
//       isValid = false;
//     } else if (!EMAIL_REGEX.test(formData.email)) {
//       errors.email = "Invalid email address";
//       isValid = false;
//     }
//     if (!formData.phone.trim()) {
//       errors.phone = "Phone number is required";
//       isValid = false;
//     } else {
//       const cleanPhone = formData.phone.replace(/[^\d]/g, "");
//       if (!PHONE_REGEX.test(cleanPhone)) {
//         errors.phone = "Phone number must be at least 8 digits";
//         isValid = false;
//       }
//     }
//     if (!formData.state.trim()) {
//       errors.state = "State is required";
//       isValid = false;
//     }
//     if (!formData.city.trim()) {
//       errors.city = "City is required";
//       isValid = false;
//     }
//     if (!formData.address.trim()) {
//       errors.address = "Delivery address is required";
//       isValid = false;
//     }

//     setFormErrors(errors);
//     if (!isValid) {
//       Toast.show({
//         type: "error",
//         text1: "Form Validation Error",
//         text2: "Please fill in all required fields correctly",
//         position: "top",
//       });
//     }
//     return isValid;
//   };

//   // Success Animation
//   const animateSuccess = () => {
//     Animated.parallel([
//       Animated.spring(successScale, {
//         toValue: 1,
//         friction: 8,
//         tension: 40,
//         useNativeDriver: true,
//       }),
//       Animated.timing(successOpacity, {
//         toValue: 1,
//         duration: 200,
//         useNativeDriver: true,
//       }),
//       Animated.timing(checkmarkStroke, {
//         toValue: 1,
//         duration: 600,
//         easing: Easing.bezier(0.65, 0, 0.45, 1),
//         useNativeDriver: true,
//       }),
//     ]).start();
//   };

//   // Handle Back Press
//   const handleBackPress = useCallback(() => {
//     if (showWebView) {
//       Alert.alert(
//         "Cancel Payment?",
//         "Are you sure you want to cancel? This payment will not be processed.",
//         [
//           { text: "Continue Payment", style: "cancel" },
//           {
//             text: "Cancel Payment",
//             style: "destructive",
//             onPress: () => {
//               setShowWebView(false);
//               setPaymentUrl(null);
//               setShowFailureModal(true);
//             },
//           },
//         ]
//       );
//       return true;
//     }

//     router.push("/(root)/Cart");
//     return true;
//   }, [showWebView]);

//   useEffect(() => {
//     const backHandler = BackHandler.addEventListener(
//       "hardwareBackPress",
//       handleBackPress
//     );
//     return () => backHandler.remove();
//   }, [handleBackPress]);

//   useFocusEffect(
//     useCallback(() => {
//       navigation.setOptions({
//         gestureEnabled: !showWebView,
//         headerShown: false,
//       });
//     }, [showWebView])
//   );

//   // Payment Success Handler
//   const handlePaymentSuccess = async () => {
//     await saveFormData(formData);
//     clearCart();
//     setShowWebView(false);
//     setPaymentUrl(null);
//     successScale.setValue(0);
//     successOpacity.setValue(0);
//     checkmarkStroke.setValue(0);
//     setShowSuccessModal(true);
//     animateSuccess();
//     setTimeout(() => {
//       setShowSuccessModal(true);
//       router.push("/(root)/Cart");
//     }, 3000);
//   };

//   // Payment Failure Handler
//   const handlePaymentFailure = () => {
//     setShowWebView(false);
//     setPaymentUrl(null);
//     setShowFailureModal(true);
//   };

//   // Payment Error Handler
//   const handlePaymentError = (errorMessage: string) => {
//     setPaymentError(errorMessage);
//     setShowFailureModal(true);
//   };

//   // Calculate Totals
//   const subtotal = total;
//   const discount = appliedCoupon
//     ? appliedCoupon.type === "percentage"
//       ? (total * appliedCoupon.amount) / 100
//       : appliedCoupon.amount
//     : 0;
//   const finalTotal = (discountedTotal || total) + shippingFee;

//   // Handle Payment Submission
//   const handlePayment = async () => {
//     if (isProcessing || !validateForm()) return;

//     try {
//       const netInfo = await NetInfo.fetch();
//       if (!netInfo.isConnected) {
//         Toast.show({
//           type: "error",
//           text1: "No Internet Connection",
//           text2: "Please check your connection and try again",
//           position: "top",
//         });
//         return;
//       }

//       setIsProcessing(true);
//       setPaymentError(null);

//       const currentDate = new Date()
//         .toISOString()
//         .replace(/[^0-9]/g, "")
//         .slice(0, 14);
//       const randomSuffix = Math.random().toString(36).slice(2, 6);
//       const orderId = `ORD${currentDate}${randomSuffix}`;
//       const fullName = `${formData.firstName} ${formData.lastName}`;
//       const cleanPhone = formData.phone.replace(/[^\d]/g, "");

//       let payload: ProductionPayload | TestPayload;
//       let headers: Record<string, string> = {
//         "Content-Type": "application/json",
//         Accept: "application/json",
//       };

//       if (IS_TEST_ENV) {
//         payload = {
//           amount: Number(finalTotal.toFixed(3)),
//           orderId,
//           customerInfo: {
//             platform: Platform.OS.toUpperCase(),
//             customerName: fullName,
//             customerPhone: cleanPhone,
//             items: items.map((item) => ({
//               id: item.documentId,
//               name: item.name,
//               quantity: item.quantity,
//               price: Number((item.salesPrice || item.price).toFixed(3)),
//             })),
//           },
//         };
//         headers["ngrok-skip-browser-warning"] = "true";
//       } else {
//         const txnHDR = `${Date.now()}${Math.floor(Math.random() * 10000)}`;
//         const rndnum = Math.random().toString(36).slice(2);
//         const sequence = `${MerchUID}|${orderId}|${SURL}|${FURL}|${finalTotal.toFixed(
//           3
//         )}|GEN|${SECRET_KEY}|${rndnum}`;
//         const hashMac = CryptoJS.SHA512(sequence).toString(CryptoJS.enc.Hex);

//         payload = {
//           DBRqst: "PY_ECom",
//           Do_Appinfo: {
//             APIVer: "2.1",
//             APPID: "",
//             APPTyp: "MOB",
//             AppVer: "1.0",
//             Country: "KW",
//             DevcType: "5",
//             HsCode: "",
//             IPAddrs: "",
//             MdlID: "",
//             OS: Platform.OS === "ios" ? "iOS" : "Android",
//             UsrSessID: "",
//           },
//           Do_MerchDtl: {
//             BKY_PRDENUM: "ECom",
//             FURL: FURL,
//             MerchUID: MerchUID,
//             SURL: SURL,
//           },
//           Do_PyrDtl: {
//             Pyr_Name: fullName,
//             Pyr_MPhone: cleanPhone,
//             ISDNCD: "965",
//           },
//           Do_TxnDtl: [
//             {
//               SubMerchUID: MerchUID,
//               Txn_AMT: finalTotal.toFixed(3),
//             },
//           ],
//           Do_TxnHdr: {
//             BKY_Txn_UID: "",
//             Merch_Txn_UID: orderId,
//             PayFor: "ECom",
//             PayMethod: "knet",
//             Txn_HDR: txnHDR,
//             hashMac: hashMac,
//           },
//         };
//       }

//       console.log("Payment Payload:", JSON.stringify(payload, null, 2));

//       const response = await fetch(PAYMENT_API_URL, {
//         method: "POST",
//         headers,
//         body: JSON.stringify(payload),
//       });

//       if (!response.ok) {
//         throw new Error(`Payment service unavailable: ${response.status}`);
//       }

//       const data = await response.json();
//       console.log("Payment Response:", data);
//       const paymentUrl = IS_TEST_ENV ? data?.paymentUrl : data?.PayUrl;

//       if (!paymentUrl || !paymentUrl.startsWith("https://")) {
//         throw new Error("Invalid or insecure payment URL received");
//       }

//       setPaymentUrl(paymentUrl);
//       setShowWebView(true);
//     } catch (error: any) {
//       const errorMessage = error.message || "Payment initiation failed";
//       console.error("Payment Error:", error);
//       setPaymentError(errorMessage);
//       handlePaymentError(errorMessage);
//     } finally {
//       setIsProcessing(false);
//     }
//   };

//   if (items.length === 0) {
//     return null;
//   }

//   return (
//     <SafeAreaView style={[styles.safeArea, { paddingTop: insets.top }]}>
//       <KeyboardAvoidingView
//         behavior={Platform.OS === "ios" ? "padding" : "height"}
//         style={styles.container}
//       >
//         <StatusBar barStyle="dark-content" backgroundColor="#f9fafb" />
//         <View style={styles.header}>
//           <TouchableOpacity
//             onPress={handleBackPress}
//             style={styles.backButton}
//             hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//           >
//             <ChevronLeft color="#E53935" size={28} />
//           </TouchableOpacity>
//           <Text style={styles.headerTitle}>Secure Checkout</Text>
//         </View>

//         <ScrollView
//           style={styles.container}
//           contentContainerStyle={styles.contentContainer}
//           showsVerticalScrollIndicator={false}
//         >
//           {/* Delivery Information Section */}
//           <View style={styles.formContainer}>
//             <Text style={styles.formTitle}>Delivery Information</Text>
//             <Text style={styles.deliveryNote}>
//               Orders will be delivered within the next business day.
//             </Text>

//             {/* Personal Information */}
//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>Personal Information</Text>
//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <User size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>First Name *</Text>
//                 </View>
//                 <TextInput
//                   style={[
//                     styles.input,
//                     formErrors.firstName && styles.inputError,
//                   ]}
//                   value={formData.firstName}
//                   onChangeText={(text) =>
//                     setFormData((prev) => ({ ...prev, firstName: text }))
//                   }
//                   placeholder="Enter your first name"
//                   autoCapitalize="words"
//                 />
//                 {formErrors.firstName && (
//                   <Text style={styles.errorText}>{formErrors.firstName}</Text>
//                 )}
//               </View>

//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <User size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>Last Name *</Text>
//                 </View>
//                 <TextInput
//                   style={[
//                     styles.input,
//                     formErrors.lastName && styles.inputError,
//                   ]}
//                   value={formData.lastName}
//                   onChangeText={(text) =>
//                     setFormData((prev) => ({ ...prev, lastName: text }))
//                   }
//                   placeholder="Enter your last name"
//                   autoCapitalize="words"
//                 />
//                 {formErrors.lastName && (
//                   <Text style={styles.errorText}>{formErrors.lastName}</Text>
//                 )}
//               </View>

//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <Mail size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>Email *</Text>
//                 </View>
//                 <TextInput
//                   style={[styles.input, formErrors.email && styles.inputError]}
//                   value={formData.email}
//                   onChangeText={(text) =>
//                     setFormData((prev) => ({ ...prev, email: text }))
//                   }
//                   placeholder="Enter your email"
//                   keyboardType="email-address"
//                   autoCapitalize="none"
//                 />
//                 {formErrors.email && (
//                   <Text style={styles.errorText}>{formErrors.email}</Text>
//                 )}
//               </View>

//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <Phone size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>Phone Number *</Text>
//                 </View>
//                 <TextInput
//                   style={[styles.input, formErrors.phone && styles.inputError]}
//                   value={formData.phone}
//                   onChangeText={(text) => {
//                     const cleaned = text.replace(/[^\d]/g, "");
//                     setFormData((prev) => ({ ...prev, phone: cleaned }));
//                   }}
//                   placeholder="e.g., 12345678"
//                   keyboardType="phone-pad"
//                   maxLength={15}
//                 />
//                 {formErrors.phone ? (
//                   <Text style={styles.errorText}>{formErrors.phone}</Text>
//                 ) : (
//                   <Text style={styles.helperText}>
//                     Enter your Kuwait mobile number (minimum 8 digits)
//                   </Text>
//                 )}
//               </View>
//             </View>

//             {/* Delivery Address */}
//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>Delivery Address</Text>
//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <MapPin size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>State *</Text>
//                 </View>
//                 <TextInput
//                   style={[styles.input, formErrors.state && styles.inputError]}
//                   value={formData.state}
//                   onChangeText={(text) =>
//                     setFormData((prev) => ({ ...prev, state: text }))
//                   }
//                   placeholder="Enter your state/governorate"
//                 />
//                 {formErrors.state && (
//                   <Text style={styles.errorText}>{formErrors.state}</Text>
//                 )}
//               </View>

//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <MapPin size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>City *</Text>
//                 </View>
//                 <TextInput
//                   style={[styles.input, formErrors.city && styles.inputError]}
//                   value={formData.city}
//                   onChangeText={(text) =>
//                     setFormData((prev) => ({ ...prev, city: text }))
//                   }
//                   placeholder="Enter your city"
//                 />
//                 {formErrors.city && (
//                   <Text style={styles.errorText}>{formErrors.city}</Text>
//                 )}
//               </View>

//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <MapPin size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>Delivery Address *</Text>
//                 </View>
//                 <TextInput
//                   style={[
//                     styles.input,
//                     formErrors.address && styles.inputError,
//                   ]}
//                   value={formData.address}
//                   onChangeText={(text) =>
//                     setFormData((prev) => ({ ...prev, address: text }))
//                   }
//                   placeholder="Enter your full delivery address"
//                   multiline
//                   numberOfLines={3}
//                 />
//                 {formErrors.address && (
//                   <Text style={styles.errorText}>{formErrors.address}</Text>
//                 )}
//               </View>
//             </View>
//           </View>

//           {/* Order Summary */}
//           <View style={styles.card}>
//             <View style={styles.cardTitleContainer}>
//               <Text style={styles.cardTitle}>Order Summary</Text>
//               <Text style={styles.itemCount}>{items.length} items</Text>
//             </View>
//             {items.map((item) => (
//               <View key={item.documentId} style={styles.itemRow}>
//                 <View style={styles.itemDetails}>
//                   <Text style={styles.itemName} numberOfLines={1}>
//                     {item.name}
//                   </Text>
//                   <Text style={styles.itemQuantity}>Qty: {item.quantity}</Text>
//                 </View>
//                 <Text style={styles.itemPrice}>
//                   {((item.salesPrice || item.price) * item.quantity).toFixed(3)}{" "}
//                   KWD
//                 </Text>
//               </View>
//             ))}

//             <View style={styles.summaryContainer}>
//               <OrderSummaryRow
//                 label="Subtotal"
//                 value={`${subtotal.toFixed(3)} KWD`}
//               />
//               {appliedCoupon && (
//                 <OrderSummaryRow
//                   label={`Discount (${appliedCoupon.code})`}
//                   value={`- ${discount.toFixed(3)} KWD`}
//                   isDiscount
//                 />
//               )}
//               <View style={styles.shippingFeeRow}>
//                 <Text style={styles.summaryLabel}>Shipping Fee</Text>
//                 <View style={styles.shippingFeeValueContainer}>
//                   {isLoadingShippingFee ? (
//                     <ActivityIndicator size="small" color="#10B981" />
//                   ) : shippingFeeError ? (
//                     <Text style={styles.errorValue}>Error loading fee</Text>
//                   ) : (
//                     <Text style={styles.summaryValue}>{`${shippingFee.toFixed(
//                       3
//                     )} KWD`}</Text>
//                   )}
//                 </View>
//               </View>
//               <View style={styles.divider} />
//               <OrderSummaryRow
//                 label="Total Amount"
//                 value={`${finalTotal.toFixed(3)} KWD`}
//                 isTotal
//                 isLoading={isLoadingShippingFee}
//               />
//             </View>
//           </View>

//           {/* Security Info */}
//           <View style={styles.securityCard}>
//             <View style={styles.securityHeader}>
//               <Lock size={20} color="#10B981" />
//               <Text style={styles.securityTitle}>Secure Payment</Text>
//             </View>
//             <Text style={styles.securityText}>
//               • SSL encrypted payment processing • Verified by Bookeey Payment
//               Gateway • Your payment details are protected
//             </Text>
//           </View>

//           {/* Pay Button */}
//           <TouchableOpacity
//             style={[
//               styles.payButton,
//               (isProcessing || isLoadingShippingFee) &&
//                 styles.payButtonDisabled,
//             ]}
//             onPress={handlePayment}
//             disabled={isProcessing || isLoadingShippingFee}
//           >
//             {isProcessing ? (
//               <ActivityIndicator color="white" size="small" />
//             ) : (
//               <View style={styles.payButtonContent}>
//                 <CreditCard size={20} color="white" />
//                 <Text style={styles.payButtonText}>
//                   Pay {finalTotal.toFixed(3)} KWD
//                 </Text>
//               </View>
//             )}
//           </TouchableOpacity>
//           {paymentError && <Text style={styles.errorText}>{paymentError}</Text>}
//         </ScrollView>

//         {/* WebView Modal */}
//         <Modal
//           visible={showWebView}
//           animationType="slide"
//           onRequestClose={handleBackPress}
//         >
//           <SafeAreaView style={styles.modalContainer}>
//             <View style={styles.webViewHeader}>
//               <TouchableOpacity
//                 onPress={handleBackPress}
//                 style={styles.webViewCloseButton}
//                 hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//               >
//                 <ArrowLeft color="#E53935" size={24} />
//               </TouchableOpacity>
//               <View style={styles.webViewTitleContainer}>
//                 <Lock size={16} color="#10B981" />
//                 <Text style={styles.webViewTitle}>Secure Payment</Text>
//               </View>
//             </View>
//             {isWebViewLoading && <PaymentLoadingOverlay />}
//             {paymentUrl && (
//               <WebView
//                 source={{ uri: paymentUrl }}
//                 onNavigationStateChange={(navState) => {
//                   if (navState.url.includes("/success")) {
//                     handlePaymentSuccess();
//                   } else if (navState.url.includes("/failure")) {
//                     handlePaymentFailure();
//                   }
//                 }}
//                 onLoadStart={() => setIsWebViewLoading(true)}
//                 onLoadEnd={() => setIsWebViewLoading(false)}
//                 onError={(syntheticEvent) =>
//                   handlePaymentError(syntheticEvent.nativeEvent.description)
//                 }
//                 onHttpError={() => handlePaymentError("Connection error")}
//                 style={styles.webView}
//                 incognito={true}
//                 cacheEnabled={false}
//                 domStorageEnabled={true}
//                 javaScriptEnabled={true}
//                 startInLoadingState={true}
//               />
//             )}
//           </SafeAreaView>
//         </Modal>

//         {/* Success Modal with Lottie */}
//         <PaymentSuccessModal
//           visible={showSuccessModal}
//           onClose={() => setShowSuccessModal(false)}
//           successScale={successScale}
//           successOpacity={successOpacity}
//           checkmarkStroke={checkmarkStroke}
//         />

//         {/* Failure Modal */}
//         <Modal
//           visible={showFailureModal}
//           transparent={true}
//           animationType="fade"
//           onRequestClose={() => setShowFailureModal(false)}
//         >
//           <View style={styles.modalBackground}>
//             <View style={[styles.modalContent, styles.failureModal]}>
//               <XCircle size={48} color="#E53935" />
//               <Text style={styles.modalTitle}>Payment Failed</Text>
//               <Text style={styles.modalText}>
//                 {paymentError ||
//                   "Please try again or use a different payment method."}
//               </Text>
//               <TouchableOpacity
//                 style={styles.modalButton}
//                 onPress={() => setShowFailureModal(false)}
//               >
//                 <Text style={styles.modalButtonText}>Try Again</Text>
//               </TouchableOpacity>
//             </View>
//           </View>
//         </Modal>
//       </KeyboardAvoidingView>
//       <Toast />
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: { flex: 1, backgroundColor: "#f9fafb" },
//   container: { flex: 1 },
//   contentContainer: { padding: 16, paddingBottom: 100 },
//   header: {
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     paddingVertical: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f0f0f0",
//     backgroundColor: "#f9fafb",
//   },
//   backButton: { padding: 4 },
//   headerTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#1f2937",
//     marginLeft: 16,
//   },
//   formContainer: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   section: { marginBottom: 24 },
//   sectionTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#e5e7eb",
//     paddingBottom: 4,
//   },
//   formTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 12,
//   },
//   formField: { marginBottom: 16 },
//   inputLabelContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 6,
//     marginBottom: 4,
//   },
//   inputLabel: { fontSize: 14, fontFamily: "Cairo-SemiBold", color: "#4b5563" },
//   input: {
//     borderWidth: 1,
//     borderColor: "#e5e7eb",
//     borderRadius: 8,
//     padding: 12,
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#1f2937",
//     backgroundColor: "#fafafa",
//   },
//   inputError: { borderColor: "#ef4444" },
//   errorText: {
//     color: "#ef4444",
//     fontSize: 12,
//     fontFamily: "Cairo",
//     marginTop: 4,
//   },
//   helperText: {
//     fontSize: 12,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//     marginTop: 4,
//   },
//   deliveryNote: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#10B981",
//     marginBottom: 16,
//     textAlign: "center",
//     backgroundColor: "#f0fdf4",
//     padding: 8,
//     borderRadius: 8,
//   },
//   card: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   cardTitleContainer: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 16,
//   },
//   cardTitle: { fontSize: 18, fontFamily: "Cairo-SemiBold", color: "#1f2937" },
//   itemCount: { fontSize: 14, fontFamily: "Cairo", color: "#6b7280" },
//   itemRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 12,
//     paddingBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f1f5f9",
//   },
//   itemDetails: { flex: 1, paddingRight: 8 },
//   itemName: {
//     fontSize: 15,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//     marginBottom: 4,
//   },
//   itemQuantity: { fontSize: 13, fontFamily: "Cairo", color: "#6b7280" },
//   itemPrice: { fontSize: 15, fontFamily: "Cairo-Bold", color: "#374151" },
//   summaryContainer: {
//     marginTop: 16,
//     paddingTop: 16,
//     borderTopWidth: 1,
//     borderTopColor: "#e5e7eb",
//   },
//   divider: { height: 1, backgroundColor: "#e5e7eb", marginVertical: 12 },
//   securityCard: {
//     backgroundColor: "#f0fdf4",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 24,
//     borderWidth: 1,
//     borderColor: "#86efac",
//   },
//   securityHeader: {
//     flexDirection: "row",
//     alignItems: "center",
//     marginBottom: 12,
//     gap: 8,
//   },
//   securityTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#047857",
//   },
//   securityText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4B5563",
//     lineHeight: 22,
//   },
//   payButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 12,
//     padding: 18,
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 12,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//   },
//   payButtonDisabled: { opacity: 0.6 },
//   payButtonContent: { flexDirection: "row", alignItems: "center", gap: 10 },
//   payButtonText: { color: "white", fontSize: 16, fontFamily: "Cairo-Bold" },
//   modalBackground: {
//     flex: 1,
//     backgroundColor: "rgba(0, 0, 0, 0.5)",
//     justifyContent: "center",
//     alignItems: "center",
//   },
//   modalContainer: { flex: 1, backgroundColor: "#fff" },
//   modalContent: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "80%",
//     maxWidth: 300,
//   },
//   failureModal: { borderColor: "#E53935", borderWidth: 2 },
//   modalTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   modalText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   modalButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 8,
//     paddingVertical: 12,
//     paddingHorizontal: 24,
//     marginTop: 24,
//   },
//   modalButtonText: { color: "white", fontSize: 16, fontFamily: "Cairo-Bold" },
//   webView: { flex: 1 },
//   webViewHeader: {
//     height: 56,
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     borderBottomWidth: 1,
//     borderBottomColor: "#E5E7EB",
//     backgroundColor: "#f9fafb",
//   },
//   webViewCloseButton: { padding: 8 },
//   webViewTitleContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 8,
//     flex: 1,
//     justifyContent: "center",
//     marginRight: 40,
//   },
//   webViewTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   loadingOverlay: {
//     position: "absolute",
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//     backgroundColor: "rgba(255,255,255,0.95)",
//     justifyContent: "center",
//     alignItems: "center",
//     zIndex: 1000,
//   },
//   loadingCard: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//     width: "80%",
//     maxWidth: 300,
//   },
//   loadingTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   loadingSubtext: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   errorValue: { fontSize: 14, fontFamily: "Cairo", color: "#DC2626" },
//   shippingFeeRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginVertical: 4,
//   },
//   shippingFeeValueContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     justifyContent: "flex-end",
//   },
//   summaryLabel: { fontSize: 14, fontFamily: "Cairo", color: "#4b5563" },
//   summaryValue: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
// });

/**************************************** */

// import React, { useState, useCallback, useEffect, useRef } from "react";
// import {
//   View,
//   Text,
//   ScrollView,
//   Alert,
//   ActivityIndicator,
//   StyleSheet,
//   Platform,
//   TouchableOpacity,
//   SafeAreaView,
//   BackHandler,
//   Modal,
//   StatusBar,
//   TextInput,
//   KeyboardAvoidingView,
//   Animated,
//   Easing,
// } from "react-native";
// import { router, useNavigation } from "expo-router";
// import { WebView } from "react-native-webview";
// import { useFocusEffect } from "@react-navigation/native";
// import {
//   Shield,
//   CreditCard,
//   ArrowLeft,
//   Lock,
//   ChevronLeft,
//   XCircle,
//   User,
//   Phone,
//   Mail,
//   MapPin,
// } from "lucide-react-native";
// import Toast from "react-native-toast-message";
// import NetInfo from "@react-native-community/netinfo";
// import * as SecureStore from "expo-secure-store";
// import useCartStore from "../../store/cartStore";
// import { OrderSummaryRow } from "../Components/OrderSummary";
// import useShippingFee from "../hooks/useShippingFee";
// import { useSafeAreaInsets } from "react-native-safe-area-context";
// import CryptoJS from "crypto-js";
// import LottieView from "lottie-react-native";

// // Environment and API Constants
// const IS_TEST_ENV = process.env.EXPO_PUBLIC_IS_TEST_ENV === "true";
// const PAYMENT_API_URL = IS_TEST_ENV
//   ? "https://4f54-37-36-175-221.ngrok-free.app/api/payments/initiate"
//   : "https://pg.bookeey.com/internalapi/api/payment/requestLink";

// const MerchUID = "mer2400018";
// const SECRET_KEY = "0623475"; // Ensure this matches Bookeey's provided key
// const SURL = IS_TEST_ENV
//   ? "https://f36b-37-36-175-221.ngrok-free.app/api/payments/success"
//   : "https://app.bookeeypayment.com/success";
// const FURL = IS_TEST_ENV
//   ? "https://f36b-37-36-175-221.ngrok-free.app/api/payments/failure"
//   : "https://app.bookeeypayment.com/failure";
// const FORM_DATA_KEY = "user_checkout_info";

// // Payment Success Modal Component
// const PaymentSuccessModal = ({ visible, onClose }) => {
//   const animationRef = useRef(null);

//   useEffect(() => {
//     if (visible && animationRef.current) {
//       animationRef.current.play();
//     }
//   }, [visible]);

//   return (
//     <Modal
//       visible={visible}
//       transparent={true}
//       animationType="fade"
//       onRequestClose={onClose}
//     >
//       <View style={styles.modalBackground}>
//         <View style={styles.successModalContent}>
//           <LottieView
//             ref={animationRef}
//             source={require("../../assets/lotties/payment-success.json")} // Ensure this file is in the correct directory
//             style={styles.lottieAnimation}
//             loop={false}
//             onAnimationFinish={onClose}
//           />
//           <Text style={styles.modalTitle}>Payment Successful!</Text>
//           <Text style={styles.modalText}>
//             Thank you for your purchase. Redirecting to cart...
//           </Text>
//         </View>
//       </View>
//     </Modal>
//   );
// };

// // Payment Loading Overlay Component
// const PaymentLoadingOverlay = () => (
//   <View style={styles.loadingOverlay}>
//     <View style={styles.loadingCard}>
//       <ActivityIndicator size="large" color="#10B981" />
//       <Text style={styles.loadingTitle}>Processing Payment</Text>
//       <Text style={styles.loadingSubtext}>Please don't close this window</Text>
//     </View>
//   </View>
// );

// // Form Data Interface
// interface FormData {
//   firstName: string;
//   lastName: string;
//   phone: string;
//   email: string;
//   state: string;
//   city: string;
//   address: string;
// }

// // Form Errors Interface
// interface FormErrors {
//   firstName?: string;
//   lastName?: string;
//   phone?: string;
//   email?: string;
//   state?: string;
//   city?: string;
//   address?: string;
// }

// // Payment Payload Interface (Production)
// interface PaymentPayload {
//   DBRqst: string;
//   Do_Appinfo: {
//     APPTyp: string;
//     OS: string;
//     DevcType: string | null;
//     APPID: string;
//     IPAddrs: string;
//     HsCode: string | null;
//     Country: string;
//     AppVer: string;
//     UsrSessID: string | null;
//     MdlID: string;
//     APIVer: string;
//   };
//   Do_PyrDtl: {
//     Pyr_MPhone: string;
//     Pyr_Name: string;
//     Emailid: string | null;
//     address: string | null;
//     city: string | null;
//     state: string | null;
//     Pyr_Email: string | null;
//   };
//   Do_MerchDtl: {
//     BKY_PRDENUM: string;
//     MerchUID: string;
//     SURL: string;
//     FURL: string;
//     verifyAndProcess: string | null;
//   };
//   Do_TxnHdr: {
//     BKY_Txn_UID: string | null;
//     Merch_Txn_UID: string;
//     Merch_TrackUID: string | null;
//     Txn_Date: string | null;
//     PayFor: string;
//     PayMethod: string;
//     Txn_AMT: string;
//     Txn_HDR: string;
//     CDR: string | null;
//     CDR_KN: string | null;
//     CDR_BW: string | null;
//     CDR_CC: string | null;
//     CDR_AMX: string | null;
//     CDRCommission: string | null;
//     hashMac: string;
//   };
//   Do_TxnDtl: Array<{
//     SubMerchUID: string;
//     Txn_AMT: string;
//     Comission: string | null;
//     Merch_Txn_UID: string | null;
//     PayMthd: string | null;
//     SURL: string | null;
//     FURL: string | null;
//     Amount: string | null;
//     TxnType: string | null;
//   }>;
//   Do_WltDtl: null;
//   Do_MoreDtl: null;
// }

// // Test Payload Interface
// interface TestPayload {
//   amount: number;
//   orderId: string;
//   customerInfo: {
//     platform: string;
//     customerName: string;
//     customerPhone: string;
//     items: Array<{
//       id: string;
//       name: string;
//       quantity: number;
//       price: number;
//     }>;
//   };
// }

// // Constants
// const REQUIRED_FIELDS = [
//   "firstName",
//   "lastName",
//   "phone",
//   "email",
//   "state",
//   "city",
//   "address",
// ] as const;
// const PHONE_REGEX = /^\d{8,}$/; // Matches Kuwaiti mobile numbers (8+ digits)
// const EMAIL_REGEX = /\S+@\S+\.\S+/;

// // Utility Functions
// const saveFormData = async (data: FormData): Promise<void> => {
//   try {
//     await SecureStore.setItemAsync(FORM_DATA_KEY, JSON.stringify(data));
//   } catch (error) {
//     console.error("Error saving form data:", error);
//   }
// };

// const loadFormData = async (): Promise<FormData | null> => {
//   try {
//     const savedData = await SecureStore.getItemAsync(FORM_DATA_KEY);
//     return savedData ? JSON.parse(savedData) : null;
//   } catch (error) {
//     console.error("Error loading form data:", error);
//     return null;
//   }
// };

// export default function CheckoutPage() {
//   const insets = useSafeAreaInsets();
//   const navigation = useNavigation();
//   const { items, total, discountedTotal, appliedCoupon, clearCart } =
//     useCartStore();
//   const {
//     shippingFee,
//     loading: isLoadingShippingFee,
//     error: shippingFeeError,
//   } = useShippingFee();

//   // Animation Refs (for potential future enhancements)
//   const successScale = useRef(new Animated.Value(0)).current;
//   const successOpacity = useRef(new Animated.Value(0)).current;
//   const checkmarkStroke = useRef(new Animated.Value(0)).current;

//   // State Declarations
//   const [formData, setFormData] = useState<FormData>({
//     firstName: "",
//     lastName: "",
//     phone: "",
//     email: "",
//     state: "",
//     city: "",
//     address: "",
//   });
//   const [formErrors, setFormErrors] = useState<FormErrors>({});
//   const [isProcessing, setIsProcessing] = useState(false);
//   const [paymentError, setPaymentError] = useState<string | null>(null);
//   const [showWebView, setShowWebView] = useState(false);
//   const [paymentUrl, setPaymentUrl] = useState<string | null>(null);
//   const [isWebViewLoading, setIsWebViewLoading] = useState(true);
//   const [showSuccessModal, setShowSuccessModal] = useState(false);
//   const [showFailureModal, setShowFailureModal] = useState(false);

//   // Load saved form data on mount
//   useEffect(() => {
//     const loadSavedData = async () => {
//       const savedData = await loadFormData();
//       if (savedData) {
//         setFormData(savedData);
//       }
//     };
//     loadSavedData();
//   }, []);

//   // Redirect to cart if no items
//   useEffect(() => {
//     if (items.length === 0) {
//       router.replace("/(root)/Cart");
//     }
//   }, [items.length]);

//   // Form Validation
//   const validateForm = (): boolean => {
//     const errors: FormErrors = {};
//     let isValid = true;

//     if (!formData.firstName.trim()) {
//       errors.firstName = "First name is required";
//       isValid = false;
//     }
//     if (!formData.lastName.trim()) {
//       errors.lastName = "Last name is required";
//       isValid = false;
//     }
//     if (!formData.email.trim()) {
//       errors.email = "Email is required";
//       isValid = false;
//     } else if (!EMAIL_REGEX.test(formData.email)) {
//       errors.email = "Invalid email address";
//       isValid = false;
//     }
//     if (!formData.phone.trim()) {
//       errors.phone = "Phone number is required";
//       isValid = false;
//     } else {
//       const cleanPhone = formData.phone.replace(/[^\d]/g, "");
//       if (!PHONE_REGEX.test(cleanPhone)) {
//         errors.phone = "Phone number must be at least 8 digits";
//         isValid = false;
//       }
//     }
//     if (!formData.state.trim()) {
//       errors.state = "State is required";
//       isValid = false;
//     }
//     if (!formData.city.trim()) {
//       errors.city = "City is required";
//       isValid = false;
//     }
//     if (!formData.address.trim()) {
//       errors.address = "Delivery address is required";
//       isValid = false;
//     }

//     setFormErrors(errors);
//     if (!isValid) {
//       Toast.show({
//         type: "error",
//         text1: "Form Validation Error",
//         text2: "Please fill in all required fields correctly",
//         position: "top",
//       });
//     }
//     return isValid;
//   };

//   // Handle Back Press
//   const handleBackPress = useCallback(() => {
//     if (showWebView) {
//       Alert.alert(
//         "Cancel Payment?",
//         "Are you sure you want to cancel? This payment will not be processed.",
//         [
//           { text: "Continue Payment", style: "cancel" },
//           {
//             text: "Cancel Payment",
//             style: "destructive",
//             onPress: () => {
//               setShowWebView(false);
//               setPaymentUrl(null);
//               setShowFailureModal(true);
//             },
//           },
//         ]
//       );
//       return true;
//     }

//     router.push("/(root)/Cart");
//     return true;
//   }, [showWebView]);

//   useEffect(() => {
//     const backHandler = BackHandler.addEventListener(
//       "hardwareBackPress",
//       handleBackPress
//     );
//     return () => backHandler.remove();
//   }, [handleBackPress]);

//   useFocusEffect(
//     useCallback(() => {
//       navigation.setOptions({
//         gestureEnabled: !showWebView,
//         headerShown: false,
//       });
//     }, [showWebView])
//   );

//   // Payment Success Handler
//   const handlePaymentSuccess = async () => {
//     await saveFormData(formData);
//     clearCart();
//     setShowWebView(false);
//     setPaymentUrl(null);
//     setShowSuccessModal(true);
//     setTimeout(() => {
//       setShowSuccessModal(false);
//       router.push("/(root)/Cart");
//     }, 3000); // Matches Lottie animation duration (adjust if needed)
//   };

//   // Payment Failure Handler
//   const handlePaymentFailure = () => {
//     setShowWebView(false);
//     setPaymentUrl(null);
//     setShowFailureModal(true);
//   };

//   // Payment Error Handler
//   const handlePaymentError = (errorMessage: string) => {
//     setPaymentError(errorMessage);
//     setShowFailureModal(true);
//   };

//   // Calculate Totals
//   const subtotal = total;
//   const discount = appliedCoupon
//     ? appliedCoupon.type === "percentage"
//       ? (total * appliedCoupon.amount) / 100
//       : appliedCoupon.amount
//     : 0;
//   const finalTotal = (discountedTotal || total) + shippingFee;

//   // Handle Payment Submission
//   const handlePayment = async () => {
//     if (isProcessing || !validateForm()) return;

//     try {
//       const netInfo = await NetInfo.fetch();
//       if (!netInfo.isConnected) {
//         Toast.show({
//           type: "error",
//           text1: "No Internet Connection",
//           text2: "Please check your connection and try again",
//           position: "top",
//         });
//         return;
//       }

//       setIsProcessing(true);
//       setPaymentError(null);

//       const currentDate = new Date()
//         .toISOString()
//         .replace(/[^0-9]/g, "")
//         .slice(0, 14);
//       const randomSuffix = Math.random().toString(36).slice(2, 6);
//       const orderId = `ORD${currentDate}${randomSuffix}`;
//       const fullName = `${formData.firstName} ${formData.lastName}`;
//       const cleanPhone = formData.phone.replace(/[^\d]/g, "");

//       const txnHDR = `${Date.now()}${Math.floor(Math.random() * 10000)}`;
//       const rndnum = Math.random().toString(36).slice(2);
//       const sequence = `${MerchUID}|${orderId}|${SURL}|${FURL}|${finalTotal.toFixed(
//         3
//       )}|GEN|${SECRET_KEY}|${rndnum}`;
//       const hashMac = CryptoJS.SHA512(sequence).toString(CryptoJS.enc.Hex);

//       let payload: PaymentPayload | TestPayload;
//       let headers: Record<string, string> = {
//         "Content-Type": "application/json",
//         Accept: "application/json",
//       };

//       if (IS_TEST_ENV) {
//         payload = {
//           amount: Number(finalTotal.toFixed(3)),
//           orderId,
//           customerInfo: {
//             platform: Platform.OS.toUpperCase(),
//             customerName: fullName,
//             customerPhone: cleanPhone,
//             items: items.map((item) => ({
//               id: item.documentId,
//               name: item.name,
//               quantity: item.quantity,
//               price: Number((item.salesPrice || item.price).toFixed(3)),
//             })),
//           },
//         };
//         headers["ngrok-skip-browser-warning"] = "true";
//       } else {
//         payload = {
//           DBRqst: "PY_ECom",
//           Do_Appinfo: {
//             APPTyp: "MOB",
//             OS: Platform.OS === "ios" ? "iOS" : "ANDROID",
//             DevcType: null,
//             APPID: "PG",
//             IPAddrs: "",
//             HsCode: null,
//             Country: "KW",
//             AppVer: "1.0",
//             UsrSessID: null,
//             MdlID: "Pay_Req",
//             APIVer: "2.1",
//           },
//           Do_PyrDtl: {
//             Pyr_MPhone: cleanPhone,
//             Pyr_Name: fullName,
//             Emailid: formData.email || null,
//             address: formData.address || null,
//             city: formData.city || null,
//             state: formData.state || null,
//             Pyr_Email: formData.email || null,
//           },
//           Do_MerchDtl: {
//             BKY_PRDENUM: "ECom",
//             MerchUID: MerchUID,
//             SURL: SURL,
//             FURL: FURL,
//             verifyAndProcess: null,
//           },
//           Do_TxnHdr: {
//             BKY_Txn_UID: null,
//             Merch_Txn_UID: orderId,
//             Merch_TrackUID: null,
//             Txn_Date: null,
//             PayFor: "ECom",
//             PayMethod: "KNET",
//             Txn_AMT: finalTotal.toFixed(3),
//             Txn_HDR: txnHDR,
//             CDR: null,
//             CDR_KN: null,
//             CDR_BW: null,
//             CDR_CC: null,
//             CDR_AMX: null,
//             CDRCommission: null,
//             hashMac: hashMac,
//           },
//           Do_TxnDtl: [
//             {
//               SubMerchUID: MerchUID,
//               Txn_AMT: finalTotal.toFixed(3),
//               Comission: null,
//               Merch_Txn_UID: null,
//               PayMthd: null,
//               SURL: null,
//               FURL: null,
//               Amount: null,
//               TxnType: null,
//             },
//           ],
//           Do_WltDtl: null,
//           Do_MoreDtl: null,
//         };
//       }

//       console.log("Payment Payload:", JSON.stringify(payload, null, 2));

//       const response = await fetch(PAYMENT_API_URL, {
//         method: "POST",
//         headers,
//         body: JSON.stringify(payload),
//       });

//       if (!response.ok) {
//         throw new Error(`Payment service unavailable: ${response.status}`);
//       }

//       const data = await response.json();
//       console.log("Payment Response:", data);
//       const paymentUrl = IS_TEST_ENV ? data?.paymentUrl : data?.PayUrl;

//       if (!paymentUrl || !paymentUrl.startsWith("https://")) {
//         throw new Error("Invalid or insecure payment URL received");
//       }

//       setPaymentUrl(paymentUrl);
//       setShowWebView(true);
//     } catch (error: any) {
//       const errorMessage = error.message || "Payment initiation failed";
//       console.error("Payment Error:", error);
//       setPaymentError(errorMessage);
//       handlePaymentError(errorMessage);
//     } finally {
//       setIsProcessing(false);
//     }
//   };

//   if (items.length === 0) {
//     return null;
//   }

//   return (
//     <SafeAreaView style={[styles.safeArea, { paddingTop: insets.top }]}>
//       <KeyboardAvoidingView
//         behavior={Platform.OS === "ios" ? "padding" : "height"}
//         style={styles.container}
//       >
//         <StatusBar barStyle="dark-content" backgroundColor="#f9fafb" />
//         <View style={styles.header}>
//           <TouchableOpacity
//             onPress={handleBackPress}
//             style={styles.backButton}
//             hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//           >
//             <ChevronLeft color="#E53935" size={28} />
//           </TouchableOpacity>
//           <Text style={styles.headerTitle}>Secure Checkout</Text>
//         </View>

//         <ScrollView
//           style={styles.container}
//           contentContainerStyle={styles.contentContainer}
//           showsVerticalScrollIndicator={false}
//         >
//           {/* Delivery Information Section */}
//           <View style={styles.formContainer}>
//             <Text style={styles.formTitle}>Delivery Information</Text>
//             <Text style={styles.deliveryNote}>
//               Orders will be delivered within the next business day.
//             </Text>

//             {/* Personal Information */}
//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>Personal Information</Text>
//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <User size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>First Name *</Text>
//                 </View>
//                 <TextInput
//                   style={[
//                     styles.input,
//                     formErrors.firstName && styles.inputError,
//                   ]}
//                   value={formData.firstName}
//                   onChangeText={(text) =>
//                     setFormData((prev) => ({ ...prev, firstName: text }))
//                   }
//                   placeholder="Enter your first name"
//                   autoCapitalize="words"
//                 />
//                 {formErrors.firstName && (
//                   <Text style={styles.errorText}>{formErrors.firstName}</Text>
//                 )}
//               </View>

//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <User size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>Last Name *</Text>
//                 </View>
//                 <TextInput
//                   style={[
//                     styles.input,
//                     formErrors.lastName && styles.inputError,
//                   ]}
//                   value={formData.lastName}
//                   onChangeText={(text) =>
//                     setFormData((prev) => ({ ...prev, lastName: text }))
//                   }
//                   placeholder="Enter your last name"
//                   autoCapitalize="words"
//                 />
//                 {formErrors.lastName && (
//                   <Text style={styles.errorText}>{formErrors.lastName}</Text>
//                 )}
//               </View>

//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <Mail size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>Email *</Text>
//                 </View>
//                 <TextInput
//                   style={[styles.input, formErrors.email && styles.inputError]}
//                   value={formData.email}
//                   onChangeText={(text) =>
//                     setFormData((prev) => ({ ...prev, email: text }))
//                   }
//                   placeholder="Enter your email"
//                   keyboardType="email-address"
//                   autoCapitalize="none"
//                 />
//                 {formErrors.email && (
//                   <Text style={styles.errorText}>{formErrors.email}</Text>
//                 )}
//               </View>

//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <Phone size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>Phone Number *</Text>
//                 </View>
//                 <TextInput
//                   style={[styles.input, formErrors.phone && styles.inputError]}
//                   value={formData.phone}
//                   onChangeText={(text) => {
//                     const cleaned = text.replace(/[^\d]/g, "");
//                     setFormData((prev) => ({ ...prev, phone: cleaned }));
//                   }}
//                   placeholder="e.g., 12345678"
//                   keyboardType="phone-pad"
//                   maxLength={15}
//                 />
//                 {formErrors.phone ? (
//                   <Text style={styles.errorText}>{formErrors.phone}</Text>
//                 ) : (
//                   <Text style={styles.helperText}>
//                     Enter your Kuwait mobile number (minimum 8 digits)
//                   </Text>
//                 )}
//               </View>
//             </View>

//             {/* Delivery Address */}
//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>Delivery Address</Text>
//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <MapPin size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>State *</Text>
//                 </View>
//                 <TextInput
//                   style={[styles.input, formErrors.state && styles.inputError]}
//                   value={formData.state}
//                   onChangeText={(text) =>
//                     setFormData((prev) => ({ ...prev, state: text }))
//                   }
//                   placeholder="Enter your state/governorate"
//                 />
//                 {formErrors.state && (
//                   <Text style={styles.errorText}>{formErrors.state}</Text>
//                 )}
//               </View>

//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <MapPin size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>City *</Text>
//                 </View>
//                 <TextInput
//                   style={[styles.input, formErrors.city && styles.inputError]}
//                   value={formData.city}
//                   onChangeText={(text) =>
//                     setFormData((prev) => ({ ...prev, city: text }))
//                   }
//                   placeholder="Enter your city"
//                 />
//                 {formErrors.city && (
//                   <Text style={styles.errorText}>{formErrors.city}</Text>
//                 )}
//               </View>

//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <MapPin size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>Delivery Address *</Text>
//                 </View>
//                 <TextInput
//                   style={[
//                     styles.input,
//                     formErrors.address && styles.inputError,
//                   ]}
//                   value={formData.address}
//                   onChangeText={(text) =>
//                     setFormData((prev) => ({ ...prev, address: text }))
//                   }
//                   placeholder="Enter your full delivery address"
//                   multiline
//                   numberOfLines={3}
//                 />
//                 {formErrors.address && (
//                   <Text style={styles.errorText}>{formErrors.address}</Text>
//                 )}
//               </View>
//             </View>
//           </View>

//           {/* Order Summary */}
//           <View style={styles.card}>
//             <View style={styles.cardTitleContainer}>
//               <Text style={styles.cardTitle}>Order Summary</Text>
//               <Text style={styles.itemCount}>{items.length} items</Text>
//             </View>
//             {items.map((item) => (
//               <View key={item.documentId} style={styles.itemRow}>
//                 <View style={styles.itemDetails}>
//                   <Text style={styles.itemName} numberOfLines={1}>
//                     {item.name}
//                   </Text>
//                   <Text style={styles.itemQuantity}>Qty: {item.quantity}</Text>
//                 </View>
//                 <Text style={styles.itemPrice}>
//                   {((item.salesPrice || item.price) * item.quantity).toFixed(3)}{" "}
//                   KWD
//                 </Text>
//               </View>
//             ))}

//             <View style={styles.summaryContainer}>
//               <OrderSummaryRow
//                 label="Subtotal"
//                 value={`${subtotal.toFixed(3)} KWD`}
//               />
//               {appliedCoupon && (
//                 <OrderSummaryRow
//                   label={`Discount (${appliedCoupon.code})`}
//                   value={`- ${discount.toFixed(3)} KWD`}
//                   isDiscount
//                 />
//               )}
//               <View style={styles.shippingFeeRow}>
//                 <Text style={styles.summaryLabel}>Shipping Fee</Text>
//                 <View style={styles.shippingFeeValueContainer}>
//                   {isLoadingShippingFee ? (
//                     <ActivityIndicator size="small" color="#10B981" />
//                   ) : shippingFeeError ? (
//                     <Text style={styles.errorValue}>Error loading fee</Text>
//                   ) : (
//                     <Text style={styles.summaryValue}>{`${shippingFee.toFixed(
//                       3
//                     )} KWD`}</Text>
//                   )}
//                 </View>
//               </View>
//               <View style={styles.divider} />
//               <OrderSummaryRow
//                 label="Total Amount"
//                 value={`${finalTotal.toFixed(3)} KWD`}
//                 isTotal
//                 isLoading={isLoadingShippingFee}
//               />
//             </View>
//           </View>

//           {/* Security Info */}
//           <View style={styles.securityCard}>
//             <View style={styles.securityHeader}>
//               <Lock size={20} color="#10B981" />
//               <Text style={styles.securityTitle}>Secure Payment</Text>
//             </View>
//             <Text style={styles.securityText}>
//               • SSL encrypted payment processing • Verified by Bookeey Payment
//               Gateway • Your payment details are protected
//             </Text>
//           </View>

//           {/* Pay Button */}
//           <TouchableOpacity
//             style={[
//               styles.payButton,
//               (isProcessing || isLoadingShippingFee) &&
//                 styles.payButtonDisabled,
//             ]}
//             onPress={handlePayment}
//             disabled={isProcessing || isLoadingShippingFee}
//           >
//             {isProcessing ? (
//               <ActivityIndicator color="white" size="small" />
//             ) : (
//               <View style={styles.payButtonContent}>
//                 <CreditCard size={20} color="white" />
//                 <Text style={styles.payButtonText}>
//                   Pay {finalTotal.toFixed(3)} KWD
//                 </Text>
//               </View>
//             )}
//           </TouchableOpacity>
//           {paymentError && <Text style={styles.errorText}>{paymentError}</Text>}
//         </ScrollView>

//         {/* WebView Modal */}
//         <Modal
//           visible={showWebView}
//           animationType="slide"
//           onRequestClose={handleBackPress}
//         >
//           <SafeAreaView style={styles.modalContainer}>
//             <View style={styles.webViewHeader}>
//               <TouchableOpacity
//                 onPress={handleBackPress}
//                 style={styles.webViewCloseButton}
//                 hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//               >
//                 <ArrowLeft color="#E53935" size={24} />
//               </TouchableOpacity>
//               <View style={styles.webViewTitleContainer}>
//                 <Lock size={16} color="#10B981" />
//                 <Text style={styles.webViewTitle}>Secure Payment</Text>
//               </View>
//             </View>
//             {isWebViewLoading && <PaymentLoadingOverlay />}
//             {paymentUrl && (
//               <WebView
//                 source={{ uri: paymentUrl }}
//                 onNavigationStateChange={(navState) => {
//                   if (navState.url.includes("/success")) {
//                     handlePaymentSuccess();
//                   } else if (navState.url.includes("/failure")) {
//                     handlePaymentFailure();
//                   }
//                 }}
//                 onLoadStart={() => setIsWebViewLoading(true)}
//                 onLoadEnd={() => setIsWebViewLoading(false)}
//                 onError={(syntheticEvent) =>
//                   handlePaymentError(syntheticEvent.nativeEvent.description)
//                 }
//                 onHttpError={() => handlePaymentError("Connection error")}
//                 style={styles.webView}
//                 incognito={true}
//                 cacheEnabled={false}
//                 domStorageEnabled={true}
//                 javaScriptEnabled={true}
//                 startInLoadingState={true}
//               />
//             )}
//           </SafeAreaView>
//         </Modal>

//         {/* Success Modal with Lottie */}
//         <PaymentSuccessModal
//           visible={showSuccessModal}
//           onClose={() => {
//             setShowSuccessModal(false);
//             router.push("/(root)/Cart");
//           }}
//         />

//         {/* Failure Modal */}
//         <Modal
//           visible={showFailureModal}
//           transparent={true}
//           animationType="fade"
//           onRequestClose={() => setShowFailureModal(false)}
//         >
//           <View style={styles.modalBackground}>
//             <View style={[styles.modalContent, styles.failureModal]}>
//               <XCircle size={48} color="#E53935" />
//               <Text style={styles.modalTitle}>Payment Failed</Text>
//               <Text style={styles.modalText}>
//                 {paymentError ||
//                   "Please try again or use a different payment method."}
//               </Text>
//               <TouchableOpacity
//                 style={styles.modalButton}
//                 onPress={() => setShowFailureModal(false)}
//               >
//                 <Text style={styles.modalButtonText}>Try Again</Text>
//               </TouchableOpacity>
//             </View>
//           </View>
//         </Modal>
//       </KeyboardAvoidingView>
//       <Toast />
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: { flex: 1, backgroundColor: "#f9fafb" },
//   container: { flex: 1 },
//   contentContainer: { padding: 16, paddingBottom: 100 },
//   header: {
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     paddingVertical: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f0f0f0",
//     backgroundColor: "#f9fafb",
//   },
//   backButton: { padding: 4 },
//   headerTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#1f2937",
//     marginLeft: 16,
//   },
//   formContainer: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   section: { marginBottom: 24 },
//   sectionTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#e5e7eb",
//     paddingBottom: 4,
//   },
//   formTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 12,
//   },
//   formField: { marginBottom: 16 },
//   inputLabelContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 6,
//     marginBottom: 4,
//   },
//   inputLabel: { fontSize: 14, fontFamily: "Cairo-SemiBold", color: "#4b5563" },
//   input: {
//     borderWidth: 1,
//     borderColor: "#e5e7eb",
//     borderRadius: 8,
//     padding: 12,
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#1f2937",
//     backgroundColor: "#fafafa",
//   },
//   inputError: { borderColor: "#ef4444" },
//   errorText: {
//     color: "#ef4444",
//     fontSize: 12,
//     fontFamily: "Cairo",
//     marginTop: 4,
//   },
//   helperText: {
//     fontSize: 12,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//     marginTop: 4,
//   },
//   deliveryNote: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#10B981",
//     marginBottom: 16,
//     textAlign: "center",
//     backgroundColor: "#f0fdf4",
//     padding: 8,
//     borderRadius: 8,
//   },
//   card: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   cardTitleContainer: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 16,
//   },
//   cardTitle: { fontSize: 18, fontFamily: "Cairo-SemiBold", color: "#1f2937" },
//   itemCount: { fontSize: 14, fontFamily: "Cairo", color: "#6b7280" },
//   itemRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 12,
//     paddingBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f1f5f9",
//   },
//   itemDetails: { flex: 1, paddingRight: 8 },
//   itemName: {
//     fontSize: 15,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//     marginBottom: 4,
//   },
//   itemQuantity: { fontSize: 13, fontFamily: "Cairo", color: "#6b7280" },
//   itemPrice: { fontSize: 15, fontFamily: "Cairo-Bold", color: "#374151" },
//   summaryContainer: {
//     marginTop: 16,
//     paddingTop: 16,
//     borderTopWidth: 1,
//     borderTopColor: "#e5e7eb",
//   },
//   divider: { height: 1, backgroundColor: "#e5e7eb", marginVertical: 12 },
//   securityCard: {
//     backgroundColor: "#f0fdf4",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 24,
//     borderWidth: 1,
//     borderColor: "#86efac",
//   },
//   securityHeader: {
//     flexDirection: "row",
//     alignItems: "center",
//     marginBottom: 12,
//     gap: 8,
//   },
//   securityTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#047857",
//   },
//   securityText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4B5563",
//     lineHeight: 22,
//   },
//   payButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 12,
//     padding: 18,
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 12,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//   },
//   payButtonDisabled: { opacity: 0.6 },
//   payButtonContent: { flexDirection: "row", alignItems: "center", gap: 10 },
//   payButtonText: { color: "white", fontSize: 16, fontFamily: "Cairo-Bold" },
//   modalBackground: {
//     flex: 1,
//     backgroundColor: "rgba(0, 0, 0, 0.5)",
//     justifyContent: "center",
//     alignItems: "center",
//   },
//   modalContainer: { flex: 1, backgroundColor: "#fff" },
//   modalContent: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "80%",
//     maxWidth: 300,
//   },
//   successModalContent: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "90%",
//     maxWidth: 350,
//   },
//   lottieAnimation: { width: 200, height: 200 },
//   failureModal: { borderColor: "#E53935", borderWidth: 2 },
//   modalTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   modalText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   modalButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 8,
//     paddingVertical: 12,
//     paddingHorizontal: 24,
//     marginTop: 24,
//   },
//   modalButtonText: { color: "white", fontSize: 16, fontFamily: "Cairo-Bold" },
//   webView: { flex: 1 },
//   webViewHeader: {
//     height: 56,
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     borderBottomWidth: 1,
//     borderBottomColor: "#E5E7EB",
//     backgroundColor: "#f9fafb",
//   },
//   webViewCloseButton: { padding: 8 },
//   webViewTitleContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 8,
//     flex: 1,
//     justifyContent: "center",
//     marginRight: 40,
//   },
//   webViewTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   loadingOverlay: {
//     position: "absolute",
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//     backgroundColor: "rgba(255,255,255,0.95)",
//     justifyContent: "center",
//     alignItems: "center",
//     zIndex: 1000,
//   },
//   loadingCard: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//     width: "80%",
//     maxWidth: 300,
//   },
//   loadingTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   loadingSubtext: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   errorValue: { fontSize: 14, fontFamily: "Cairo", color: "#DC2626" },
//   shippingFeeRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginVertical: 4,
//   },
//   shippingFeeValueContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     justifyContent: "flex-end",
//   },
//   summaryLabel: { fontSize: 14, fontFamily: "Cairo", color: "#4b5563" },
//   summaryValue: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
// });

/************************************ */

// import React, { useState, useCallback, useEffect, useRef } from "react";
// import {
//   View,
//   Text,
//   ScrollView,
//   Alert,
//   ActivityIndicator,
//   StyleSheet,
//   Platform,
//   TouchableOpacity,
//   SafeAreaView,
//   BackHandler,
//   Modal,
//   StatusBar,
//   TextInput,
//   KeyboardAvoidingView,
//   Animated,
// } from "react-native";
// import { router, useNavigation } from "expo-router";
// import { WebView } from "react-native-webview";
// import { useFocusEffect } from "@react-navigation/native";
// import {
//   Shield,
//   CreditCard,
//   ArrowLeft,
//   Lock,
//   ChevronLeft,
//   XCircle,
//   User,
//   Phone,
//   Mail,
//   MapPin,
// } from "lucide-react-native";
// import Toast from "react-native-toast-message";
// import NetInfo from "@react-native-community/netinfo";
// import * as SecureStore from "expo-secure-store";
// import useCartStore from "../../store/cartStore";
// import { OrderSummaryRow } from "../Components/OrderSummary";
// import useShippingFee from "../hooks/useShippingFee";
// import { useSafeAreaInsets } from "react-native-safe-area-context";
// import CryptoJS from "crypto-js";
// import LottieView from "lottie-react-native";

// const IS_TEST_ENV = process.env.EXPO_PUBLIC_IS_TEST_ENV === "true";
// const PAYMENT_API_URL = IS_TEST_ENV
//   ? "https://4f54-37-36-175-221.ngrok-free.app/api/payments/initiate"
//   : "https://pg.bookeey.com/internalapi/api/payment/requestLink";

// const MerchUID = "mer2400018";
// const SECRET_KEY = "0623475";
// const SURL = IS_TEST_ENV
//   ? "https://f36b-37-36-175-221.ngrok-free.app/api/payments/success"
//   : "https://app.bookeeypayment.com/success";
// const FURL = IS_TEST_ENV
//   ? "https://f36b-37-36-175-221.ngrok-free.app/api/payments/failure"
//   : "https://app.bookeeypayment.com/failure";
// const FORM_DATA_KEY = "user_checkout_info";

// const PaymentSuccessModal = ({ visible, onClose }) => {
//   const animationRef = useRef(null);

//   useEffect(() => {
//     if (visible && animationRef.current) {
//       animationRef.current.play();
//     }
//   }, [visible]);

//   return (
//     <Modal
//       visible={visible}
//       transparent={true}
//       animationType="fade"
//       onRequestClose={onClose}
//     >
//       <View style={styles.modalBackground}>
//         <View style={styles.successModalContent}>
//           <LottieView
//             ref={animationRef}
//             source={require("../../assets/lotties/payment-success.json")}
//             style={styles.lottieAnimation}
//             loop={false}
//             onAnimationFinish={onClose}
//           />
//           <Text style={styles.modalTitle}>Payment Successful!</Text>
//           <Text style={styles.modalText}>
//             Thank you for your purchase. Redirecting to cart...
//           </Text>
//         </View>
//       </View>
//     </Modal>
//   );
// };

// const PaymentLoadingOverlay = () => (
//   <View style={styles.loadingOverlay}>
//     <View style={styles.loadingCard}>
//       <ActivityIndicator size="large" color="#10B981" />
//       <Text style={styles.loadingTitle}>Processing Payment</Text>
//       <Text style={styles.loadingSubtext}>Please don't close this window</Text>
//     </View>
//   </View>
// );

// interface FormData {
//   firstName: string;
//   lastName: string;
//   phone: string;
//   email: string;
//   state: string;
//   city: string;
//   address: string;
// }

// interface FormErrors {
//   firstName?: string;
//   lastName?: string;
//   phone?: string;
//   email?: string;
//   state?: string;
//   city?: string;
//   address?: string;
// }

// interface PaymentPayload {
//   DBRqst: string;
//   Do_Appinfo: {
//     APPTyp: string;
//     OS: string;
//     DevcType: string | null;
//     APPID: string;
//     IPAddrs: string;
//     HsCode: string | null;
//     Country: string;
//     AppVer: string;
//     UsrSessID: string | null;
//     MdlID: string;
//     APIVer: string;
//   };
//   Do_PyrDtl: {
//     Pyr_MPhone: string;
//     Pyr_Name: string;
//     Emailid: string | null;
//     address: string | null;
//     city: string | null;
//     state: string | null;
//     Pyr_Email: string | null;
//   };
//   Do_MerchDtl: {
//     BKY_PRDENUM: string;
//     MerchUID: string;
//     SURL: string;
//     FURL: string;
//     verifyAndProcess: string | null;
//   };
//   Do_TxnHdr: {
//     BKY_Txn_UID: string | null;
//     Merch_Txn_UID: string;
//     Merch_TrackUID: string | null;
//     Txn_Date: string | null;
//     PayFor: string;
//     PayMethod: string;
//     Txn_AMT: string;
//     Txn_HDR: string;
//     CDR: string | null;
//     CDR_KN: string | null;
//     CDR_BW: string | null;
//     CDR_CC: string | null;
//     CDR_AMX: string | null;
//     CDRCommission: string | null;
//     hashMac: string;
//   };
//   Do_TxnDtl: Array<{
//     SubMerchUID: string;
//     Txn_AMT: string;
//     Comission: string | null;
//     Merch_Txn_UID: string | null;
//     PayMthd: string | null;
//     SURL: string | null;
//     FURL: string | null;
//     Amount: string | null;
//     TxnType: string | null;
//   }>;
//   Do_WltDtl: null;
//   Do_MoreDtl: null;
// }

// interface TestPayload {
//   amount: number;
//   orderId: string;
//   customerInfo: {
//     platform: string;
//     customerName: string;
//     customerPhone: string;
//     items: Array<{
//       id: string;
//       name: string;
//       quantity: number;
//       price: number;
//     }>;
//   };
// }

// const REQUIRED_FIELDS = [
//   "firstName",
//   "lastName",
//   "phone",
//   "email",
//   "state",
//   "city",
//   "address",
// ] as const;
// const PHONE_REGEX = /^\d{8,}$/;
// const EMAIL_REGEX = /\S+@\S+\.\S+/;

// const saveFormData = async (data: FormData): Promise<void> => {
//   try {
//     await SecureStore.setItemAsync(FORM_DATA_KEY, JSON.stringify(data));
//   } catch (error) {
//     console.error("Error saving form data:", error);
//   }
// };

// const loadFormData = async (): Promise<FormData | null> => {
//   try {
//     const savedData = await SecureStore.getItemAsync(FORM_DATA_KEY);
//     return savedData ? JSON.parse(savedData) : null;
//   } catch (error) {
//     console.error("Error loading form data:", error);
//     return null;
//   }
// };

// export default function CheckoutPage() {
//   const insets = useSafeAreaInsets();
//   const navigation = useNavigation();
//   const { items, total, discountedTotal, appliedCoupon, clearCart } =
//     useCartStore();
//   const {
//     shippingFee,
//     loading: isLoadingShippingFee,
//     error: shippingFeeError,
//   } = useShippingFee();

//   const successScale = useRef(new Animated.Value(0)).current;
//   const successOpacity = useRef(new Animated.Value(0)).current;
//   const checkmarkStroke = useRef(new Animated.Value(0)).current;

//   const [formData, setFormData] = useState<FormData>({
//     firstName: "",
//     lastName: "",
//     phone: "",
//     email: "",
//     state: "",
//     city: "",
//     address: "",
//   });
//   const [formErrors, setFormErrors] = useState<FormErrors>({});
//   const [isProcessing, setIsProcessing] = useState(false);
//   const [paymentError, setPaymentError] = useState<string | null>(null);
//   const [showWebView, setShowWebView] = useState(false);
//   const [paymentUrl, setPaymentUrl] = useState<string | null>(null);
//   const [isWebViewLoading, setIsWebViewLoading] = useState(true);
//   const [showSuccessModal, setShowSuccessModal] = useState(false);
//   const [showFailureModal, setShowFailureModal] = useState(false);

//   useEffect(() => {
//     const loadSavedData = async () => {
//       const savedData = await loadFormData();
//       if (savedData) {
//         setFormData(savedData);
//       }
//     };
//     loadSavedData();
//   }, []);

//   useEffect(() => {
//     if (items.length === 0) {
//       router.replace("/(root)/Cart");
//     }
//   }, [items.length]);

//   const validateForm = (): boolean => {
//     const errors: FormErrors = {};
//     let isValid = true;

//     if (!formData.firstName.trim()) {
//       errors.firstName = "First name is required";
//       isValid = false;
//     }
//     if (!formData.lastName.trim()) {
//       errors.lastName = "Last name is required";
//       isValid = false;
//     }
//     if (!formData.email.trim()) {
//       errors.email = "Email is required";
//       isValid = false;
//     } else if (!EMAIL_REGEX.test(formData.email)) {
//       errors.email = "Invalid email address";
//       isValid = false;
//     }
//     if (!formData.phone.trim()) {
//       errors.phone = "Phone number is required";
//       isValid = false;
//     } else {
//       const cleanPhone = formData.phone.replace(/[^\d]/g, "");
//       if (!PHONE_REGEX.test(cleanPhone)) {
//         errors.phone = "Phone number must be at least 8 digits";
//         isValid = false;
//       }
//     }
//     if (!formData.state.trim()) {
//       errors.state = "State is required";
//       isValid = false;
//     }
//     if (!formData.city.trim()) {
//       errors.city = "City is required";
//       isValid = false;
//     }
//     if (!formData.address.trim()) {
//       errors.address = "Delivery address is required";
//       isValid = false;
//     }

//     setFormErrors(errors);
//     if (!isValid) {
//       Toast.show({
//         type: "error",
//         text1: "Form Validation Error",
//         text2: "Please fill in all required fields correctly",
//         position: "top",
//       });
//     }
//     return isValid;
//   };

//   const handleBackPress = useCallback(() => {
//     if (showWebView) {
//       Alert.alert(
//         "Cancel Payment?",
//         "Are you sure you want to cancel? This payment will not be processed.",
//         [
//           { text: "Continue Payment", style: "cancel" },
//           {
//             text: "Cancel Payment",
//             style: "destructive",
//             onPress: () => {
//               setShowWebView(false);
//               setPaymentUrl(null);
//               setShowFailureModal(true);
//             },
//           },
//         ]
//       );
//       return true;
//     }

//     router.push("/(root)/Cart");
//     return true;
//   }, [showWebView]);

//   useEffect(() => {
//     const backHandler = BackHandler.addEventListener(
//       "hardwareBackPress",
//       handleBackPress
//     );
//     return () => backHandler.remove();
//   }, [handleBackPress]);

//   useFocusEffect(
//     useCallback(() => {
//       navigation.setOptions({
//         gestureEnabled: !showWebView,
//         headerShown: false,
//       });
//     }, [showWebView])
//   );

//   const handlePaymentSuccess = async () => {
//     await saveFormData(formData);
//     clearCart();
//     setShowWebView(false);
//     setPaymentUrl(null);
//     Toast.show({
//       type: "success",
//       text1: "Payment Successful",
//       text2: "Thank you for your purchase!",
//       position: "top",
//     });
//     setShowSuccessModal(true);
//     setTimeout(() => {
//       setShowSuccessModal(false);
//       router.push("/(root)/Cart");
//     }, 3000);
//   };

//   const handlePaymentFailure = () => {
//     setShowWebView(false);
//     setPaymentUrl(null);
//     setShowFailureModal(true);
//   };

//   const handlePaymentError = (errorMessage: string) => {
//     setPaymentError(errorMessage);
//     setShowFailureModal(true);
//   };

//   const subtotal = total;
//   const discount = appliedCoupon
//     ? appliedCoupon.type === "percentage"
//       ? (total * appliedCoupon.amount) / 100
//       : appliedCoupon.amount
//     : 0;
//   const finalTotal = (discountedTotal || total) + shippingFee;

//   const handlePayment = async () => {
//     if (isProcessing || !validateForm()) return;

//     try {
//       const netInfo = await NetInfo.fetch();
//       if (!netInfo.isConnected) {
//         Toast.show({
//           type: "error",
//           text1: "No Internet Connection",
//           text2: "Please check your connection and try again",
//           position: "top",
//         });
//         return;
//       }

//       setIsProcessing(true);
//       setPaymentError(null);

//       const currentDate = new Date()
//         .toISOString()
//         .replace(/[^0-9]/g, "")
//         .slice(0, 14);
//       const randomSuffix = Math.random().toString(36).slice(2, 6);
//       const orderId = `TX${currentDate}${randomSuffix}`;
//       const fullName = `${formData.firstName} ${formData.lastName}`;
//       const cleanPhone = formData.phone.replace(/[^\d]/g, "");

//       const txnHDR = `${Date.now()}${Math.floor(Math.random() * 10000)}`;
//       const rndnum = Math.random().toString(36).slice(2);
//       const sequence = `${MerchUID}|${orderId}|${SURL}|${FURL}|${finalTotal.toFixed(
//         3
//       )}|GEN|${SECRET_KEY}|${rndnum}`;
//       const hashMac = CryptoJS.SHA512(sequence).toString(CryptoJS.enc.Hex);

//       let payload: PaymentPayload | TestPayload;
//       let headers: Record<string, string> = {
//         "Content-Type": "application/json",
//         Accept: "application/json",
//       };

//       if (IS_TEST_ENV) {
//         payload = {
//           amount: Number(finalTotal.toFixed(3)),
//           orderId,
//           customerInfo: {
//             platform: Platform.OS.toUpperCase(),
//             customerName: "mohamed",
//             customerPhone: "0100740099",
//             items: items.map((item) => ({
//               id: item.documentId,
//               name: item.name,
//               quantity: item.quantity,
//               price: Number((item.salesPrice || item.price).toFixed(3)),
//             })),
//           },
//         };
//         headers["ngrok-skip-browser-warning"] = "true";
//       } else {
//         payload = {
//           DBRqst: "PY_ECom",
//           Do_Appinfo: {
//             APPTyp: "MOB",
//             OS: Platform.OS === "ios" ? "iOS" : "ANDROID",
//             DevcType: null,
//             APPID: "PG",
//             IPAddrs: "",
//             HsCode: null,
//             Country: "KW",
//             AppVer: "1.0",
//             UsrSessID: null,
//             MdlID: "Pay_Req",
//             APIVer: "2.1",
//           },
//           Do_PyrDtl: {
//             Pyr_MPhone: cleanPhone,
//             Pyr_Name: fullName,
//             Emailid: formData.email || null,
//             address: formData.address || null,
//             city: formData.city || null,
//             state: formData.state || null,
//             Pyr_Email: formData.email || null,
//           },
//           Do_MerchDtl: {
//             BKY_PRDENUM: "ECom",
//             MerchUID: MerchUID,
//             SURL: SURL,
//             FURL: FURL,
//             verifyAndProcess: null,
//           },
//           Do_TxnHdr: {
//             BKY_Txn_UID: null,
//             Merch_Txn_UID: orderId,
//             Merch_TrackUID: null,
//             Txn_Date: null,
//             PayFor: "ECom",
//             PayMethod: "KNET",
//             Txn_AMT: finalTotal.toFixed(3),
//             Txn_HDR: txnHDR,
//             CDR: null,
//             CDR_KN: null,
//             CDR_BW: null,
//             CDR_CC: null,
//             CDR_AMX: null,
//             CDRCommission: null,
//             hashMac: hashMac,
//           },
//           Do_TxnDtl: [
//             {
//               SubMerchUID: MerchUID,
//               Txn_AMT: finalTotal.toFixed(3),
//               Comission: null,
//               Merch_Txn_UID: null,
//               PayMthd: null,
//               SURL: null,
//               FURL: null,
//               Amount: null,
//               TxnType: null,
//             },
//           ],
//           Do_WltDtl: null,
//           Do_MoreDtl: null,
//         };
//       }

//       const response = await fetch(PAYMENT_API_URL, {
//         method: "POST",
//         headers,
//         body: JSON.stringify(payload),
//       });

//       if (!response.ok) {
//         throw new Error(`Payment service unavailable: ${response.status}`);
//       }

//       const data = await response.json();
//       const paymentUrl = IS_TEST_ENV ? data?.paymentUrl : data?.PayUrl;

//       if (!paymentUrl || !paymentUrl.startsWith("https://")) {
//         throw new Error("Invalid or insecure payment URL received");
//       }

//       setPaymentUrl(paymentUrl);
//       setShowWebView(true);
//     } catch (error: any) {
//       const errorMessage = error.message || "Payment initiation failed";
//       console.error("Payment Error:", error);
//       setPaymentError(errorMessage);
//       handlePaymentError(errorMessage);
//     } finally {
//       setIsProcessing(false);
//     }
//   };

//   if (items.length === 0) {
//     return null;
//   }

//   return (
//     <SafeAreaView style={[styles.safeArea, { paddingTop: insets.top }]}>
//       <KeyboardAvoidingView
//         behavior={Platform.OS === "ios" ? "padding" : "height"}
//         style={styles.container}
//       >
//         <StatusBar barStyle="dark-content" backgroundColor="#f9fafb" />
//         <View style={styles.header}>
//           <TouchableOpacity
//             onPress={handleBackPress}
//             style={styles.backButton}
//             hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//           >
//             <ChevronLeft color="#E53935" size={28} />
//           </TouchableOpacity>
//           <Text style={styles.headerTitle}>Secure Checkout</Text>
//         </View>

//         <ScrollView
//           style={styles.container}
//           contentContainerStyle={styles.contentContainer}
//           showsVerticalScrollIndicator={false}
//         >
//           <View style={styles.formContainer}>
//             <Text style={styles.formTitle}>Delivery Information</Text>
//             <Text style={styles.deliveryNote}>
//               Orders will be delivered within the next business day.
//             </Text>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>Personal Information</Text>
//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <User size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>First Name *</Text>
//                 </View>
//                 <TextInput
//                   style={[
//                     styles.input,
//                     formErrors.firstName && styles.inputError,
//                   ]}
//                   value={formData.firstName}
//                   onChangeText={(text) =>
//                     setFormData((prev) => ({ ...prev, firstName: text }))
//                   }
//                   placeholder="Enter your first name"
//                   autoCapitalize="words"
//                 />
//                 {formErrors.firstName && (
//                   <Text style={styles.errorText}>{formErrors.firstName}</Text>
//                 )}
//               </View>

//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <User size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>Last Name *</Text>
//                 </View>
//                 <TextInput
//                   style={[
//                     styles.input,
//                     formErrors.lastName && styles.inputError,
//                   ]}
//                   value={formData.lastName}
//                   onChangeText={(text) =>
//                     setFormData((prev) => ({ ...prev, lastName: text }))
//                   }
//                   placeholder="Enter your last name"
//                   autoCapitalize="words"
//                 />
//                 {formErrors.lastName && (
//                   <Text style={styles.errorText}>{formErrors.lastName}</Text>
//                 )}
//               </View>

//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <Mail size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>Email *</Text>
//                 </View>
//                 <TextInput
//                   style={[styles.input, formErrors.email && styles.inputError]}
//                   value={formData.email}
//                   onChangeText={(text) =>
//                     setFormData((prev) => ({ ...prev, email: text }))
//                   }
//                   placeholder="Enter your email"
//                   keyboardType="email-address"
//                   autoCapitalize="none"
//                 />
//                 {formErrors.email && (
//                   <Text style={styles.errorText}>{formErrors.email}</Text>
//                 )}
//               </View>

//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <Phone size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>Phone Number *</Text>
//                 </View>
//                 <TextInput
//                   style={[styles.input, formErrors.phone && styles.inputError]}
//                   value={formData.phone}
//                   onChangeText={(text) => {
//                     const cleaned = text.replace(/[^\d]/g, "");
//                     setFormData((prev) => ({ ...prev, phone: cleaned }));
//                   }}
//                   placeholder="e.g., 12345678"
//                   keyboardType="phone-pad"
//                   maxLength={15}
//                 />
//                 {formErrors.phone ? (
//                   <Text style={styles.errorText}>{formErrors.phone}</Text>
//                 ) : (
//                   <Text style={styles.helperText}>
//                     Enter your Kuwait mobile number (minimum 8 digits)
//                   </Text>
//                 )}
//               </View>
//             </View>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>Delivery Address</Text>
//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <MapPin size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>State *</Text>
//                 </View>
//                 <TextInput
//                   style={[styles.input, formErrors.state && styles.inputError]}
//                   value={formData.state}
//                   onChangeText={(text) =>
//                     setFormData((prev) => ({ ...prev, state: text }))
//                   }
//                   placeholder="Enter your state/governorate"
//                 />
//                 {formErrors.state && (
//                   <Text style={styles.errorText}>{formErrors.state}</Text>
//                 )}
//               </View>

//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <MapPin size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>City *</Text>
//                 </View>
//                 <TextInput
//                   style={[styles.input, formErrors.city && styles.inputError]}
//                   value={formData.city}
//                   onChangeText={(text) =>
//                     setFormData((prev) => ({ ...prev, city: text }))
//                   }
//                   placeholder="Enter your city"
//                 />
//                 {formErrors.city && (
//                   <Text style={styles.errorText}>{formErrors.city}</Text>
//                 )}
//               </View>

//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <MapPin size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>Delivery Address *</Text>
//                 </View>
//                 <TextInput
//                   style={[
//                     styles.input,
//                     formErrors.address && styles.inputError,
//                   ]}
//                   value={formData.address}
//                   onChangeText={(text) =>
//                     setFormData((prev) => ({ ...prev, address: text }))
//                   }
//                   placeholder="Enter your full delivery address"
//                   multiline
//                   numberOfLines={3}
//                 />
//                 {formErrors.address && (
//                   <Text style={styles.errorText}>{formErrors.address}</Text>
//                 )}
//               </View>
//             </View>
//           </View>

//           <View style={styles.card}>
//             <View style={styles.cardTitleContainer}>
//               <Text style={styles.cardTitle}>Order Summary</Text>
//               <Text style={styles.itemCount}>{items.length} items</Text>
//             </View>
//             {items.map((item) => (
//               <View key={item.documentId} style={styles.itemRow}>
//                 <View style={styles.itemDetails}>
//                   <Text style={styles.itemName} numberOfLines={1}>
//                     {item.name}
//                   </Text>
//                   <Text style={styles.itemQuantity}>Qty: {item.quantity}</Text>
//                 </View>
//                 <Text style={styles.itemPrice}>
//                   {((item.salesPrice || item.price) * item.quantity).toFixed(3)}{" "}
//                   KWD
//                 </Text>
//               </View>
//             ))}

//             <View style={styles.summaryContainer}>
//               <OrderSummaryRow
//                 label="Subtotal"
//                 value={`${subtotal.toFixed(3)} KWD`}
//               />
//               {appliedCoupon && (
//                 <OrderSummaryRow
//                   label={`Discount (${appliedCoupon.code})`}
//                   value={`- ${discount.toFixed(3)} KWD`}
//                   isDiscount
//                 />
//               )}
//               <View style={styles.shippingFeeRow}>
//                 <Text style={styles.summaryLabel}>Shipping Fee</Text>
//                 <View style={styles.shippingFeeValueContainer}>
//                   {isLoadingShippingFee ? (
//                     <ActivityIndicator size="small" color="#10B981" />
//                   ) : shippingFeeError ? (
//                     <Text style={styles.errorValue}>Error loading fee</Text>
//                   ) : (
//                     <Text style={styles.summaryValue}>{`${shippingFee.toFixed(
//                       3
//                     )} KWD`}</Text>
//                   )}
//                 </View>
//               </View>
//               <View style={styles.divider} />
//               <OrderSummaryRow
//                 label="Total Amount"
//                 value={`${finalTotal.toFixed(3)} KWD`}
//                 isTotal
//                 isLoading={isLoadingShippingFee}
//               />
//             </View>
//           </View>

//           <View style={styles.securityCard}>
//             <View style={styles.securityHeader}>
//               <Lock size={20} color="#10B981" />
//               <Text style={styles.securityTitle}>Secure Payment</Text>
//             </View>
//             <Text style={styles.securityText}>
//               • SSL encrypted payment processing • Verified by Bookeey Payment
//               Gateway • Your payment details are protected
//             </Text>
//           </View>

//           <TouchableOpacity
//             style={[
//               styles.payButton,
//               (isProcessing || isLoadingShippingFee) &&
//                 styles.payButtonDisabled,
//             ]}
//             onPress={handlePayment}
//             disabled={isProcessing || isLoadingShippingFee}
//           >
//             {isProcessing ? (
//               <ActivityIndicator color="white" size="small" />
//             ) : (
//               <View style={styles.payButtonContent}>
//                 <CreditCard size={20} color="white" />
//                 <Text style={styles.payButtonText}>
//                   Pay {finalTotal.toFixed(3)} KWD
//                 </Text>
//               </View>
//             )}
//           </TouchableOpacity>
//           {paymentError && <Text style={styles.errorText}>{paymentError}</Text>}
//         </ScrollView>

//         <Modal
//           visible={showWebView}
//           animationType="slide"
//           onRequestClose={handleBackPress}
//         >
//           <SafeAreaView style={styles.modalContainer}>
//             <View style={styles.webViewHeader}>
//               <TouchableOpacity
//                 onPress={handleBackPress}
//                 style={styles.webViewCloseButton}
//                 hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//               >
//                 <ArrowLeft color="#E53935" size={24} />
//               </TouchableOpacity>
//               <View style={styles.webViewTitleContainer}>
//                 <Lock size={16} color="#10B981" />
//                 <Text style={styles.webViewTitle}>Secure Payment</Text>
//               </View>
//             </View>
//             {isWebViewLoading && <PaymentLoadingOverlay />}
//             {paymentUrl && (
//               <WebView
//                 source={{ uri: paymentUrl }}
//                 onNavigationStateChange={(navState) => {
//                   if (navState.url.includes("/success")) {
//                     handlePaymentSuccess();
//                   } else if (navState.url.includes("/failure")) {
//                     handlePaymentFailure();
//                   }
//                 }}
//                 onLoadStart={() => setIsWebViewLoading(true)}
//                 onLoadEnd={() => setIsWebViewLoading(false)}
//                 onError={(syntheticEvent) =>
//                   handlePaymentError(syntheticEvent.nativeEvent.description)
//                 }
//                 onHttpError={() => handlePaymentError("Connection error")}
//                 style={styles.webView}
//                 incognito={true}
//                 cacheEnabled={false}
//                 domStorageEnabled={true}
//                 javaScriptEnabled={true}
//                 startInLoadingState={true}
//               />
//             )}
//           </SafeAreaView>
//         </Modal>

//         <PaymentSuccessModal
//           visible={showSuccessModal}
//           onClose={() => {
//             setShowSuccessModal(false);
//             router.push("/(root)/Cart");
//           }}
//         />

//         <Modal
//           visible={showFailureModal}
//           transparent={true}
//           animationType="fade"
//           onRequestClose={() => setShowFailureModal(false)}
//         >
//           <View style={styles.modalBackground}>
//             <View style={[styles.modalContent, styles.failureModal]}>
//               <XCircle size={48} color="#E53935" />
//               <Text style={styles.modalTitle}>Payment Failed</Text>
//               <Text style={styles.modalText}>
//                 {paymentError ||
//                   "Please try again or use a different payment method."}
//               </Text>
//               <TouchableOpacity
//                 style={styles.modalButton}
//                 onPress={() => setShowFailureModal(false)}
//               >
//                 <Text style={styles.modalButtonText}>Try Again</Text>
//               </TouchableOpacity>
//             </View>
//           </View>
//         </Modal>
//       </KeyboardAvoidingView>
//       <Toast />
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: { flex: 1, backgroundColor: "#f9fafb" },
//   container: { flex: 1 },
//   contentContainer: { padding: 16, paddingBottom: 100 },
//   header: {
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     paddingVertical: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f0f0f0",
//     backgroundColor: "#f9fafb",
//   },
//   backButton: { padding: 4 },
//   headerTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#1f2937",
//     marginLeft: 16,
//   },
//   formContainer: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   section: { marginBottom: 24 },
//   sectionTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#e5e7eb",
//     paddingBottom: 4,
//   },
//   formTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 12,
//   },
//   formField: { marginBottom: 16 },
//   inputLabelContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 6,
//     marginBottom: 4,
//   },
//   inputLabel: { fontSize: 14, fontFamily: "Cairo-SemiBold", color: "#4b5563" },
//   input: {
//     borderWidth: 1,
//     borderColor: "#e5e7eb",
//     borderRadius: 8,
//     padding: 12,
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#1f2937",
//     backgroundColor: "#fafafa",
//   },
//   inputError: { borderColor: "#ef4444" },
//   errorText: {
//     color: "#ef4444",
//     fontSize: 12,
//     fontFamily: "Cairo",
//     marginTop: 4,
//   },
//   helperText: {
//     fontSize: 12,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//     marginTop: 4,
//   },
//   deliveryNote: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#10B981",
//     marginBottom: 16,
//     textAlign: "center",
//     backgroundColor: "#f0fdf4",
//     padding: 8,
//     borderRadius: 8,
//   },
//   card: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   cardTitleContainer: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 16,
//   },
//   cardTitle: { fontSize: 18, fontFamily: "Cairo-SemiBold", color: "#1f2937" },
//   itemCount: { fontSize: 14, fontFamily: "Cairo", color: "#6b7280" },
//   itemRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 12,
//     paddingBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f1f5f9",
//   },
//   itemDetails: { flex: 1, paddingRight: 8 },
//   itemName: {
//     fontSize: 15,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//     marginBottom: 4,
//   },
//   itemQuantity: { fontSize: 13, fontFamily: "Cairo", color: "#6b7280" },
//   itemPrice: { fontSize: 15, fontFamily: "Cairo-Bold", color: "#374151" },
//   summaryContainer: {
//     marginTop: 16,
//     paddingTop: 16,
//     borderTopWidth: 1,
//     borderTopColor: "#e5e7eb",
//   },
//   divider: { height: 1, backgroundColor: "#e5e7eb", marginVertical: 12 },
//   securityCard: {
//     backgroundColor: "#f0fdf4",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 24,
//     borderWidth: 1,
//     borderColor: "#86efac",
//   },
//   securityHeader: {
//     flexDirection: "row",
//     alignItems: "center",
//     marginBottom: 12,
//     gap: 8,
//   },
//   securityTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#047857",
//   },
//   securityText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4B5563",
//     lineHeight: 22,
//   },
//   payButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 12,
//     padding: 18,
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 12,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//   },
//   payButtonDisabled: { opacity: 0.6 },
//   payButtonContent: { flexDirection: "row", alignItems: "center", gap: 10 },
//   payButtonText: { color: "white", fontSize: 16, fontFamily: "Cairo-Bold" },
//   modalBackground: {
//     flex: 1,
//     backgroundColor: "rgba(0, 0, 0, 0.5)",
//     justifyContent: "center",
//     alignItems: "center",
//   },
//   modalContainer: { flex: 1, backgroundColor: "#fff" },
//   modalContent: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "80%",
//     maxWidth: 300,
//   },
//   successModalContent: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "90%",
//     maxWidth: 350,
//   },
//   lottieAnimation: { width: 200, height: 200 },
//   failureModal: { borderColor: "#E53935", borderWidth: 2 },
//   modalTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   modalText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   modalButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 8,
//     paddingVertical: 12,
//     paddingHorizontal: 24,
//     marginTop: 24,
//   },
//   modalButtonText: { color: "white", fontSize: 16, fontFamily: "Cairo-Bold" },
//   webView: { flex: 1 },
//   webViewHeader: {
//     height: 56,
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     borderBottomWidth: 1,
//     borderBottomColor: "#E5E7EB",
//     backgroundColor: "#f9fafb",
//   },
//   webViewCloseButton: { padding: 8 },
//   webViewTitleContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 8,
//     flex: 1,
//     justifyContent: "center",
//     marginRight: 40,
//   },
//   webViewTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   loadingOverlay: {
//     position: "absolute",
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//     backgroundColor: "rgba(255,255,255,0.95)",
//     justifyContent: "center",
//     alignItems: "center",
//     zIndex: 1000,
//   },
//   loadingCard: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//     width: "80%",
//     maxWidth: 300,
//   },
//   loadingTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   loadingSubtext: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   errorValue: { fontSize: 14, fontFamily: "Cairo", color: "#DC2626" },
//   shippingFeeRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginVertical: 4,
//   },
//   shippingFeeValueContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     justifyContent: "flex-end",
//   },
//   summaryLabel: { fontSize: 14, fontFamily: "Cairo", color: "#4b5563" },
//   summaryValue: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
// });

/****************************** */

// import React, { useState, useCallback, useEffect, useRef } from "react";
// import {
//   View,
//   Text,
//   ScrollView,
//   Alert,
//   ActivityIndicator,
//   StyleSheet,
//   Platform,
//   TouchableOpacity,
//   SafeAreaView,
//   BackHandler,
//   Modal,
//   StatusBar,
//   TextInput,
//   KeyboardAvoidingView,
//   Animated,
// } from "react-native";
// import { router, useNavigation } from "expo-router";
// import { WebView } from "react-native-webview";
// import { useFocusEffect } from "@react-navigation/native";
// import {
//   Shield,
//   CreditCard,
//   ArrowLeft,
//   Lock,
//   ChevronLeft,
//   XCircle,
//   User,
//   Phone,
//   Mail,
//   MapPin,
// } from "lucide-react-native";
// import Toast from "react-native-toast-message";
// import NetInfo from "@react-native-community/netinfo";
// import * as SecureStore from "expo-secure-store";
// import useCartStore from "../../store/cartStore";
// import { OrderSummaryRow } from "../Components/OrderSummary";
// import useShippingFee from "../hooks/useShippingFee";
// import { useSafeAreaInsets } from "react-native-safe-area-context";
// import CryptoJS from "crypto-js";
// import LottieView from "lottie-react-native";

// const IS_TEST_ENV = process.env.EXPO_PUBLIC_IS_TEST_ENV === "true";
// const PAYMENT_API_URL = IS_TEST_ENV
//   ? "https://4f54-37-36-175-221.ngrok-free.app/api/payments/initiate"
//   : "https://pg.bookeey.com/internalapi/api/payment/requestLink";

// const MerchUID = "mer2400018";
// const SECRET_KEY = "0623475";
// const SURL = IS_TEST_ENV
//   ? "https://f36b-37-36-175-221.ngrok-free.app/api/payments/success"
//   : "https://app.bookeeypayment.com/success";
// const FURL = IS_TEST_ENV
//   ? "https://f36b-37-36-175-221.ngrok-free.app/api/payments/failure"
//   : "https://app.bookeeypayment.com/failure";
// const FORM_DATA_KEY = "user_checkout_info";

// const PaymentSuccessModal = ({ visible, onClose }) => {
//   const animationRef = useRef(null);

//   useEffect(() => {
//     if (visible && animationRef.current) {
//       animationRef.current.play();
//     }
//   }, [visible]);

//   return (
//     <Modal
//       visible={visible}
//       transparent={true}
//       animationType="fade"
//       onRequestClose={onClose}
//     >
//       <View style={styles.modalBackground}>
//         <View style={styles.successModalContent}>
//           <LottieView
//             ref={animationRef}
//             source={require("../../assets/lotties/payment-success.json")}
//             style={styles.lottieAnimation}
//             loop={false}
//             onAnimationFinish={onClose}
//           />
//           <Text style={styles.modalTitle}>Payment Successful!</Text>
//           <Text style={styles.modalText}>
//             Thank you for your purchase. Redirecting to cart...
//           </Text>
//         </View>
//       </View>
//     </Modal>
//   );
// };

// const PaymentLoadingOverlay = () => (
//   <View style={styles.loadingOverlay}>
//     <View style={styles.loadingCard}>
//       <ActivityIndicator size="large" color="#10B981" />
//       <Text style={styles.loadingTitle}>Processing Payment</Text>
//       <Text style={styles.loadingSubtext}>Please don't close this window</Text>
//     </View>
//   </View>
// );

// const REQUIRED_FIELDS = [
//   "firstName",
//   "lastName",
//   "phone",
//   "email",
//   "state",
//   "city",
//   "address",
// ];
// const PHONE_REGEX = /^\d{8,}$/;
// const EMAIL_REGEX = /\S+@\S+\.\S+/;

// const saveFormData = async (data) => {
//   try {
//     await SecureStore.setItemAsync(FORM_DATA_KEY, JSON.stringify(data));
//   } catch (error) {
//     console.error("Error saving form data:", error);
//   }
// };

// const loadFormData = async () => {
//   try {
//     const savedData = await SecureStore.getItemAsync(FORM_DATA_KEY);
//     return savedData ? JSON.parse(savedData) : null;
//   } catch (error) {
//     console.error("Error loading form data:", error);
//     return null;
//   }
// };

// export default function CheckoutPage() {
//   const insets = useSafeAreaInsets();
//   const navigation = useNavigation();
//   const { items, total, discountedTotal, appliedCoupon, clearCart } =
//     useCartStore();
//   const {
//     shippingFee,
//     loading: isLoadingShippingFee,
//     error: shippingFeeError,
//   } = useShippingFee();

//   const successScale = useRef(new Animated.Value(0)).current;
//   const successOpacity = useRef(new Animated.Value(0)).current;
//   const checkmarkStroke = useRef(new Animated.Value(0)).current;

//   const [formData, setFormData] = useState({
//     firstName: "",
//     lastName: "",
//     phone: "",
//     email: "",
//     state: "",
//     city: "",
//     address: "",
//   });
//   const [formErrors, setFormErrors] = useState({});
//   const [isProcessing, setIsProcessing] = useState(false);
//   const [paymentError, setPaymentError] = useState(null);
//   const [showWebView, setShowWebView] = useState(false);
//   const [paymentUrl, setPaymentUrl] = useState(null);
//   const [isWebViewLoading, setIsWebViewLoading] = useState(true);
//   const [showSuccessModal, setShowSuccessModal] = useState(false);
//   const [showFailureModal, setShowFailureModal] = useState(false);

//   useEffect(() => {
//     const loadSavedData = async () => {
//       const savedData = await loadFormData();
//       if (savedData) {
//         setFormData(savedData);
//       }
//     };
//     loadSavedData();
//   }, []);

//   useEffect(() => {
//     if (items.length === 0) {
//       router.replace("/(root)/Cart");
//     }
//   }, [items.length]);

//   const validateForm = () => {
//     const errors = {};
//     let isValid = true;

//     if (!formData.firstName.trim()) {
//       errors.firstName = "First name is required";
//       isValid = false;
//     }
//     if (!formData.lastName.trim()) {
//       errors.lastName = "Last name is required";
//       isValid = false;
//     }
//     if (!formData.email.trim()) {
//       errors.email = "Email is required";
//       isValid = false;
//     } else if (!EMAIL_REGEX.test(formData.email)) {
//       errors.email = "Invalid email address";
//       isValid = false;
//     }
//     if (!formData.phone.trim()) {
//       errors.phone = "Phone number is required";
//       isValid = false;
//     } else {
//       const cleanPhone = formData.phone.replace(/[^\d]/g, "");
//       if (!PHONE_REGEX.test(cleanPhone)) {
//         errors.phone = "Phone number must be at least 8 digits";
//         isValid = false;
//       }
//     }
//     if (!formData.state.trim()) {
//       errors.state = "State is required";
//       isValid = false;
//     }
//     if (!formData.city.trim()) {
//       errors.city = "City is required";
//       isValid = false;
//     }
//     if (!formData.address.trim()) {
//       errors.address = "Delivery address is required";
//       isValid = false;
//     }

//     setFormErrors(errors);
//     if (!isValid) {
//       Toast.show({
//         type: "error",
//         text1: "Form Validation Error",
//         text2: "Please fill in all required fields correctly",
//         position: "top",
//       });
//     }
//     return isValid;
//   };

//   const handleBackPress = useCallback(() => {
//     if (showWebView) {
//       Alert.alert(
//         "Cancel Payment?",
//         "Are you sure you want to cancel? This payment will not be processed.",
//         [
//           { text: "Continue Payment", style: "cancel" },
//           {
//             text: "Cancel Payment",
//             style: "destructive",
//             onPress: () => {
//               setShowWebView(false);
//               setPaymentUrl(null);
//               setShowFailureModal(true);
//             },
//           },
//         ]
//       );
//       return true;
//     }

//     router.push("/(root)/Cart");
//     return true;
//   }, [showWebView]);

//   useEffect(() => {
//     const backHandler = BackHandler.addEventListener(
//       "hardwareBackPress",
//       handleBackPress
//     );
//     return () => backHandler.remove();
//   }, [handleBackPress]);

//   useFocusEffect(
//     useCallback(() => {
//       navigation.setOptions({
//         gestureEnabled: !showWebView,
//         headerShown: false,
//       });
//     }, [showWebView])
//   );

//   const handlePaymentSuccess = async () => {
//     await saveFormData(formData);
//     clearCart();
//     setShowWebView(false);
//     setPaymentUrl(null);
//     Toast.show({
//       type: "success",
//       text1: "Payment Successful",
//       text2: "Thank you for your purchase!",
//       position: "top",
//     });
//     setShowSuccessModal(true);
//     setTimeout(() => {
//       setShowSuccessModal(false);
//       router.push("/(root)/Cart");
//     }, 3000);
//   };

//   const handlePaymentFailure = () => {
//     setShowWebView(false);
//     setPaymentUrl(null);
//     setShowFailureModal(true);
//   };

//   const handlePaymentError = (errorMessage) => {
//     setPaymentError(errorMessage);
//     setShowFailureModal(true);
//   };

//   const subtotal = total;
//   const discount = appliedCoupon
//     ? appliedCoupon.type === "percentage"
//       ? (total * appliedCoupon.amount) / 100
//       : appliedCoupon.amount
//     : 0;
//   const finalTotal = (discountedTotal || total) + shippingFee;

//   const handlePayment = async () => {
//     if (isProcessing || !validateForm()) return;

//     try {
//       const netInfo = await NetInfo.fetch();
//       if (!netInfo.isConnected) {
//         Toast.show({
//           type: "error",
//           text1: "No Internet Connection",
//           text2: "Please check your connection and try again",
//           position: "top",
//         });
//         return;
//       }

//       setIsProcessing(true);
//       setPaymentError(null);

//       const currentDate = new Date()
//         .toISOString()
//         .replace(/[^0-9]/g, "")
//         .slice(0, 14);
//       const randomSuffix = Math.random().toString(36).slice(2, 6);
//       const orderId = `TX${currentDate}${randomSuffix}`;
//       const fullName = `${formData.firstName} ${formData.lastName}`;
//       const cleanPhone = formData.phone.replace(/[^\d]/g, "");

//       const txnHDR = `${Date.now()}${Math.floor(Math.random() * 10000)}`;
//       const rndnum = Math.random().toString(36).slice(2);
//       const sequence = `${MerchUID}|${orderId}|${SURL}|${FURL}|${finalTotal.toFixed(
//         3
//       )}|GEN|${SECRET_KEY}|${rndnum}`;
//       const hashMac = CryptoJS.SHA512(sequence).toString(CryptoJS.enc.Hex);

//       let payload;
//       let headers = {
//         "Content-Type": "application/json",
//         Accept: "application/json",
//       };

//       if (IS_TEST_ENV) {
//         payload = {
//           amount: Number(finalTotal.toFixed(3)),
//           orderId,
//           customerInfo: {
//             platform: Platform.OS.toUpperCase(),
//             customerName: fullName,
//             customerPhone: cleanPhone,
//             items: items.map((item) => ({
//               id: item.documentId,
//               name: item.name,
//               quantity: item.quantity,
//               price: Number((item.salesPrice || item.price).toFixed(3)),
//             })),
//           },
//         };
//         headers["ngrok-skip-browser-warning"] = "true";
//       } else {
//         payload = {
//           DBRqst: "PY_ECom",
//           Do_Appinfo: {
//             APPTyp: "MOB",
//             OS: Platform.OS === "ios" ? "iOS" : "ANDROID",
//             DevcType: null,
//             APPID: "PG",
//             IPAddrs: "",
//             HsCode: null,
//             Country: "KW",
//             AppVer: "1.0",
//             UsrSessID: null,
//             MdlID: "Pay_Req",
//             APIVer: "2.1",
//           },
//           Do_PyrDtl: {
//             Pyr_MPhone: cleanPhone,
//             Pyr_Name: fullName,
//             Emailid: formData.email || null,
//             address: formData.address || null,
//             city: formData.city || null,
//             state: formData.state || null,
//             Pyr_Email: formData.email || null,
//           },
//           Do_MerchDtl: {
//             BKY_PRDENUM: "ECom",
//             MerchUID: MerchUID,
//             SURL: SURL,
//             FURL: FURL,
//             verifyAndProcess: null,
//           },
//           Do_TxnHdr: {
//             BKY_Txn_UID: null,
//             Merch_Txn_UID: orderId,
//             Merch_TrackUID: null,
//             Txn_Date: null,
//             PayFor: "ECom",
//             PayMethod: "KNET",
//             Txn_AMT: finalTotal.toFixed(3),
//             Txn_HDR: txnHDR,
//             CDR: null,
//             CDR_KN: null,
//             CDR_BW: null,
//             CDR_CC: null,
//             CDR_AMX: null,
//             CDRCommission: null,
//             hashMac: hashMac,
//           },
//           Do_TxnDtl: [
//             {
//               SubMerchUID: MerchUID,
//               Txn_AMT: finalTotal.toFixed(3),
//               Comission: null,
//               Merch_Txn_UID: null,
//               PayMthd: null,
//               SURL: null,
//               FURL: null,
//               Amount: null,
//               TxnType: null,
//             },
//           ],
//           Do_WltDtl: null,
//           Do_MoreDtl: null,
//         };
//       }

//       const response = await fetch(PAYMENT_API_URL, {
//         method: "POST",
//         headers,
//         body: JSON.stringify(payload),
//       });

//       if (!response.ok) {
//         throw new Error(`Payment service unavailable: ${response.status}`);
//       }

//       const data = await response.json();
//       const paymentUrl = IS_TEST_ENV ? data?.paymentUrl : data?.PayUrl;

//       if (!paymentUrl || !paymentUrl.startsWith("https://")) {
//         throw new Error("Invalid or insecure payment URL received");
//       }

//       setPaymentUrl(paymentUrl);
//       setShowWebView(true);
//     } catch (error) {
//       const errorMessage = error.message || "Payment initiation failed";
//       console.error("Payment Error:", error);
//       setPaymentError(errorMessage);
//       handlePaymentError(errorMessage);
//     } finally {
//       setIsProcessing(false);
//     }
//   };

//   if (items.length === 0) {
//     return null;
//   }

//   return (
//     <SafeAreaView style={[styles.safeArea, { paddingTop: insets.top }]}>
//       <KeyboardAvoidingView
//         behavior={Platform.OS === "ios" ? "padding" : "height"}
//         style={styles.container}
//       >
//         <StatusBar barStyle="dark-content" backgroundColor="#f9fafb" />
//         <View style={styles.header}>
//           <TouchableOpacity
//             onPress={handleBackPress}
//             style={styles.backButton}
//             hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//           >
//             <ChevronLeft color="#E53935" size={28} />
//           </TouchableOpacity>
//           <Text style={styles.headerTitle}>Secure Checkout</Text>
//         </View>

//         <ScrollView
//           style={styles.container}
//           contentContainerStyle={styles.contentContainer}
//           showsVerticalScrollIndicator={false}
//         >
//           <View style={styles.formContainer}>
//             <Text style={styles.formTitle}>Delivery Information</Text>
//             <Text style={styles.deliveryNote}>
//               Orders will be delivered within the next business day.
//             </Text>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>Personal Information</Text>
//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <User size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>First Name *</Text>
//                 </View>
//                 <TextInput
//                   style={[
//                     styles.input,
//                     formErrors.firstName && styles.inputError,
//                   ]}
//                   value={formData.firstName}
//                   onChangeText={(text) =>
//                     setFormData((prev) => ({ ...prev, firstName: text }))
//                   }
//                   placeholder="Enter your first name"
//                   autoCapitalize="words"
//                 />
//                 {formErrors.firstName && (
//                   <Text style={styles.errorText}>{formErrors.firstName}</Text>
//                 )}
//               </View>

//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <User size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>Last Name *</Text>
//                 </View>
//                 <TextInput
//                   style={[
//                     styles.input,
//                     formErrors.lastName && styles.inputError,
//                   ]}
//                   value={formData.lastName}
//                   onChangeText={(text) =>
//                     setFormData((prev) => ({ ...prev, lastName: text }))
//                   }
//                   placeholder="Enter your last name"
//                   autoCapitalize="words"
//                 />
//                 {formErrors.lastName && (
//                   <Text style={styles.errorText}>{formErrors.lastName}</Text>
//                 )}
//               </View>

//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <Mail size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>Email *</Text>
//                 </View>
//                 <TextInput
//                   style={[styles.input, formErrors.email && styles.inputError]}
//                   value={formData.email}
//                   onChangeText={(text) =>
//                     setFormData((prev) => ({ ...prev, email: text }))
//                   }
//                   placeholder="Enter your email"
//                   keyboardType="email-address"
//                   autoCapitalize="none"
//                 />
//                 {formErrors.email && (
//                   <Text style={styles.errorText}>{formErrors.email}</Text>
//                 )}
//               </View>

//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <Phone size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>Phone Number *</Text>
//                 </View>
//                 <TextInput
//                   style={[styles.input, formErrors.phone && styles.inputError]}
//                   value={formData.phone}
//                   onChangeText={(text) => {
//                     const cleaned = text.replace(/[^\d]/g, "");
//                     setFormData((prev) => ({ ...prev, phone: cleaned }));
//                   }}
//                   placeholder="e.g., 12345678"
//                   keyboardType="phone-pad"
//                   maxLength={15}
//                 />
//                 {formErrors.phone ? (
//                   <Text style={styles.errorText}>{formErrors.phone}</Text>
//                 ) : (
//                   <Text style={styles.helperText}>
//                     Enter your Kuwait mobile number (minimum 8 digits)
//                   </Text>
//                 )}
//               </View>
//             </View>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>Delivery Address</Text>
//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <MapPin size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>State *</Text>
//                 </View>
//                 <TextInput
//                   style={[styles.input, formErrors.state && styles.inputError]}
//                   value={formData.state}
//                   onChangeText={(text) =>
//                     setFormData((prev) => ({ ...prev, state: text }))
//                   }
//                   placeholder="Enter your state/governorate"
//                 />
//                 {formErrors.state && (
//                   <Text style={styles.errorText}>{formErrors.state}</Text>
//                 )}
//               </View>

//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <MapPin size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>City *</Text>
//                 </View>
//                 <TextInput
//                   style={[styles.input, formErrors.city && styles.inputError]}
//                   value={formData.city}
//                   onChangeText={(text) =>
//                     setFormData((prev) => ({ ...prev, city: text }))
//                   }
//                   placeholder="Enter your city"
//                 />
//                 {formErrors.city && (
//                   <Text style={styles.errorText}>{formErrors.city}</Text>
//                 )}
//               </View>

//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <MapPin size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>Delivery Address *</Text>
//                 </View>
//                 <TextInput
//                   style={[
//                     styles.input,
//                     formErrors.address && styles.inputError,
//                   ]}
//                   value={formData.address}
//                   onChangeText={(text) =>
//                     setFormData((prev) => ({ ...prev, address: text }))
//                   }
//                   placeholder="Enter your full delivery address"
//                   multiline
//                   numberOfLines={3}
//                 />
//                 {formErrors.address && (
//                   <Text style={styles.errorText}>{formErrors.address}</Text>
//                 )}
//               </View>
//             </View>
//           </View>

//           <View style={styles.card}>
//             <View style={styles.cardTitleContainer}>
//               <Text style={styles.cardTitle}>Order Summary</Text>
//               <Text style={styles.itemCount}>{items.length} items</Text>
//             </View>
//             {items.map((item) => (
//               <View key={item.documentId} style={styles.itemRow}>
//                 <View style={styles.itemDetails}>
//                   <Text style={styles.itemName} numberOfLines={1}>
//                     {item.name}
//                   </Text>
//                   <Text style={styles.itemQuantity}>Qty: {item.quantity}</Text>
//                 </View>
//                 <Text style={styles.itemPrice}>
//                   {((item.salesPrice || item.price) * item.quantity).toFixed(3)}{" "}
//                   KWD
//                 </Text>
//               </View>
//             ))}

//             <View style={styles.summaryContainer}>
//               <OrderSummaryRow
//                 label="Subtotal"
//                 value={`${subtotal.toFixed(3)} KWD`}
//               />
//               {appliedCoupon && (
//                 <OrderSummaryRow
//                   label={`Discount (${appliedCoupon.code})`}
//                   value={`- ${discount.toFixed(3)} KWD`}
//                   isDiscount
//                 />
//               )}
//               <View style={styles.shippingFeeRow}>
//                 <Text style={styles.summaryLabel}>Shipping Fee</Text>
//                 <View style={styles.shippingFeeValueContainer}>
//                   {isLoadingShippingFee ? (
//                     <ActivityIndicator size="small" color="#10B981" />
//                   ) : shippingFeeError ? (
//                     <Text style={styles.errorValue}>Error loading fee</Text>
//                   ) : (
//                     <Text style={styles.summaryValue}>{`${shippingFee.toFixed(
//                       3
//                     )} KWD`}</Text>
//                   )}
//                 </View>
//               </View>
//               <View style={styles.divider} />
//               <OrderSummaryRow
//                 label="Total Amount"
//                 value={`${finalTotal.toFixed(3)} KWD`}
//                 isTotal
//                 isLoading={isLoadingShippingFee}
//               />
//             </View>
//           </View>

//           <View style={styles.securityCard}>
//             <View style={styles.securityHeader}>
//               <Lock size={20} color="#10B981" />
//               <Text style={styles.securityTitle}>Secure Payment</Text>
//             </View>
//             <Text style={styles.securityText}>
//               • SSL encrypted payment processing • Verified by Bookeey Payment
//               Gateway • Your payment details are protected
//             </Text>
//           </View>

//           <TouchableOpacity
//             style={[
//               styles.payButton,
//               (isProcessing || isLoadingShippingFee) &&
//                 styles.payButtonDisabled,
//             ]}
//             onPress={handlePayment}
//             disabled={isProcessing || isLoadingShippingFee}
//           >
//             {isProcessing ? (
//               <ActivityIndicator color="white" size="small" />
//             ) : (
//               <View style={styles.payButtonContent}>
//                 <CreditCard size={20} color="white" />
//                 <Text style={styles.payButtonText}>
//                   Pay {finalTotal.toFixed(3)} KWD
//                 </Text>
//               </View>
//             )}
//           </TouchableOpacity>
//           {paymentError && <Text style={styles.errorText}>{paymentError}</Text>}
//         </ScrollView>

//         <Modal
//           visible={showWebView}
//           animationType="slide"
//           onRequestClose={handleBackPress}
//         >
//           <SafeAreaView style={styles.modalContainer}>
//             <View style={styles.webViewHeader}>
//               <TouchableOpacity
//                 onPress={handleBackPress}
//                 style={styles.webViewCloseButton}
//                 hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//               >
//                 <ArrowLeft color="#E53935" size={24} />
//               </TouchableOpacity>
//               <View style={styles.webViewTitleContainer}>
//                 <Lock size={16} color="#10B981" />
//                 <Text style={styles.webViewTitle}>Secure Payment</Text>
//               </View>
//             </View>
//             {isWebViewLoading && <PaymentLoadingOverlay />}
//             {paymentUrl && (
//               <WebView
//                 source={{ uri: paymentUrl }}
//                 onNavigationStateChange={(navState) => {
//                   if (navState.url.includes("/success")) {
//                     handlePaymentSuccess();
//                   } else if (navState.url.includes("/failure")) {
//                     handlePaymentFailure();
//                   }
//                 }}
//                 onLoadStart={() => setIsWebViewLoading(true)}
//                 onLoadEnd={() => setIsWebViewLoading(false)}
//                 onError={(syntheticEvent) =>
//                   handlePaymentError(syntheticEvent.nativeEvent.description)
//                 }
//                 onHttpError={() => handlePaymentError("Connection error")}
//                 style={styles.webView}
//                 incognito={true}
//                 cacheEnabled={false}
//                 domStorageEnabled={true}
//                 javaScriptEnabled={true}
//                 startInLoadingState={true}
//               />
//             )}
//           </SafeAreaView>
//         </Modal>

//         <PaymentSuccessModal
//           visible={showSuccessModal}
//           onClose={() => {
//             setShowSuccessModal(false);
//             router.push("/(root)/Cart");
//           }}
//         />

//         <Modal
//           visible={showFailureModal}
//           transparent={true}
//           animationType="fade"
//           onRequestClose={() => setShowFailureModal(false)}
//         >
//           <View style={styles.modalBackground}>
//             <View style={[styles.modalContent, styles.failureModal]}>
//               <XCircle size={48} color="#E53935" />
//               <Text style={styles.modalTitle}>Payment Failed</Text>
//               <Text style={styles.modalText}>
//                 {paymentError ||
//                   "Please try again or use a different payment method."}
//               </Text>
//               <TouchableOpacity
//                 style={styles.modalButton}
//                 onPress={() => setShowFailureModal(false)}
//               >
//                 <Text style={styles.modalButtonText}>Try Again</Text>
//               </TouchableOpacity>
//             </View>
//           </View>
//         </Modal>
//       </KeyboardAvoidingView>
//       <Toast />
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: { flex: 1, backgroundColor: "#f9fafb" },
//   container: { flex: 1 },
//   contentContainer: { padding: 16, paddingBottom: 100 },
//   header: {
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     paddingVertical: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f0f0f0",
//     backgroundColor: "#f9fafb",
//   },
//   backButton: { padding: 4 },
//   headerTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#1f2937",
//     marginLeft: 16,
//   },
//   formContainer: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   section: { marginBottom: 24 },
//   sectionTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#e5e7eb",
//     paddingBottom: 4,
//   },
//   formTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 12,
//   },
//   formField: { marginBottom: 16 },
//   inputLabelContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 6,
//     marginBottom: 4,
//   },
//   inputLabel: { fontSize: 14, fontFamily: "Cairo-SemiBold", color: "#4b5563" },
//   input: {
//     borderWidth: 1,
//     borderColor: "#e5e7eb",
//     borderRadius: 8,
//     padding: 12,
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#1f2937",
//     backgroundColor: "#fafafa",
//   },
//   inputError: { borderColor: "#ef4444" },
//   errorText: {
//     color: "#ef4444",
//     fontSize: 12,
//     fontFamily: "Cairo",
//     marginTop: 4,
//   },
//   helperText: {
//     fontSize: 12,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//     marginTop: 4,
//   },
//   deliveryNote: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#10B981",
//     marginBottom: 16,
//     textAlign: "center",
//     backgroundColor: "#f0fdf4",
//     padding: 8,
//     borderRadius: 8,
//   },
//   card: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   cardTitleContainer: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 16,
//   },
//   cardTitle: { fontSize: 18, fontFamily: "Cairo-SemiBold", color: "#1f2937" },
//   itemCount: { fontSize: 14, fontFamily: "Cairo", color: "#6b7280" },
//   itemRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 12,
//     paddingBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f1f5f9",
//   },
//   itemDetails: { flex: 1, paddingRight: 8 },
//   itemName: {
//     fontSize: 15,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//     marginBottom: 4,
//   },
//   itemQuantity: { fontSize: 13, fontFamily: "Cairo", color: "#6b7280" },
//   itemPrice: { fontSize: 15, fontFamily: "Cairo-Bold", color: "#374151" },
//   summaryContainer: {
//     marginTop: 16,
//     paddingTop: 16,
//     borderTopWidth: 1,
//     borderTopColor: "#e5e7eb",
//   },
//   divider: { height: 1, backgroundColor: "#e5e7eb", marginVertical: 12 },
//   securityCard: {
//     backgroundColor: "#f0fdf4",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 24,
//     borderWidth: 1,
//     borderColor: "#86efac",
//   },
//   securityHeader: {
//     flexDirection: "row",
//     alignItems: "center",
//     marginBottom: 12,
//     gap: 8,
//   },
//   securityTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#047857",
//   },
//   securityText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4B5563",
//     lineHeight: 22,
//   },
//   payButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 12,
//     padding: 18,
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 12,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//   },
//   payButtonDisabled: { opacity: 0.6 },
//   payButtonContent: { flexDirection: "row", alignItems: "center", gap: 10 },
//   payButtonText: { color: "white", fontSize: 16, fontFamily: "Cairo-Bold" },
//   modalBackground: {
//     flex: 1,
//     backgroundColor: "rgba(0, 0, 0, 0.5)",
//     justifyContent: "center",
//     alignItems: "center",
//   },
//   modalContainer: { flex: 1, backgroundColor: "#fff" },
//   modalContent: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "80%",
//     maxWidth: 300,
//   },
//   successModalContent: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "90%",
//     maxWidth: 350,
//   },
//   lottieAnimation: { width: 200, height: 200 },
//   failureModal: { borderColor: "#E53935", borderWidth: 2 },
//   modalTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   modalText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   modalButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 8,
//     paddingVertical: 12,
//     paddingHorizontal: 24,
//     marginTop: 24,
//   },
//   modalButtonText: { color: "white", fontSize: 16, fontFamily: "Cairo-Bold" },
//   webView: { flex: 1 },
//   webViewHeader: {
//     height: 56,
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     borderBottomWidth: 1,
//     borderBottomColor: "#E5E7EB",
//     backgroundColor: "#f9fafb",
//   },
//   webViewCloseButton: { padding: 8 },
//   webViewTitleContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 8,
//     flex: 1,
//     justifyContent: "center",
//     marginRight: 40,
//   },
//   webViewTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   loadingOverlay: {
//     position: "absolute",
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//     backgroundColor: "rgba(255,255,255,0.95)",
//     justifyContent: "center",
//     alignItems: "center",
//     zIndex: 1000,
//   },
//   loadingCard: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//     width: "80%",
//     maxWidth: 300,
//   },
//   loadingTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   loadingSubtext: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   errorValue: { fontSize: 14, fontFamily: "Cairo", color: "#DC2626" },
//   shippingFeeRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginVertical: 4,
//   },
//   shippingFeeValueContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     justifyContent: "flex-end",
//   },
//   summaryLabel: { fontSize: 14, fontFamily: "Cairo", color: "#4b5563" },
//   summaryValue: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
// });

/******************************************** */

// import React, { useState, useCallback, useEffect, useRef } from "react";
// import {
//   View,
//   Text,
//   ScrollView,
//   Alert,
//   ActivityIndicator,
//   StyleSheet,
//   Platform,
//   TouchableOpacity,
//   SafeAreaView,
//   BackHandler,
//   Modal,
//   StatusBar,
//   TextInput,
//   KeyboardAvoidingView,
//   Animated,
// } from "react-native";
// import { router, useNavigation } from "expo-router";
// import { WebView } from "react-native-webview";
// import { useFocusEffect } from "@react-navigation/native";
// import {
//   Shield,
//   CreditCard,
//   ArrowLeft,
//   Lock,
//   ChevronLeft,
//   XCircle,
//   User,
//   Phone,
//   Mail,
//   MapPin,
// } from "lucide-react-native";
// import Toast from "react-native-toast-message";
// import NetInfo from "@react-native-community/netinfo";
// import * as SecureStore from "expo-secure-store";
// import useCartStore from "../../store/cartStore";
// import { OrderSummaryRow } from "../Components/OrderSummary";
// import useShippingFee from "../hooks/useShippingFee";
// import { useSafeAreaInsets } from "react-native-safe-area-context";
// import CryptoJS from "crypto-js";
// import LottieView from "lottie-react-native";

// const IS_TEST_ENV = process.env.EXPO_PUBLIC_IS_TEST_ENV === "true";
// const PAYMENT_API_URL = IS_TEST_ENV
//   ? "https://demo.bookeey.com/pgapi/api/payment/requestLink"
//   : "https://pg.bookeey.com/internalapi/api/payment/requestLink";

// const MerchUID = "mer2400018";
// const SECRET_KEY = "0623475";
// const SURL = IS_TEST_ENV
//   ? "https://f36b-37-36-175-221.ngrok-free.app/api/payments/success"
//   : "https://app.bookeeypayment.com/success";
// const FURL = IS_TEST_ENV
//   ? "https://f36b-37-36-175-221.ngrok-free.app/api/payments/failure"
//   : "https://app.bookeeypayment.com/failure";
// const FORM_DATA_KEY = "user_checkout_info";

// const PaymentSuccessModal = ({ visible, onClose }) => {
//   const animationRef = useRef(null);

//   useEffect(() => {
//     if (visible && animationRef.current) {
//       animationRef.current.play();
//     }
//   }, [visible]);

//   return (
//     <Modal
//       visible={visible}
//       transparent={true}
//       animationType="fade"
//       onRequestClose={onClose}
//     >
//       <View style={styles.modalBackground}>
//         <View style={styles.successModalContent}>
//           <LottieView
//             ref={animationRef}
//             source={require("../../assets/lotties/payment-success.json")}
//             style={styles.lottieAnimation}
//             loop={false}
//             onAnimationFinish={onClose}
//           />
//           <Text style={styles.modalTitle}>Payment Successful!</Text>
//           <Text style={styles.modalText}>
//             Thank you for your purchase. Redirecting to cart...
//           </Text>
//         </View>
//       </View>
//     </Modal>
//   );
// };

// const PaymentLoadingOverlay = () => (
//   <View style={styles.loadingOverlay}>
//     <View style={styles.loadingCard}>
//       <ActivityIndicator size="large" color="#10B981" />
//       <Text style={styles.loadingTitle}>Processing Payment</Text>
//       <Text style={styles.loadingSubtext}>Please don't close this window</Text>
//     </View>
//   </View>
// );

// const REQUIRED_FIELDS = [
//   "firstName",
//   "lastName",
//   "phone",
//   "email",
//   "state",
//   "city",
//   "address",
// ];
// const PHONE_REGEX = /^\d{8,}$/;
// const EMAIL_REGEX = /\S+@\S+\.\S+/;

// const saveFormData = async (data) => {
//   try {
//     await SecureStore.setItemAsync(FORM_DATA_KEY, JSON.stringify(data));
//   } catch (error) {
//     console.error("Error saving form data:", error);
//   }
// };

// const loadFormData = async () => {
//   try {
//     const savedData = await SecureStore.getItemAsync(FORM_DATA_KEY);
//     return savedData ? JSON.parse(savedData) : null;
//   } catch (error) {
//     console.error("Error loading form data:", error);
//     return null;
//   }
// };

// export default function CheckoutPage() {
//   const insets = useSafeAreaInsets();
//   const navigation = useNavigation();
//   const { items, total, discountedTotal, appliedCoupon, clearCart } =
//     useCartStore();
//   const {
//     shippingFee,
//     loading: isLoadingShippingFee,
//     error: shippingFeeError,
//   } = useShippingFee();

//   const successScale = useRef(new Animated.Value(0)).current;
//   const successOpacity = useRef(new Animated.Value(0)).current;
//   const checkmarkStroke = useRef(new Animated.Value(0)).current;

//   const [formData, setFormData] = useState({
//     firstName: "",
//     lastName: "",
//     phone: "",
//     email: "",
//     state: "",
//     city: "",
//     address: "",
//   });
//   const [formErrors, setFormErrors] = useState({});
//   const [isProcessing, setIsProcessing] = useState(false);
//   const [paymentError, setPaymentError] = useState(null);
//   const [showWebView, setShowWebView] = useState(false);
//   const [paymentUrl, setPaymentUrl] = useState(null);
//   const [isWebViewLoading, setIsWebViewLoading] = useState(true);
//   const [showSuccessModal, setShowSuccessModal] = useState(false);
//   const [showFailureModal, setShowFailureModal] = useState(false);

//   useEffect(() => {
//     const loadSavedData = async () => {
//       const savedData = await loadFormData();
//       if (savedData) {
//         setFormData(savedData);
//       }
//     };
//     loadSavedData();
//   }, []);

//   useEffect(() => {
//     if (items.length === 0) {
//       router.replace("/(root)/Cart");
//     }
//   }, [items.length]);

//   const validateForm = () => {
//     const errors = {};
//     let isValid = true;

//     if (!formData.firstName.trim()) {
//       errors.firstName = "First name is required";
//       isValid = false;
//     }
//     if (!formData.lastName.trim()) {
//       errors.lastName = "Last name is required";
//       isValid = false;
//     }
//     if (!formData.email.trim()) {
//       errors.email = "Email is required";
//       isValid = false;
//     } else if (!EMAIL_REGEX.test(formData.email)) {
//       errors.email = "Invalid email address";
//       isValid = false;
//     }
//     if (!formData.phone.trim()) {
//       errors.phone = "Phone number is required";
//       isValid = false;
//     } else {
//       const cleanPhone = formData.phone.replace(/[^\d]/g, "");
//       if (!PHONE_REGEX.test(cleanPhone)) {
//         errors.phone = "Phone number must be at least 8 digits";
//         isValid = false;
//       }
//     }
//     if (!formData.state.trim()) {
//       errors.state = "State is required";
//       isValid = false;
//     }
//     if (!formData.city.trim()) {
//       errors.city = "City is required";
//       isValid = false;
//     }
//     if (!formData.address.trim()) {
//       errors.address = "Delivery address is required";
//       isValid = false;
//     }

//     setFormErrors(errors);
//     if (!isValid) {
//       Toast.show({
//         type: "error",
//         text1: "Form Validation Error",
//         text2: "Please fill in all required fields correctly",
//         position: "top",
//       });
//     }
//     return isValid;
//   };

//   const handleBackPress = useCallback(() => {
//     if (showWebView) {
//       Alert.alert(
//         "Cancel Payment?",
//         "Are you sure you want to cancel? This payment will not be processed.",
//         [
//           { text: "Continue Payment", style: "cancel" },
//           {
//             text: "Cancel Payment",
//             style: "destructive",
//             onPress: () => {
//               setShowWebView(false);
//               setPaymentUrl(null);
//               setShowFailureModal(true);
//             },
//           },
//         ]
//       );
//       return true;
//     }

//     router.push("/(root)/Cart");
//     return true;
//   }, [showWebView]);

//   useEffect(() => {
//     const backHandler = BackHandler.addEventListener(
//       "hardwareBackPress",
//       handleBackPress
//     );
//     return () => backHandler.remove();
//   }, [handleBackPress]);

//   useFocusEffect(
//     useCallback(() => {
//       navigation.setOptions({
//         gestureEnabled: !showWebView,
//         headerShown: false,
//       });
//     }, [showWebView])
//   );

//   const handlePaymentSuccess = async () => {
//     await saveFormData(formData);
//     clearCart();
//     setShowWebView(false);
//     setPaymentUrl(null);
//     Toast.show({
//       type: "success",
//       text1: "Payment Successful",
//       text2: "Thank you for your purchase!",
//       position: "top",
//     });
//     setShowSuccessModal(true);
//     setTimeout(() => {
//       setShowSuccessModal(false);
//       router.push("/(root)/Cart");
//     }, 3000);
//   };

//   const handlePaymentFailure = () => {
//     setShowWebView(false);
//     setPaymentUrl(null);
//     setShowFailureModal(true);
//   };

//   const handlePaymentError = (errorMessage) => {
//     setPaymentError(errorMessage);
//     setShowFailureModal(true);
//   };

//   const subtotal = total;
//   const discount = appliedCoupon
//     ? appliedCoupon.type === "percentage"
//       ? (total * appliedCoupon.amount) / 100
//       : appliedCoupon.amount
//     : 0;
//   const finalTotal = (discountedTotal || total) + shippingFee;

//   const handlePayment = async () => {
//     if (isProcessing || !validateForm()) return;

//     try {
//       const netInfo = await NetInfo.fetch();
//       if (!netInfo.isConnected) {
//         Toast.show({
//           type: "error",
//           text1: "No Internet Connection",
//           text2: "Please check your connection and try again",
//           position: "top",
//         });
//         return;
//       }

//       setIsProcessing(true);
//       setPaymentError(null);

//       const currentDate = new Date()
//         .toISOString()
//         .replace(/[^0-9]/g, "")
//         .slice(0, 14);
//       const randomSuffix = Math.random().toString(36).slice(2, 6);
//       const orderId = `TX${currentDate}${randomSuffix}`;
//       const fullName = `${formData.firstName} ${formData.lastName}`;
//       const cleanPhone = formData.phone.replace(/[^\d]/g, "");

//       const txnHDR = `${Date.now()}${Math.floor(Math.random() * 10000)}`;
//       const rndnum = Math.random().toString(36).slice(2);
//       const sequence = `${MerchUID}|${orderId}|${SURL}|${FURL}|${finalTotal.toFixed(
//         3
//       )}|GEN|${SECRET_KEY}|${rndnum}`;
//       const hashMac = CryptoJS.SHA512(sequence).toString(CryptoJS.enc.Hex);

//       const payload = {
//         DBRqst: "PY_ECom",
//         Do_Appinfo: {
//           APPTyp: "MOB",
//           OS: Platform.OS === "ios" ? "iOS" : "ANDROID",
//           DevcType: null,
//           APPID: "PG",
//           IPAddrs: "",
//           HsCode: null,
//           Country: "KW",
//           AppVer: "1.0",
//           UsrSessID: null,
//           MdlID: "Pay_Req",
//           APIVer: "2.1",
//         },
//         Do_PyrDtl: {
//           Pyr_MPhone: cleanPhone,
//           Pyr_Name: fullName,
//           Emailid: formData.email || null,
//           address: formData.address || null,
//           city: formData.city || null,
//           state: formData.state || null,
//           Pyr_Email: formData.email || null,
//         },
//         Do_MerchDtl: {
//           BKY_PRDENUM: "ECom",
//           MerchUID: MerchUID,
//           SURL: SURL,
//           FURL: FURL,
//           verifyAndProcess: null,
//         },
//         Do_TxnHdr: {
//           BKY_Txn_UID: null,
//           Merch_Txn_UID: orderId,
//           Merch_TrackUID: null,
//           Txn_Date: null,
//           PayFor: "ECom",
//           PayMethod: "KNET",
//           Txn_AMT: finalTotal.toFixed(3),
//           Txn_HDR: txnHDR,
//           CDR: null,
//           CDR_KN: null,
//           CDR_BW: null,
//           CDR_CC: null,
//           CDR_AMX: null,
//           CDRCommission: null,
//           hashMac: hashMac,
//         },
//         Do_TxnDtl: [
//           {
//             SubMerchUID: MerchUID,
//             Txn_AMT: finalTotal.toFixed(3),
//             Comission: null,
//             Merch_Txn_UID: null,
//             PayMthd: null,
//             SURL: null,
//             FURL: null,
//             Amount: null,
//             TxnType: null,
//           },
//         ],
//         Do_WltDtl: null,
//         Do_MoreDtl: null,
//       };

//       const headers = {
//         "Content-Type": "application/json",
//         Accept: "application/json",
//       };

//       const response = await fetch(PAYMENT_API_URL, {
//         method: "POST",
//         headers,
//         body: JSON.stringify(payload),
//       });

//       if (!response.ok) {
//         throw new Error(`Payment service unavailable: ${response.status}`);
//       }

//       const data = await response.json();
//       const paymentUrl = data?.PayUrl;

//       if (!paymentUrl || !paymentUrl.startsWith("https://")) {
//         throw new Error("Invalid or insecure payment URL received");
//       }

//       setPaymentUrl(paymentUrl);
//       setShowWebView(true);
//     } catch (error) {
//       const errorMessage = error.message || "Payment initiation failed";
//       console.error("Payment Error:", error);
//       setPaymentError(errorMessage);
//       handlePaymentError(errorMessage);
//     } finally {
//       setIsProcessing(false);
//     }
//   };

//   if (items.length === 0) {
//     return null;
//   }

//   return (
//     <SafeAreaView style={[styles.safeArea, { paddingTop: insets.top }]}>
//       <KeyboardAvoidingView
//         behavior={Platform.OS === "ios" ? "padding" : "height"}
//         style={styles.container}
//       >
//         <StatusBar barStyle="dark-content" backgroundColor="#f9fafb" />
//         <View style={styles.header}>
//           <TouchableOpacity
//             onPress={handleBackPress}
//             style={styles.backButton}
//             hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//           >
//             <ChevronLeft color="#E53935" size={28} />
//           </TouchableOpacity>
//           <Text style={styles.headerTitle}>Secure Checkout</Text>
//         </View>

//         <ScrollView
//           style={styles.container}
//           contentContainerStyle={styles.contentContainer}
//           showsVerticalScrollIndicator={false}
//         >
//           <View style={styles.formContainer}>
//             <Text style={styles.formTitle}>Delivery Information</Text>
//             <Text style={styles.deliveryNote}>
//               Orders will be delivered within the next business day.
//             </Text>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>Personal Information</Text>
//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <User size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>First Name *</Text>
//                 </View>
//                 <TextInput
//                   style={[
//                     styles.input,
//                     formErrors.firstName && styles.inputError,
//                   ]}
//                   value={formData.firstName}
//                   onChangeText={(text) =>
//                     setFormData((prev) => ({ ...prev, firstName: text }))
//                   }
//                   placeholder="Enter your first name"
//                   autoCapitalize="words"
//                 />
//                 {formErrors.firstName && (
//                   <Text style={styles.errorText}>{formErrors.firstName}</Text>
//                 )}
//               </View>

//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <User size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>Last Name *</Text>
//                 </View>
//                 <TextInput
//                   style={[
//                     styles.input,
//                     formErrors.lastName && styles.inputError,
//                   ]}
//                   value={formData.lastName}
//                   onChangeText={(text) =>
//                     setFormData((prev) => ({ ...prev, lastName: text }))
//                   }
//                   placeholder="Enter your last name"
//                   autoCapitalize="words"
//                 />
//                 {formErrors.lastName && (
//                   <Text style={styles.errorText}>{formErrors.lastName}</Text>
//                 )}
//               </View>

//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <Mail size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>Email *</Text>
//                 </View>
//                 <TextInput
//                   style={[styles.input, formErrors.email && styles.inputError]}
//                   value={formData.email}
//                   onChangeText={(text) =>
//                     setFormData((prev) => ({ ...prev, email: text }))
//                   }
//                   placeholder="Enter your email"
//                   keyboardType="email-address"
//                   autoCapitalize="none"
//                 />
//                 {formErrors.email && (
//                   <Text style={styles.errorText}>{formErrors.email}</Text>
//                 )}
//               </View>

//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <Phone size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>Phone Number *</Text>
//                 </View>
//                 <TextInput
//                   style={[styles.input, formErrors.phone && styles.inputError]}
//                   value={formData.phone}
//                   onChangeText={(text) => {
//                     const cleaned = text.replace(/[^\d]/g, "");
//                     setFormData((prev) => ({ ...prev, phone: cleaned }));
//                   }}
//                   placeholder="e.g., 12345678"
//                   keyboardType="phone-pad"
//                   maxLength={15}
//                 />
//                 {formErrors.phone ? (
//                   <Text style={styles.errorText}>{formErrors.phone}</Text>
//                 ) : (
//                   <Text style={styles.helperText}>
//                     Enter your Kuwait mobile number (minimum 8 digits)
//                   </Text>
//                 )}
//               </View>
//             </View>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>Delivery Address</Text>
//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <MapPin size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>State *</Text>
//                 </View>
//                 <TextInput
//                   style={[styles.input, formErrors.state && styles.inputError]}
//                   value={formData.state}
//                   onChangeText={(text) =>
//                     setFormData((prev) => ({ ...prev, state: text }))
//                   }
//                   placeholder="Enter your state/governorate"
//                 />
//                 {formErrors.state && (
//                   <Text style={styles.errorText}>{formErrors.state}</Text>
//                 )}
//               </View>

//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <MapPin size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>City *</Text>
//                 </View>
//                 <TextInput
//                   style={[styles.input, formErrors.city && styles.inputError]}
//                   value={formData.city}
//                   onChangeText={(text) =>
//                     setFormData((prev) => ({ ...prev, city: text }))
//                   }
//                   placeholder="Enter your city"
//                 />
//                 {formErrors.city && (
//                   <Text style={styles.errorText}>{formErrors.city}</Text>
//                 )}
//               </View>

//               <View style={styles.formField}>
//                 <View style={styles.inputLabelContainer}>
//                   <MapPin size={16} color="#4b5563" />
//                   <Text style={styles.inputLabel}>Delivery Address *</Text>
//                 </View>
//                 <TextInput
//                   style={[
//                     styles.input,
//                     formErrors.address && styles.inputError,
//                   ]}
//                   value={formData.address}
//                   onChangeText={(text) =>
//                     setFormData((prev) => ({ ...prev, address: text }))
//                   }
//                   placeholder="Enter your full delivery address"
//                   multiline
//                   numberOfLines={3}
//                 />
//                 {formErrors.address && (
//                   <Text style={styles.errorText}>{formErrors.address}</Text>
//                 )}
//               </View>
//             </View>
//           </View>

//           <View style={styles.card}>
//             <View style={styles.cardTitleContainer}>
//               <Text style={styles.cardTitle}>Order Summary</Text>
//               <Text style={styles.itemCount}>{items.length} items</Text>
//             </View>
//             {items.map((item) => (
//               <View key={item.documentId} style={styles.itemRow}>
//                 <View style={styles.itemDetails}>
//                   <Text style={styles.itemName} numberOfLines={1}>
//                     {item.name}
//                   </Text>
//                   <Text style={styles.itemQuantity}>Qty: {item.quantity}</Text>
//                 </View>
//                 <Text style={styles.itemPrice}>
//                   {((item.salesPrice || item.price) * item.quantity).toFixed(3)}{" "}
//                   KWD
//                 </Text>
//               </View>
//             ))}

//             <View style={styles.summaryContainer}>
//               <OrderSummaryRow
//                 label="Subtotal"
//                 value={`${subtotal.toFixed(3)} KWD`}
//               />
//               {appliedCoupon && (
//                 <OrderSummaryRow
//                   label={`Discount (${appliedCoupon.code})`}
//                   value={`- ${discount.toFixed(3)} KWD`}
//                   isDiscount
//                 />
//               )}
//               <View style={styles.shippingFeeRow}>
//                 <Text style={styles.summaryLabel}>Shipping Fee</Text>
//                 <View style={styles.shippingFeeValueContainer}>
//                   {isLoadingShippingFee ? (
//                     <ActivityIndicator size="small" color="#10B981" />
//                   ) : shippingFeeError ? (
//                     <Text style={styles.errorValue}>Error loading fee</Text>
//                   ) : (
//                     <Text style={styles.summaryValue}>{`${shippingFee.toFixed(
//                       3
//                     )} KWD`}</Text>
//                   )}
//                 </View>
//               </View>
//               <View style={styles.divider} />
//               <OrderSummaryRow
//                 label="Total Amount"
//                 value={`${finalTotal.toFixed(3)} KWD`}
//                 isTotal
//                 isLoading={isLoadingShippingFee}
//               />
//             </View>
//           </View>

//           <View style={styles.securityCard}>
//             <View style={styles.securityHeader}>
//               <Lock size={20} color="#10B981" />
//               <Text style={styles.securityTitle}>Secure Payment</Text>
//             </View>
//             <Text style={styles.securityText}>
//               • SSL encrypted payment processing • Verified by Bookeey Payment
//               Gateway • Your payment details are protected
//             </Text>
//           </View>

//           <TouchableOpacity
//             style={[
//               styles.payButton,
//               (isProcessing || isLoadingShippingFee) &&
//                 styles.payButtonDisabled,
//             ]}
//             onPress={handlePayment}
//             disabled={isProcessing || isLoadingShippingFee}
//           >
//             {isProcessing ? (
//               <ActivityIndicator color="white" size="small" />
//             ) : (
//               <View style={styles.payButtonContent}>
//                 <CreditCard size={20} color="white" />
//                 <Text style={styles.payButtonText}>
//                   Pay {finalTotal.toFixed(3)} KWD
//                 </Text>
//               </View>
//             )}
//           </TouchableOpacity>
//           {paymentError && <Text style={styles.errorText}>{paymentError}</Text>}
//         </ScrollView>

//         <Modal
//           visible={showWebView}
//           animationType="slide"
//           onRequestClose={handleBackPress}
//         >
//           <SafeAreaView style={styles.modalContainer}>
//             <View style={styles.webViewHeader}>
//               <TouchableOpacity
//                 onPress={handleBackPress}
//                 style={styles.webViewCloseButton}
//                 hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//               >
//                 <ArrowLeft color="#E53935" size={24} />
//               </TouchableOpacity>
//               <View style={styles.webViewTitleContainer}>
//                 <Lock size={16} color="#10B981" />
//                 <Text style={styles.webViewTitle}>Secure Payment</Text>
//               </View>
//             </View>
//             {isWebViewLoading && <PaymentLoadingOverlay />}
//             {paymentUrl && (
//               <WebView
//                 source={{ uri: paymentUrl }}
//                 onNavigationStateChange={(navState) => {
//                   if (navState.url.includes("/success")) {
//                     handlePaymentSuccess();
//                   } else if (navState.url.includes("/failure")) {
//                     handlePaymentFailure();
//                   }
//                 }}
//                 onLoadStart={() => setIsWebViewLoading(true)}
//                 onLoadEnd={() => setIsWebViewLoading(false)}
//                 onError={(syntheticEvent) =>
//                   handlePaymentError(syntheticEvent.nativeEvent.description)
//                 }
//                 onHttpError={() => handlePaymentError("Connection error")}
//                 style={styles.webView}
//                 incognito={true}
//                 cacheEnabled={false}
//                 domStorageEnabled={true}
//                 javaScriptEnabled={true}
//                 startInLoadingState={true}
//               />
//             )}
//           </SafeAreaView>
//         </Modal>

//         <PaymentSuccessModal
//           visible={showSuccessModal}
//           onClose={() => {
//             setShowSuccessModal(false);
//             router.push("/(root)/Cart");
//           }}
//         />

//         <Modal
//           visible={showFailureModal}
//           transparent={true}
//           animationType="fade"
//           onRequestClose={() => setShowFailureModal(false)}
//         >
//           <View style={styles.modalBackground}>
//             <View style={[styles.modalContent, styles.failureModal]}>
//               <XCircle size={48} color="#E53935" />
//               <Text style={styles.modalTitle}>Payment Failed</Text>
//               <Text style={styles.modalText}>
//                 {paymentError ||
//                   "Please try again or use a different payment method."}
//               </Text>
//               <TouchableOpacity
//                 style={styles.modalButton}
//                 onPress={() => setShowFailureModal(false)}
//               >
//                 <Text style={styles.modalButtonText}>Try Again</Text>
//               </TouchableOpacity>
//             </View>
//           </View>
//         </Modal>
//       </KeyboardAvoidingView>
//       <Toast />
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: { flex: 1, backgroundColor: "#f9fafb" },
//   container: { flex: 1 },
//   contentContainer: { padding: 16, paddingBottom: 100 },
//   header: {
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     paddingVertical: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f0f0f0",
//     backgroundColor: "#f9fafb",
//   },
//   backButton: { padding: 4 },
//   headerTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#1f2937",
//     marginLeft: 16,
//   },
//   formContainer: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   section: { marginBottom: 24 },
//   sectionTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#e5e7eb",
//     paddingBottom: 4,
//   },
//   formTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 12,
//   },
//   formField: { marginBottom: 16 },
//   inputLabelContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 6,
//     marginBottom: 4,
//   },
//   inputLabel: { fontSize: 14, fontFamily: "Cairo-SemiBold", color: "#4b5563" },
//   input: {
//     borderWidth: 1,
//     borderColor: "#e5e7eb",
//     borderRadius: 8,
//     padding: 12,
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#1f2937",
//     backgroundColor: "#fafafa",
//   },
//   inputError: { borderColor: "#ef4444" },
//   errorText: {
//     color: "#ef4444",
//     fontSize: 12,
//     fontFamily: "Cairo",
//     marginTop: 4,
//   },
//   helperText: {
//     fontSize: 12,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//     marginTop: 4,
//   },
//   deliveryNote: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#10B981",
//     marginBottom: 16,
//     textAlign: "center",
//     backgroundColor: "#f0fdf4",
//     padding: 8,
//     borderRadius: 8,
//   },
//   card: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   cardTitleContainer: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 16,
//   },
//   cardTitle: { fontSize: 18, fontFamily: "Cairo-SemiBold", color: "#1f2937" },
//   itemCount: { fontSize: 14, fontFamily: "Cairo", color: "#6b7280" },
//   itemRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 12,
//     paddingBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f1f5f9",
//   },
//   itemDetails: { flex: 1, paddingRight: 8 },
//   itemName: {
//     fontSize: 15,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//     marginBottom: 4,
//   },
//   itemQuantity: { fontSize: 13, fontFamily: "Cairo", color: "#6b7280" },
//   itemPrice: { fontSize: 15, fontFamily: "Cairo-Bold", color: "#374151" },
//   summaryContainer: {
//     marginTop: 16,
//     paddingTop: 16,
//     borderTopWidth: 1,
//     borderTopColor: "#e5e7eb",
//   },
//   divider: { height: 1, backgroundColor: "#e5e7eb", marginVertical: 12 },
//   securityCard: {
//     backgroundColor: "#f0fdf4",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 24,
//     borderWidth: 1,
//     borderColor: "#86efac",
//   },
//   securityHeader: {
//     flexDirection: "row",
//     alignItems: "center",
//     marginBottom: 12,
//     gap: 8,
//   },
//   securityTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#047857",
//   },
//   securityText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4B5563",
//     lineHeight: 22,
//   },
//   payButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 12,
//     padding: 18,
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 12,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//   },
//   payButtonDisabled: { opacity: 0.6 },
//   payButtonContent: { flexDirection: "row", alignItems: "center", gap: 10 },
//   payButtonText: { color: "white", fontSize: 16, fontFamily: "Cairo-Bold" },
//   modalBackground: {
//     flex: 1,
//     backgroundColor: "rgba(0, 0, 0, 0.5)",
//     justifyContent: "center",
//     alignItems: "center",
//   },
//   modalContainer: { flex: 1, backgroundColor: "#fff" },
//   modalContent: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "80%",
//     maxWidth: 300,
//   },
//   successModalContent: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "90%",
//     maxWidth: 350,
//   },
//   lottieAnimation: { width: 200, height: 200 },
//   failureModal: { borderColor: "#E53935", borderWidth: 2 },
//   modalTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   modalText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   modalButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 8,
//     paddingVertical: 12,
//     paddingHorizontal: 24,
//     marginTop: 24,
//   },
//   modalButtonText: { color: "white", fontSize: 16, fontFamily: "Cairo-Bold" },
//   webView: { flex: 1 },
//   webViewHeader: {
//     height: 56,
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     borderBottomWidth: 1,
//     borderBottomColor: "#E5E7EB",
//     backgroundColor: "#f9fafb",
//   },
//   webViewCloseButton: { padding: 8 },
//   webViewTitleContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 8,
//     flex: 1,
//     justifyContent: "center",
//     marginRight: 40,
//   },
//   webViewTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   loadingOverlay: {
//     position: "absolute",
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//     backgroundColor: "rgba(255,255,255,0.95)",
//     justifyContent: "center",
//     alignItems: "center",
//     zIndex: 1000,
//   },
//   loadingCard: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//     width: "80%",
//     maxWidth: 300,
//   },
//   loadingTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   loadingSubtext: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   errorValue: { fontSize: 14, fontFamily: "Cairo", color: "#DC2626" },
//   shippingFeeRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginVertical: 4,
//   },
//   shippingFeeValueContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     justifyContent: "flex-end",
//   },
//   summaryLabel: { fontSize: 14, fontFamily: "Cairo", color: "#4b5563" },
//   summaryValue: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
// });

/************************************************ */

// import React, { useState, useCallback, useEffect, useRef } from "react";
// import {
//   View,
//   Text,
//   ScrollView,
//   Alert,
//   ActivityIndicator,
//   StyleSheet,
//   Platform,
//   TouchableOpacity,
//   SafeAreaView,
//   BackHandler,
//   Modal,
//   StatusBar,
//   TextInput,
//   KeyboardAvoidingView,
//   Animated,
// } from "react-native";
// import { router, useNavigation } from "expo-router";
// import { WebView } from "react-native-webview";
// import { useFocusEffect } from "@react-navigation/native";
// import {
//   Shield,
//   CreditCard,
//   ArrowLeft,
//   Lock,
//   ChevronLeft,
//   XCircle,
//   User,
//   Phone,
//   Mail,
//   MapPin,
// } from "lucide-react-native";
// import Toast from "react-native-toast-message";
// import NetInfo from "@react-native-community/netinfo";
// import * as SecureStore from "expo-secure-store";
// import useCartStore from "../../store/cartStore";
// import { OrderSummaryRow } from "../Components/OrderSummary";
// import useShippingFee from "../hooks/useShippingFee";
// import { useSafeAreaInsets } from "react-native-safe-area-context";
// import CryptoJS from "crypto-js";
// import LottieView from "lottie-react-native";

// // Environment Configuration
// const IS_TEST_ENV = process.env.EXPO_PUBLIC_IS_TEST_ENV === "true";

// // API URLs
// const PAYMENT_API_URL = IS_TEST_ENV
//   ? "https://demo.bookeey.com/pgapi/api/payment/requestLink"
//   : "https://pg.bookeey.com/internalapi/api/payment/requestLink";

// // Merchant Credentials (Replace sandbox values with actual ones from Bookeey)
// const MerchUID = IS_TEST_ENV ? "sandbox_merchant_id" : "mer2400018";
// const SECRET_KEY = IS_TEST_ENV ? "sandbox_secret_key" : "0623475";

// // Success and Failure URLs
// const SURL = IS_TEST_ENV
//   ? "https://f36b-37-36-175-221.ngrok-free.app/api/payments/success"
//   : "https://app.bookeeypayment.com/success";
// const FURL = IS_TEST_ENV
//   ? "https://f36b-37-36-175-221.ngrok-free.app/api/payments/failure"
//   : "https://app.bookeeypayment.com/failure";

// const FORM_DATA_KEY = "user_checkout_info";

// // Components
// const PaymentSuccessModal = ({ visible, onClose }) => {
//   const animationRef = useRef(null);

//   useEffect(() => {
//     if (visible && animationRef.current) {
//       animationRef.current.play();
//     }
//   }, [visible]);

//   return (
//     <Modal
//       visible={visible}
//       transparent={true}
//       animationType="fade"
//       onRequestClose={onClose}
//     >
//       <View style={styles.modalBackground}>
//         <View style={styles.successModalContent}>
//           <LottieView
//             ref={animationRef}
//             source={require("../../assets/lotties/payment-success.json")}
//             style={styles.lottieAnimation}
//             loop={false}
//             onAnimationFinish={onClose}
//           />
//           <Text style={styles.modalTitle}>Payment Successful!</Text>
//           <Text style={styles.modalText}>
//             Thank you for your purchase. Redirecting to cart...
//           </Text>
//         </View>
//       </View>
//     </Modal>
//   );
// };

// const PaymentLoadingOverlay = () => (
//   <View style={styles.loadingOverlay}>
//     <View style={styles.loadingCard}>
//       <ActivityIndicator size="large" color="#10B981" />
//       <Text style={styles.loadingTitle}>Processing Payment</Text>
//       <Text style={styles.loadingSubtext}>Please don't close this window</Text>
//     </View>
//   </View>
// );

// // Constants
// const REQUIRED_FIELDS = [
//   "firstName",
//   "lastName",
//   "phone",
//   "email",
//   "state",
//   "city",
//   "address",
// ];
// const PHONE_REGEX = /^\d{8,}$/;
// const EMAIL_REGEX = /\S+@\S+\.\S+/;

// // Utility Functions
// const saveFormData = async (data) => {
//   try {
//     await SecureStore.setItemAsync(FORM_DATA_KEY, JSON.stringify(data));
//   } catch (error) {
//     console.error("Error saving form data:", error);
//   }
// };

// const loadFormData = async () => {
//   try {
//     const savedData = await SecureStore.getItemAsync(FORM_DATA_KEY);
//     return savedData ? JSON.parse(savedData) : null;
//   } catch (error) {
//     console.error("Error loading form data:", error);
//     return null;
//   }
// };

// // Main Component
// export default function CheckoutPage() {
//   const insets = useSafeAreaInsets();
//   const navigation = useNavigation();
//   const { items, total, discountedTotal, appliedCoupon, clearCart } =
//     useCartStore();
//   const {
//     shippingFee,
//     loading: isLoadingShippingFee,
//     error: shippingFeeError,
//   } = useShippingFee();

//   const [formData, setFormData] = useState({
//     firstName: "",
//     lastName: "",
//     phone: "",
//     email: "",
//     state: "",
//     city: "",
//     address: "",
//   });
//   const [formErrors, setFormErrors] = useState({});
//   const [isProcessing, setIsProcessing] = useState(false);
//   const [paymentError, setPaymentError] = useState(null);
//   const [showWebView, setShowWebView] = useState(false);
//   const [paymentUrl, setPaymentUrl] = useState(null);
//   const [isWebViewLoading, setIsWebViewLoading] = useState(true);
//   const [showSuccessModal, setShowSuccessModal] = useState(false);
//   const [showFailureModal, setShowFailureModal] = useState(false);

//   // Load saved form data on mount
//   useEffect(() => {
//     const loadSavedData = async () => {
//       const savedData = await loadFormData();
//       if (savedData) {
//         setFormData(savedData);
//       }
//     };
//     loadSavedData();
//   }, []);

//   // Redirect to cart if empty
//   useEffect(() => {
//     if (items.length === 0) {
//       router.replace("/(root)/Cart");
//     }
//   }, [items.length]);

//   // Form Validation
//   const validateForm = () => {
//     const errors = {};
//     let isValid = true;

//     REQUIRED_FIELDS.forEach((field) => {
//       if (!formData[field].trim()) {
//         errors[field] = `${
//           field.charAt(0).toUpperCase() + field.slice(1)
//         } is required`;
//         isValid = false;
//       }
//     });

//     if (formData.email && !EMAIL_REGEX.test(formData.email)) {
//       errors.email = "Invalid email address";
//       isValid = false;
//     }

//     const cleanPhone = formData.phone.replace(/[^\d]/g, "");
//     if (formData.phone && !PHONE_REGEX.test(cleanPhone)) {
//       errors.phone = "Phone number must be at least 8 digits";
//       isValid = false;
//     }

//     setFormErrors(errors);
//     if (!isValid) {
//       Toast.show({
//         type: "error",
//         text1: "Form Validation Error",
//         text2: "Please fill in all required fields correctly",
//         position: "top",
//       });
//     }
//     return isValid;
//   };

//   // Back Press Handler
//   const handleBackPress = useCallback(() => {
//     if (showWebView) {
//       Alert.alert(
//         "Cancel Payment?",
//         "Are you sure you want to cancel? This payment will not be processed.",
//         [
//           { text: "Continue Payment", style: "cancel" },
//           {
//             text: "Cancel Payment",
//             style: "destructive",
//             onPress: () => {
//               setShowWebView(false);
//               setPaymentUrl(null);
//               setShowFailureModal(true);
//             },
//           },
//         ]
//       );
//       return true;
//     }
//     router.push("/(root)/Cart");
//     return true;
//   }, [showWebView]);

//   useEffect(() => {
//     const backHandler = BackHandler.addEventListener(
//       "hardwareBackPress",
//       handleBackPress
//     );
//     return () => backHandler.remove();
//   }, [handleBackPress]);

//   useFocusEffect(
//     useCallback(() => {
//       navigation.setOptions({
//         gestureEnabled: !showWebView,
//         headerShown: false,
//       });
//     }, [showWebView])
//   );

//   // Payment Handlers
//   const handlePaymentSuccess = async () => {
//     await saveFormData(formData);
//     clearCart();
//     setShowWebView(false);
//     setPaymentUrl(null);
//     Toast.show({
//       type: "success",
//       text1: "Payment Successful",
//       text2: "Thank you for your purchase!",
//       position: "top",
//     });
//     setShowSuccessModal(true);
//     setTimeout(() => {
//       setShowSuccessModal(false);
//       router.push("/(root)/Cart");
//     }, 3000);
//   };

//   const handlePaymentFailure = () => {
//     setShowWebView(false);
//     setPaymentUrl(null);
//     setShowFailureModal(true);
//   };

//   const handlePaymentError = (errorMessage) => {
//     setPaymentError(errorMessage);
//     setShowFailureModal(true);
//   };

//   // Calculate Totals
//   const subtotal = total;
//   const discount = appliedCoupon
//     ? appliedCoupon.type === "percentage"
//       ? (total * appliedCoupon.amount) / 100
//       : appliedCoupon.amount
//     : 0;
//   const finalTotal = (discountedTotal || total) + shippingFee;

//   // Payment Initiation
//   const handlePayment = async () => {
//     if (isProcessing || !validateForm()) return;

//     try {
//       const netInfo = await NetInfo.fetch();
//       if (!netInfo.isConnected) {
//         throw new Error("No Internet Connection");
//       }

//       setIsProcessing(true);
//       setPaymentError(null);

//       // Generate unique identifiers
//       const currentDate = new Date()
//         .toISOString()
//         .replace(/[^0-9]/g, "")
//         .slice(0, 14);
//       const randomSuffix = Math.random().toString(36).slice(2, 6);
//       const orderId = `TX${currentDate}${randomSuffix}`;
//       const fullName = `${formData.firstName} ${formData.lastName}`;
//       const cleanPhone = formData.phone.replace(/[^\d]/g, "");
//       const txnHDR = `${Date.now()}${Math.floor(Math.random() * 10000)}`;
//       const rndnum = Math.random().toString(36).slice(2);

//       // Calculate HashMac
//       const sequence = `${MerchUID}|${orderId}|${SURL}|${FURL}|${finalTotal.toFixed(
//         3
//       )}|GEN|${SECRET_KEY}|${rndnum}`;
//       const hashMac = CryptoJS.SHA512(sequence).toString(CryptoJS.enc.Hex);

//       // Construct Payload
//       const payload = {
//         DBRqst: "PY_ECom",
//         Do_Appinfo: {
//           APPTyp: "MOB",
//           OS: Platform.OS === "ios" ? "iOS" : "ANDROID",
//           DevcType: null,
//           APPID: "PG",
//           IPAddrs: "",
//           HsCode: null,
//           Country: "KW",
//           AppVer: "1.0",
//           UsrSessID: null,
//           MdlID: "Pay_Req",
//           APIVer: "2.1",
//         },
//         Do_PyrDtl: {
//           Pyr_MPhone: cleanPhone,
//           Pyr_Name: fullName,
//           Emailid: formData.email || null,
//           address: formData.address || null,
//           city: formData.city || null,
//           state: formData.state || null,
//           Pyr_Email: formData.email || null,
//           ISDNCD: "965", // Kuwait country code
//         },
//         Do_MerchDtl: {
//           BKY_PRDENUM: "ECom",
//           MerchUID: MerchUID,
//           SURL: SURL,
//           FURL: FURL,
//           verifyAndProcess: null,
//         },
//         Do_TxnHdr: {
//           BKY_Txn_UID: null,
//           Merch_Txn_UID: orderId,
//           Merch_TrackUID: null,
//           Txn_Date: null,
//           PayFor: "ECom",
//           PayMethod: "KNET",
//           Txn_AMT: finalTotal.toFixed(3),
//           Txn_HDR: txnHDR,
//           CDR: null,
//           CDR_KN: null,
//           CDR_BW: null,
//           CDR_CC: null,
//           CDR_AMX: null,
//           CDRCommission: null,
//           hashMac: hashMac,
//         },
//         Do_TxnDtl: [
//           {
//             SubMerchUID: MerchUID,
//             Txn_AMT: finalTotal.toFixed(3),
//             Comission: null,
//             Merch_Txn_UID: null,
//             PayMthd: null,
//             SURL: null,
//             FURL: null,
//             Amount: null,
//             TxnType: null,
//           },
//         ],
//         Do_WltDtl: null,
//         Do_MoreDtl: null,
//       };

//       const headers = {
//         "Content-Type": "application/json",
//         Accept: "application/json",
//       };

//       console.log("Sending payload to:", PAYMENT_API_URL);
//       console.log("Payload:", JSON.stringify(payload));

//       const response = await fetch(PAYMENT_API_URL, {
//         method: "POST",
//         headers,
//         body: JSON.stringify(payload),
//       });

//       if (!response.ok) {
//         const errorText = await response.text();
//         console.error("Payment service error:", response.status, errorText);
//         throw new Error(`Payment service unavailable: ${response.status}`);
//       }

//       const data = await response.json();
//       console.log("Bookeey API Response:", data);

//       const paymentUrl = data?.PayUrl;
//       if (!paymentUrl) {
//         console.error("Payment URL not found in response");
//         throw new Error("Payment URL not found in response");
//       }

//       if (!paymentUrl.startsWith("https://")) {
//         throw new Error("Invalid or insecure payment URL received");
//       }

//       setPaymentUrl(paymentUrl);
//       setShowWebView(true);
//     } catch (error) {
//       const errorMessage = error.message || "Payment initiation failed";
//       console.error("Payment Error:", error);
//       setPaymentError(errorMessage);
//       handlePaymentError(errorMessage);
//     } finally {
//       setIsProcessing(false);
//     }
//   };

//   if (items.length === 0) return null;

//   return (
//     <SafeAreaView style={[styles.safeArea, { paddingTop: insets.top }]}>
//       <KeyboardAvoidingView
//         behavior={Platform.OS === "ios" ? "padding" : "height"}
//         style={styles.container}
//       >
//         <StatusBar barStyle="dark-content" backgroundColor="#f9fafb" />
//         <View style={styles.header}>
//           <TouchableOpacity
//             onPress={handleBackPress}
//             style={styles.backButton}
//             hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//           >
//             <ChevronLeft color="#E53935" size={28} />
//           </TouchableOpacity>
//           <Text style={styles.headerTitle}>Secure Checkout</Text>
//         </View>

//         <ScrollView
//           style={styles.container}
//           contentContainerStyle={styles.contentContainer}
//           showsVerticalScrollIndicator={false}
//         >
//           <View style={styles.formContainer}>
//             <Text style={styles.formTitle}>Delivery Information</Text>
//             <Text style={styles.deliveryNote}>
//               Orders will be delivered within the next business day.
//             </Text>

//             {/* Personal Information Section */}
//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>Personal Information</Text>
//               {[
//                 { field: "firstName", label: "First Name *", Icon: User },
//                 { field: "lastName", label: "Last Name *", Icon: User },
//                 { field: "email", label: "Email *", Icon: Mail },
//                 { field: "phone", label: "Phone Number *", Icon: Phone },
//               ].map(({ field, label, Icon }) => (
//                 <View key={field} style={styles.formField}>
//                   <View style={styles.inputLabelContainer}>
//                     <Icon size={16} color="#4b5563" />
//                     <Text style={styles.inputLabel}>{label}</Text>
//                   </View>
//                   <TextInput
//                     style={[
//                       styles.input,
//                       formErrors[field] && styles.inputError,
//                     ]}
//                     value={formData[field]}
//                     onChangeText={(text) =>
//                       setFormData((prev) => ({
//                         ...prev,
//                         [field]:
//                           field === "phone" ? text.replace(/[^\d]/g, "") : text,
//                       }))
//                     }
//                     placeholder={`Enter your ${field}`}
//                     keyboardType={
//                       field === "email"
//                         ? "email-address"
//                         : field === "phone"
//                         ? "phone-pad"
//                         : "default"
//                     }
//                     autoCapitalize={field === "email" ? "none" : "words"}
//                     maxLength={field === "phone" ? 15 : undefined}
//                   />
//                   {formErrors[field] && (
//                     <Text style={styles.errorText}>{formErrors[field]}</Text>
//                   )}
//                   {field === "phone" && !formErrors.phone && (
//                     <Text style={styles.helperText}>
//                       Enter your Kuwait mobile number (minimum 8 digits)
//                     </Text>
//                   )}
//                 </View>
//               ))}
//             </View>

//             {/* Delivery Address Section */}
//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>Delivery Address</Text>
//               {[
//                 { field: "state", label: "State *" },
//                 { field: "city", label: "City *" },
//                 {
//                   field: "address",
//                   label: "Delivery Address *",
//                   multiline: true,
//                 },
//               ].map(({ field, label, multiline }) => (
//                 <View key={field} style={styles.formField}>
//                   <View style={styles.inputLabelContainer}>
//                     <MapPin size={16} color="#4b5563" />
//                     <Text style={styles.inputLabel}>{label}</Text>
//                   </View>
//                   <TextInput
//                     style={[
//                       styles.input,
//                       formErrors[field] && styles.inputError,
//                     ]}
//                     value={formData[field]}
//                     onChangeText={(text) =>
//                       setFormData((prev) => ({ ...prev, [field]: text }))
//                     }
//                     placeholder={`Enter your ${field}`}
//                     multiline={multiline}
//                     numberOfLines={multiline ? 3 : 1}
//                   />
//                   {formErrors[field] && (
//                     <Text style={styles.errorText}>{formErrors[field]}</Text>
//                   )}
//                 </View>
//               ))}
//             </View>
//           </View>

//           {/* Order Summary */}
//           <View style={styles.card}>
//             <View style={styles.cardTitleContainer}>
//               <Text style={styles.cardTitle}>Order Summary</Text>
//               <Text style={styles.itemCount}>{items.length} items</Text>
//             </View>
//             {items.map((item) => (
//               <View key={item.documentId} style={styles.itemRow}>
//                 <View style={styles.itemDetails}>
//                   <Text style={styles.itemName} numberOfLines={1}>
//                     {item.name}
//                   </Text>
//                   <Text style={styles.itemQuantity}>Qty: {item.quantity}</Text>
//                 </View>
//                 <Text style={styles.itemPrice}>
//                   {((item.salesPrice || item.price) * item.quantity).toFixed(3)}{" "}
//                   KWD
//                 </Text>
//               </View>
//             ))}

//             <View style={styles.summaryContainer}>
//               <OrderSummaryRow
//                 label="Subtotal"
//                 value={`${subtotal.toFixed(3)} KWD`}
//               />
//               {appliedCoupon && (
//                 <OrderSummaryRow
//                   label={`Discount (${appliedCoupon.code})`}
//                   value={`- ${discount.toFixed(3)} KWD`}
//                   isDiscount
//                 />
//               )}
//               <View style={styles.shippingFeeRow}>
//                 <Text style={styles.summaryLabel}>Shipping Fee</Text>
//                 <View style={styles.shippingFeeValueContainer}>
//                   {isLoadingShippingFee ? (
//                     <ActivityIndicator size="small" color="#10B981" />
//                   ) : shippingFeeError ? (
//                     <Text style={styles.errorValue}>Error loading fee</Text>
//                   ) : (
//                     <Text style={styles.summaryValue}>
//                       {`${shippingFee.toFixed(3)} KWD`}
//                     </Text>
//                   )}
//                 </View>
//               </View>
//               <View style={styles.divider} />
//               <OrderSummaryRow
//                 label="Total Amount"
//                 value={`${finalTotal.toFixed(3)} KWD`}
//                 isTotal
//                 isLoading={isLoadingShippingFee}
//               />
//             </View>
//           </View>

//           {/* Security Info */}
//           <View style={styles.securityCard}>
//             <View style={styles.securityHeader}>
//               <Lock size={20} color="#10B981" />
//               <Text style={styles.securityTitle}>Secure Payment</Text>
//             </View>
//             <Text style={styles.securityText}>
//               • SSL encrypted payment processing • Verified by Bookeey Payment
//               Gateway • Your payment details are protected
//             </Text>
//           </View>

//           {/* Pay Button */}
//           <TouchableOpacity
//             style={[
//               styles.payButton,
//               (isProcessing || isLoadingShippingFee) &&
//                 styles.payButtonDisabled,
//             ]}
//             onPress={handlePayment}
//             disabled={isProcessing || isLoadingShippingFee}
//           >
//             {isProcessing ? (
//               <ActivityIndicator color="white" size="small" />
//             ) : (
//               <View style={styles.payButtonContent}>
//                 <CreditCard size={20} color="white" />
//                 <Text style={styles.payButtonText}>
//                   Pay {finalTotal.toFixed(3)} KWD
//                 </Text>
//               </View>
//             )}
//           </TouchableOpacity>
//           {paymentError && <Text style={styles.errorText}>{paymentError}</Text>}
//         </ScrollView>

//         {/* WebView Modal */}
//         <Modal
//           visible={showWebView}
//           animationType="slide"
//           onRequestClose={handleBackPress}
//         >
//           <SafeAreaView style={styles.modalContainer}>
//             <View style={styles.webViewHeader}>
//               <TouchableOpacity
//                 onPress={handleBackPress}
//                 style={styles.webViewCloseButton}
//                 hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//               >
//                 <ArrowLeft color="#E53935" size={24} />
//               </TouchableOpacity>
//               <View style={styles.webViewTitleContainer}>
//                 <Lock size={16} color="#10B981" />
//                 <Text style={styles.webViewTitle}>Secure Payment</Text>
//               </View>
//             </View>
//             {isWebViewLoading && <PaymentLoadingOverlay />}
//             {paymentUrl && (
//               <WebView
//                 source={{ uri: paymentUrl }}
//                 onNavigationStateChange={(navState) => {
//                   if (navState.url.includes("/success")) {
//                     handlePaymentSuccess();
//                   } else if (navState.url.includes("/failure")) {
//                     handlePaymentFailure();
//                   }
//                 }}
//                 onLoadStart={() => setIsWebViewLoading(true)}
//                 onLoadEnd={() => setIsWebViewLoading(false)}
//                 onError={(syntheticEvent) =>
//                   handlePaymentError(syntheticEvent.nativeEvent.description)
//                 }
//                 onHttpError={() => handlePaymentError("Connection error")}
//                 style={styles.webView}
//                 incognito={true}
//                 cacheEnabled={false}
//                 domStorageEnabled={true}
//                 javaScriptEnabled={true}
//                 startInLoadingState={true}
//               />
//             )}
//           </SafeAreaView>
//         </Modal>

//         {/* Success Modal */}
//         <PaymentSuccessModal
//           visible={showSuccessModal}
//           onClose={() => {
//             setShowSuccessModal(false);
//             router.push("/(root)/Cart");
//           }}
//         />

//         {/* Failure Modal */}
//         <Modal
//           visible={showFailureModal}
//           transparent={true}
//           animationType="fade"
//           onRequestClose={() => setShowFailureModal(false)}
//         >
//           <View style={styles.modalBackground}>
//             <View style={[styles.modalContent, styles.failureModal]}>
//               <XCircle size={48} color="#E53935" />
//               <Text style={styles.modalTitle}>Payment Failed</Text>
//               <Text style={styles.modalText}>
//                 {paymentError ||
//                   "Please try again or use a different payment method."}
//               </Text>
//               <TouchableOpacity
//                 style={styles.modalButton}
//                 onPress={() => setShowFailureModal(false)}
//               >
//                 <Text style={styles.modalButtonText}>Try Again</Text>
//               </TouchableOpacity>
//             </View>
//           </View>
//         </Modal>
//       </KeyboardAvoidingView>
//       <Toast />
//     </SafeAreaView>
//   );
// }

// // Styles
// const styles = StyleSheet.create({
//   safeArea: { flex: 1, backgroundColor: "#f9fafb" },
//   container: { flex: 1 },
//   contentContainer: { padding: 16, paddingBottom: 100 },
//   header: {
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     paddingVertical: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f0f0f0",
//     backgroundColor: "#f9fafb",
//   },
//   backButton: { padding: 4 },
//   headerTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#1f2937",
//     marginLeft: 16,
//   },
//   formContainer: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   section: { marginBottom: 24 },
//   sectionTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#e5e7eb",
//     paddingBottom: 4,
//   },
//   formTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 12,
//   },
//   formField: { marginBottom: 16 },
//   inputLabelContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 6,
//     marginBottom: 4,
//   },
//   inputLabel: { fontSize: 14, fontFamily: "Cairo-SemiBold", color: "#4b5563" },
//   input: {
//     borderWidth: 1,
//     borderColor: "#e5e7eb",
//     borderRadius: 8,
//     padding: 12,
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#1f2937",
//     backgroundColor: "#fafafa",
//   },
//   inputError: { borderColor: "#ef4444" },
//   errorText: {
//     color: "#ef4444",
//     fontSize: 12,
//     fontFamily: "Cairo",
//     marginTop: 4,
//   },
//   helperText: {
//     fontSize: 12,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//     marginTop: 4,
//   },
//   deliveryNote: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#10B981",
//     marginBottom: 16,
//     textAlign: "center",
//     backgroundColor: "#f0fdf4",
//     padding: 8,
//     borderRadius: 8,
//   },
//   card: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   cardTitleContainer: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 16,
//   },
//   cardTitle: { fontSize: 18, fontFamily: "Cairo-SemiBold", color: "#1f2937" },
//   itemCount: { fontSize: 14, fontFamily: "Cairo", color: "#6b7280" },
//   itemRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 12,
//     paddingBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f1f5f9",
//   },
//   itemDetails: { flex: 1, paddingRight: 8 },
//   itemName: {
//     fontSize: 15,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//     marginBottom: 4,
//   },
//   itemQuantity: { fontSize: 13, fontFamily: "Cairo", color: "#6b7280" },
//   itemPrice: { fontSize: 15, fontFamily: "Cairo-Bold", color: "#374151" },
//   summaryContainer: {
//     marginTop: 16,
//     paddingTop: 16,
//     borderTopWidth: 1,
//     borderTopColor: "#e5e7eb",
//   },
//   divider: { height: 1, backgroundColor: "#e5e7eb", marginVertical: 12 },
//   securityCard: {
//     backgroundColor: "#f0fdf4",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 24,
//     borderWidth: 1,
//     borderColor: "#86efac",
//   },
//   securityHeader: {
//     flexDirection: "row",
//     alignItems: "center",
//     marginBottom: 12,
//     gap: 8,
//   },
//   securityTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#047857",
//   },
//   securityText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4B5563",
//     lineHeight: 22,
//   },
//   payButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 12,
//     padding: 18,
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 12,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//   },
//   payButtonDisabled: { opacity: 0.6 },
//   payButtonContent: { flexDirection: "row", alignItems: "center", gap: 10 },
//   payButtonText: { color: "white", fontSize: 16, fontFamily: "Cairo-Bold" },
//   modalBackground: {
//     flex: 1,
//     backgroundColor: "rgba(0, 0, 0, 0.5)",
//     justifyContent: "center",
//     alignItems: "center",
//   },
//   modalContainer: { flex: 1, backgroundColor: "#fff" },
//   modalContent: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "80%",
//     maxWidth: 300,
//   },
//   successModalContent: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "90%",
//     maxWidth: 350,
//   },
//   lottieAnimation: { width: 200, height: 200 },
//   failureModal: { borderColor: "#E53935", borderWidth: 2 },
//   modalTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   modalText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   modalButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 8,
//     paddingVertical: 12,
//     paddingHorizontal: 24,
//     marginTop: 24,
//   },
//   modalButtonText: { color: "white", fontSize: 16, fontFamily: "Cairo-Bold" },
//   webView: { flex: 1 },
//   webViewHeader: {
//     height: 56,
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     borderBottomWidth: 1,
//     borderBottomColor: "#E5E7EB",
//     backgroundColor: "#f9fafb",
//   },
//   webViewCloseButton: { padding: 8 },
//   webViewTitleContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 8,
//     flex: 1,
//     justifyContent: "center",
//     marginRight: 40,
//   },
//   webViewTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   loadingOverlay: {
//     position: "absolute",
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//     backgroundColor: "rgba(255,255,255,0.95)",
//     justifyContent: "center",
//     alignItems: "center",
//     zIndex: 1000,
//   },
//   loadingCard: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//     width: "80%",
//     maxWidth: 300,
//   },
//   loadingTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   loadingSubtext: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   errorValue: { fontSize: 14, fontFamily: "Cairo", color: "#DC2626" },
//   shippingFeeRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginVertical: 4,
//   },
//   shippingFeeValueContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     justifyContent: "flex-end",
//   },
//   summaryLabel: { fontSize: 14, fontFamily: "Cairo", color: "#4b5563" },
//   summaryValue: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
// });

/******************************************* */

// import React, { useState, useCallback, useEffect, useRef } from "react";
// import {
//   View,
//   Text,
//   ScrollView,
//   Alert,
//   ActivityIndicator,
//   StyleSheet,
//   Platform,
//   TouchableOpacity,
//   SafeAreaView,
//   BackHandler,
//   Modal,
//   StatusBar,
//   TextInput,
//   KeyboardAvoidingView,
//   Animated,
// } from "react-native";
// import { router, useNavigation } from "expo-router";
// import { WebView } from "react-native-webview";
// import { useFocusEffect } from "@react-navigation/native";
// import {
//   Shield,
//   CreditCard,
//   ArrowLeft,
//   Lock,
//   ChevronLeft,
//   XCircle,
//   User,
//   Phone,
//   Mail,
//   MapPin,
// } from "lucide-react-native";
// import Toast from "react-native-toast-message";
// import NetInfo from "@react-native-community/netinfo";
// import * as SecureStore from "expo-secure-store";
// import useCartStore from "../../store/cartStore";
// import { OrderSummaryRow } from "../Components/OrderSummary";
// import useShippingFee from "../hooks/useShippingFee";
// import { useSafeAreaInsets } from "react-native-safe-area-context";
// import CryptoJS from "crypto-js";
// import LottieView from "lottie-react-native";

// const IS_TEST_ENV = process.env.EXPO_PUBLIC_IS_TEST_ENV === "true";

// const PAYMENT_API_URL = IS_TEST_ENV
//   ? "https://demo.bookeey.com/pgapi/api/payment/requestLink"
//   : "https://pg.bookeey.com/internalapi/api/payment/requestLink";

// const MerchUID = IS_TEST_ENV ? "mer2000012" : "mer2400018";
// const SECRET_KEY = IS_TEST_ENV ? "1234567" : "0623475";

// const SURL = IS_TEST_ENV
//   ? "https://f36b-37-36-175-221.ngrok-free.app/api/payments/success"
//   : "https://your-production-domain.com/api/payments/success";
// const FURL = IS_TEST_ENV
//   ? "https://f36b-37-36-175-221.ngrok-free.app/api/payments/failure"
//   : "https://your-production-domain.com/api/payments/failure";

// const FORM_DATA_KEY = "user_checkout_info";

// const PaymentSuccessModal = ({ visible, onClose }) => {
//   const animationRef = useRef(null);

//   useEffect(() => {
//     if (visible && animationRef.current) {
//       animationRef.current.play();
//     }
//   }, [visible]);

//   return (
//     <Modal
//       visible={visible}
//       transparent={true}
//       animationType="fade"
//       onRequestClose={onClose}
//     >
//       <View style={styles.modalBackground}>
//         <View style={styles.successModalContent}>
//           <LottieView
//             ref={animationRef}
//             source={require("../../assets/lotties/payment-success.json")}
//             style={styles.lottieAnimation}
//             loop={false}
//             onAnimationFinish={onClose}
//           />
//           <Text style={styles.modalTitle}>Payment Successful!</Text>
//           <Text style={styles.modalText}>
//             Thank you for your purchase. Redirecting to cart...
//           </Text>
//         </View>
//       </View>
//     </Modal>
//   );
// };

// const PaymentLoadingOverlay = () => (
//   <View style={styles.loadingOverlay}>
//     <View style={styles.loadingCard}>
//       <ActivityIndicator size="large" color="#10B981" />
//       <Text style={styles.loadingTitle}>Processing Payment</Text>
//       <Text style={styles.loadingSubtext}>Please don't close this window</Text>
//     </View>
//   </View>
// );

// const REQUIRED_FIELDS = [
//   "firstName",
//   "lastName",
//   "phone",
//   "email",
//   "state",
//   "city",
//   "address",
// ];
// const PHONE_REGEX = /^\d{8,}$/;
// const EMAIL_REGEX = /\S+@\S+\.\S+/;

// const saveFormData = async (data) => {
//   try {
//     await SecureStore.setItemAsync(FORM_DATA_KEY, JSON.stringify(data));
//   } catch (error) {
//     console.error("Error saving form data:", error);
//   }
// };

// const loadFormData = async () => {
//   try {
//     const savedData = await SecureStore.getItemAsync(FORM_DATA_KEY);
//     return savedData ? JSON.parse(savedData) : null;
//   } catch (error) {
//     console.error("Error loading form data:", error);
//     return null;
//   }
// };

// export default function CheckoutPage() {
//   const insets = useSafeAreaInsets();
//   const navigation = useNavigation();
//   const { items, total, discountedTotal, appliedCoupon, clearCart } =
//     useCartStore();
//   const {
//     shippingFee,
//     loading: isLoadingShippingFee,
//     error: shippingFeeError,
//   } = useShippingFee();

//   const [formData, setFormData] = useState({
//     firstName: "",
//     lastName: "",
//     phone: "",
//     email: "",
//     state: "",
//     city: "",
//     address: "",
//   });
//   const [formErrors, setFormErrors] = useState({});
//   const [isProcessing, setIsProcessing] = useState(false);
//   const [paymentError, setPaymentError] = useState(null);
//   const [showWebView, setShowWebView] = useState(false);
//   const [paymentUrl, setPaymentUrl] = useState(null);
//   const [isWebViewLoading, setIsWebViewLoading] = useState(true);
//   const [showSuccessModal, setShowSuccessModal] = useState(false);
//   const [showFailureModal, setShowFailureModal] = useState(false);

//   useEffect(() => {
//     const loadSavedData = async () => {
//       const savedData = await loadFormData();
//       if (savedData) {
//         setFormData(savedData);
//       }
//     };
//     loadSavedData();
//   }, []);

//   useEffect(() => {
//     if (items.length === 0) {
//       router.replace("/(root)/Cart");
//     }
//   }, [items.length]);

//   const validateForm = () => {
//     const errors = {};
//     let isValid = true;

//     REQUIRED_FIELDS.forEach((field) => {
//       if (!formData[field].trim()) {
//         errors[field] = `${
//           field.charAt(0).toUpperCase() + field.slice(1)
//         } is required`;
//         isValid = false;
//       }
//     });

//     if (formData.email && !EMAIL_REGEX.test(formData.email)) {
//       errors.email = "Invalid email address";
//       isValid = false;
//     }

//     const cleanPhone = formData.phone.replace(/[^\d]/g, "");
//     if (formData.phone && !PHONE_REGEX.test(cleanPhone)) {
//       errors.phone = "Phone number must be at least 8 digits";
//       isValid = false;
//     }

//     setFormErrors(errors);
//     if (!isValid) {
//       Toast.show({
//         type: "error",
//         text1: "Form Validation Error",
//         text2: "Please fill in all required fields correctly",
//         position: "top",
//       });
//     }
//     return isValid;
//   };

//   const handleBackPress = useCallback(() => {
//     if (showWebView) {
//       Alert.alert(
//         "Cancel Payment?",
//         "Are you sure you want to cancel? This payment will not be processed.",
//         [
//           { text: "Continue Payment", style: "cancel" },
//           {
//             text: "Cancel Payment",
//             style: "destructive",
//             onPress: () => {
//               setShowWebView(false);
//               setPaymentUrl(null);
//               setShowFailureModal(true);
//             },
//           },
//         ]
//       );
//       return true;
//     }
//     router.push("/(root)/Cart");
//     return true;
//   }, [showWebView]);

//   useEffect(() => {
//     const backHandler = BackHandler.addEventListener(
//       "hardwareBackPress",
//       handleBackPress
//     );
//     return () => backHandler.remove();
//   }, [handleBackPress]);

//   useFocusEffect(
//     useCallback(() => {
//       navigation.setOptions({
//         gestureEnabled: !showWebView,
//         headerShown: false,
//       });
//     }, [showWebView])
//   );

//   const handlePaymentSuccess = async () => {
//     await saveFormData(formData);
//     clearCart();
//     setShowWebView(false);
//     setPaymentUrl(null);
//     Toast.show({
//       type: "success",
//       text1: "Payment Successful",
//       text2: "Thank you for your purchase!",
//       position: "top",
//     });
//     setShowSuccessModal(true);
//     setTimeout(() => {
//       setShowSuccessModal(false);
//       router.push("/(root)/Cart");
//     }, 3000);
//   };

//   const handlePaymentFailure = () => {
//     setShowWebView(false);
//     setPaymentUrl(null);
//     setShowFailureModal(true);
//   };

//   const handlePaymentError = (errorMessage) => {
//     setPaymentError(errorMessage);
//     setShowFailureModal(true);
//   };

//   const subtotal = total;
//   const discount = appliedCoupon
//     ? appliedCoupon.type === "percentage"
//       ? (total * appliedCoupon.amount) / 100
//       : appliedCoupon.amount
//     : 0;
//   const finalTotal = (discountedTotal || total) + shippingFee;

//   const handlePayment = async () => {
//     if (isProcessing || !validateForm()) return;

//     try {
//       const netInfo = await NetInfo.fetch();
//       if (!netInfo.isConnected) {
//         throw new Error("No Internet Connection");
//       }

//       setIsProcessing(true);
//       setPaymentError(null);

//       const currentDate = new Date()
//         .toISOString()
//         .replace(/[^0-9]/g, "")
//         .slice(0, 14);
//       const randomSuffix = Math.random().toString(36).slice(2, 6);
//       const orderId = `TX${currentDate}${randomSuffix}`;
//       const fullName = `${formData.firstName} ${formData.lastName}`;
//       const cleanPhone = formData.phone.replace(/[^\d]/g, "");
//       const txnHDR = `${Date.now()}${Math.floor(Math.random() * 10000)}`;
//       const rndnum = Math.random().toString(36).slice(2);

//       const sequence = `${MerchUID}|${orderId}|${SURL}|${FURL}|${finalTotal.toFixed(
//         3
//       )}|GEN|${SECRET_KEY}|${rndnum}`;
//       const hashMac = CryptoJS.SHA512(sequence).toString(CryptoJS.enc.Hex);

//       const payload = {
//         DBRqst: "PY_ECom",
//         Do_Appinfo: {
//           APPTyp: "MOB",
//           OS: Platform.OS === "ios" ? "iOS" : "ANDROID",
//           DevcType: null,
//           APPID: "PG",
//           IPAddrs: "",
//           HsCode: null,
//           Country: "KW",
//           AppVer: "1.0",
//           UsrSessID: null,
//           MdlID: "Pay_Req",
//           APIVer: "2.1",
//         },
//         Do_PyrDtl: {
//           Pyr_MPhone: cleanPhone,
//           Pyr_Name: fullName,
//           Emailid: formData.email || null,
//           address: formData.address || null,
//           city: formData.city || null,
//           state: formData.state || null,
//           Pyr_Email: formData.email || null,
//           ISDNCD: "965",
//         },
//         Do_MerchDtl: {
//           BKY_PRDENUM: "ECom",
//           MerchUID: MerchUID,
//           SURL: SURL,
//           FURL: FURL,
//           verifyAndProcess: null,
//         },
//         Do_TxnHdr: {
//           BKY_Txn_UID: null,
//           Merch_Txn_UID: orderId,
//           Merch_TrackUID: null,
//           Txn_Date: null,
//           PayFor: "ECom",
//           PayMethod: "KNET",
//           Txn_AMT: finalTotal.toFixed(3),
//           Txn_HDR: txnHDR,
//           CDR: null,
//           CDR_KN: null,
//           CDR_BW: null,
//           CDR_CC: null,
//           CDR_AMX: null,
//           CDRCommission: null,
//           hashMac: hashMac,
//         },
//         Do_TxnDtl: [
//           {
//             SubMerchUID: MerchUID,
//             Txn_AMT: finalTotal.toFixed(3),
//             Comission: null,
//             Merch_Txn_UID: null,
//             PayMthd: null,
//             SURL: null,
//             FURL: null,
//             Amount: null,
//             TxnType: null,
//           },
//         ],
//         Do_WltDtl: null,
//         Do_MoreDtl: null,
//       };

//       const headers = {
//         "Content-Type": "application/json",
//         Accept: "application/json",
//       };

//       console.log("Sending payload to:", PAYMENT_API_URL);
//       console.log("Payload:", JSON.stringify(payload));

//       const response = await fetch(PAYMENT_API_URL, {
//         method: "POST",
//         headers,
//         body: JSON.stringify(payload),
//       });

//       if (!response.ok) {
//         const errorText = await response.text();
//         console.error("Payment service error:", response.status, errorText);
//         throw new Error(`Payment service unavailable: ${response.status}`);
//       }

//       const data = await response.json();
//       console.log("Bookeey API Response:", data);

//       const paymentUrl = data?.PayUrl;
//       if (!paymentUrl) {
//         console.error("Payment URL not found in response");
//         throw new Error("Payment URL not found in response");
//       }

//       if (!paymentUrl.startsWith("https://")) {
//         throw new Error("Invalid or insecure payment URL received");
//       }

//       setPaymentUrl(paymentUrl);
//       setShowWebView(true);
//     } catch (error) {
//       const errorMessage = error.message || "Payment initiation failed";
//       console.error("Payment Error:", error);
//       setPaymentError(errorMessage);
//       handlePaymentError(errorMessage);
//     } finally {
//       setIsProcessing(false);
//     }
//   };

//   if (items.length === 0) return null;

//   return (
//     <SafeAreaView style={[styles.safeArea, { paddingTop: insets.top }]}>
//       <KeyboardAvoidingView
//         behavior={Platform.OS === "ios" ? "padding" : "height"}
//         style={styles.container}
//       >
//         <StatusBar barStyle="dark-content" backgroundColor="#f9fafb" />
//         <View style={styles.header}>
//           <TouchableOpacity
//             onPress={handleBackPress}
//             style={styles.backButton}
//             hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//           >
//             <ChevronLeft color="#E53935" size={28} />
//           </TouchableOpacity>
//           <Text style={styles.headerTitle}>Secure Checkout</Text>
//         </View>

//         <ScrollView
//           style={styles.container}
//           contentContainerStyle={styles.contentContainer}
//           showsVerticalScrollIndicator={false}
//         >
//           <View style={styles.formContainer}>
//             <Text style={styles.formTitle}>Delivery Information</Text>
//             <Text style={styles.deliveryNote}>
//               Orders will be delivered within the next business day.
//             </Text>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>Personal Information</Text>
//               {[
//                 { field: "firstName", label: "First Name *", Icon: User },
//                 { field: "lastName", label: "Last Name *", Icon: User },
//                 { field: "email", label: "Email *", Icon: Mail },
//                 { field: "phone", label: "Phone Number *", Icon: Phone },
//               ].map(({ field, label, Icon }) => (
//                 <View key={field} style={styles.formField}>
//                   <View style={styles.inputLabelContainer}>
//                     <Icon size={16} color="#4b5563" />
//                     <Text style={styles.inputLabel}>{label}</Text>
//                   </View>
//                   <TextInput
//                     style={[
//                       styles.input,
//                       formErrors[field] && styles.inputError,
//                     ]}
//                     value={formData[field]}
//                     onChangeText={(text) =>
//                       setFormData((prev) => ({
//                         ...prev,
//                         [field]:
//                           field === "phone" ? text.replace(/[^\d]/g, "") : text,
//                       }))
//                     }
//                     placeholder={`Enter your ${field}`}
//                     keyboardType={
//                       field === "email"
//                         ? "email-address"
//                         : field === "phone"
//                         ? "phone-pad"
//                         : "default"
//                     }
//                     autoCapitalize={field === "email" ? "none" : "words"}
//                     maxLength={field === "phone" ? 15 : undefined}
//                   />
//                   {formErrors[field] && (
//                     <Text style={styles.errorText}>{formErrors[field]}</Text>
//                   )}
//                   {field === "phone" && !formErrors.phone && (
//                     <Text style={styles.helperText}>
//                       Enter your Kuwait mobile number (minimum 8 digits)
//                     </Text>
//                   )}
//                 </View>
//               ))}
//             </View>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>Delivery Address</Text>
//               {[
//                 { field: "state", label: "State *" },
//                 { field: "city", label: "City *" },
//                 {
//                   field: "address",
//                   label: "Delivery Address *",
//                   multiline: true,
//                 },
//               ].map(({ field, label, multiline }) => (
//                 <View key={field} style={styles.formField}>
//                   <View style={styles.inputLabelContainer}>
//                     <MapPin size={16} color="#4b5563" />
//                     <Text style={styles.inputLabel}>{label}</Text>
//                   </View>
//                   <TextInput
//                     style={[
//                       styles.input,
//                       formErrors[field] && styles.inputError,
//                     ]}
//                     value={formData[field]}
//                     onChangeText={(text) =>
//                       setFormData((prev) => ({ ...prev, [field]: text }))
//                     }
//                     placeholder={`Enter your ${field}`}
//                     multiline={multiline}
//                     numberOfLines={multiline ? 3 : 1}
//                   />
//                   {formErrors[field] && (
//                     <Text style={styles.errorText}>{formErrors[field]}</Text>
//                   )}
//                 </View>
//               ))}
//             </View>
//           </View>

//           <View style={styles.card}>
//             <View style={styles.cardTitleContainer}>
//               <Text style={styles.cardTitle}>Order Summary</Text>
//               <Text style={styles.itemCount}>{items.length} items</Text>
//             </View>
//             {items.map((item) => (
//               <View key={item.documentId} style={styles.itemRow}>
//                 <View style={styles.itemDetails}>
//                   <Text style={styles.itemName} numberOfLines={1}>
//                     {item.name}
//                   </Text>
//                   <Text style={styles.itemQuantity}>Qty: {item.quantity}</Text>
//                 </View>
//                 <Text style={styles.itemPrice}>
//                   {((item.salesPrice || item.price) * item.quantity).toFixed(3)}{" "}
//                   KWD
//                 </Text>
//               </View>
//             ))}

//             <View style={styles.summaryContainer}>
//               <OrderSummaryRow
//                 label="Subtotal"
//                 value={`${subtotal.toFixed(3)} KWD`}
//               />
//               {appliedCoupon && (
//                 <OrderSummaryRow
//                   label={`Discount (${appliedCoupon.code})`}
//                   value={`- ${discount.toFixed(3)} KWD`}
//                   isDiscount
//                 />
//               )}
//               <View style={styles.shippingFeeRow}>
//                 <Text style={styles.summaryLabel}>Shipping Fee</Text>
//                 <View style={styles.shippingFeeValueContainer}>
//                   {isLoadingShippingFee ? (
//                     <ActivityIndicator size="small" color="#10B981" />
//                   ) : shippingFeeError ? (
//                     <Text style={styles.errorValue}>Error loading fee</Text>
//                   ) : (
//                     <Text style={styles.summaryValue}>
//                       {`${shippingFee.toFixed(3)} KWD`}
//                     </Text>
//                   )}
//                 </View>
//               </View>
//               <View style={styles.divider} />
//               <OrderSummaryRow
//                 label="Total Amount"
//                 value={`${finalTotal.toFixed(3)} KWD`}
//                 isTotal
//                 isLoading={isLoadingShippingFee}
//               />
//             </View>
//           </View>

//           <View style={styles.securityCard}>
//             <View style={styles.securityHeader}>
//               <Lock size={20} color="#10B981" />
//               <Text style={styles.securityTitle}>Secure Payment</Text>
//             </View>
//             <Text style={styles.securityText}>
//               • SSL encrypted payment processing • Verified by Bookeey Payment
//               Gateway • Your payment details are protected
//             </Text>
//           </View>

//           <TouchableOpacity
//             style={[
//               styles.payButton,
//               (isProcessing || isLoadingShippingFee) &&
//                 styles.payButtonDisabled,
//             ]}
//             onPress={handlePayment}
//             disabled={isProcessing || isLoadingShippingFee}
//           >
//             {isProcessing ? (
//               <ActivityIndicator color="white" size="small" />
//             ) : (
//               <View style={styles.payButtonContent}>
//                 <CreditCard size={20} color="white" />
//                 <Text style={styles.payButtonText}>
//                   Pay {finalTotal.toFixed(3)} KWD
//                 </Text>
//               </View>
//             )}
//           </TouchableOpacity>
//           {paymentError && <Text style={styles.errorText}>{paymentError}</Text>}
//         </ScrollView>

//         <Modal
//           visible={showWebView}
//           animationType="slide"
//           onRequestClose={handleBackPress}
//         >
//           <SafeAreaView style={styles.modalContainer}>
//             <View style={styles.webViewHeader}>
//               <TouchableOpacity
//                 onPress={handleBackPress}
//                 style={styles.webViewCloseButton}
//                 hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//               >
//                 <ArrowLeft color="#E53935" size={24} />
//               </TouchableOpacity>
//               <View style={styles.webViewTitleContainer}>
//                 <Lock size={16} color="#10B981" />
//                 <Text style={styles.webViewTitle}>Secure Payment</Text>
//               </View>
//             </View>
//             {isWebViewLoading && <PaymentLoadingOverlay />}
//             {paymentUrl && (
//               <WebView
//                 source={{ uri: paymentUrl }}
//                 onNavigationStateChange={(navState) => {
//                   if (navState.url.includes("/success")) {
//                     handlePaymentSuccess();
//                   } else if (navState.url.includes("/failure")) {
//                     handlePaymentFailure();
//                   }
//                 }}
//                 onLoadStart={() => setIsWebViewLoading(true)}
//                 onLoadEnd={() => setIsWebViewLoading(false)}
//                 onError={(syntheticEvent) =>
//                   handlePaymentError(syntheticEvent.nativeEvent.description)
//                 }
//                 onHttpError={() => handlePaymentError("Connection error")}
//                 style={styles.webView}
//                 incognito={true}
//                 cacheEnabled={false}
//                 domStorageEnabled={true}
//                 javaScriptEnabled={true}
//                 startInLoadingState={true}
//               />
//             )}
//           </SafeAreaView>
//         </Modal>

//         <PaymentSuccessModal
//           visible={showSuccessModal}
//           onClose={() => {
//             setShowSuccessModal(false);
//             router.push("/(root)/Cart");
//           }}
//         />

//         <Modal
//           visible={showFailureModal}
//           transparent={true}
//           animationType="fade"
//           onRequestClose={() => setShowFailureModal(false)}
//         >
//           <View style={styles.modalBackground}>
//             <View style={[styles.modalContent, styles.failureModal]}>
//               <XCircle size={48} color="#E53935" />
//               <Text style={styles.modalTitle}>Payment Failed</Text>
//               <Text style={styles.modalText}>
//                 {paymentError ||
//                   "Please try again or use a different payment method."}
//               </Text>
//               <TouchableOpacity
//                 style={styles.modalButton}
//                 onPress={() => setShowFailureModal(false)}
//               >
//                 <Text style={styles.modalButtonText}>Try Again</Text>
//               </TouchableOpacity>
//             </View>
//           </View>
//         </Modal>
//       </KeyboardAvoidingView>
//       <Toast />
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: { flex: 1, backgroundColor: "#f9fafb" },
//   container: { flex: 1 },
//   contentContainer: { padding: 16, paddingBottom: 100 },
//   header: {
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     paddingVertical: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f0f0f0",
//     backgroundColor: "#f9fafb",
//   },
//   backButton: { padding: 4 },
//   headerTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#1f2937",
//     marginLeft: 16,
//   },
//   formContainer: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   section: { marginBottom: 24 },
//   sectionTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#e5e7eb",
//     paddingBottom: 4,
//   },
//   formTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 12,
//   },
//   formField: { marginBottom: 16 },
//   inputLabelContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 6,
//     marginBottom: 4,
//   },
//   inputLabel: { fontSize: 14, fontFamily: "Cairo-SemiBold", color: "#4b5563" },
//   input: {
//     borderWidth: 1,
//     borderColor: "#e5e7eb",
//     borderRadius: 8,
//     padding: 12,
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#1f2937",
//     backgroundColor: "#fafafa",
//   },
//   inputError: { borderColor: "#ef4444" },
//   errorText: {
//     color: "#ef4444",
//     fontSize: 12,
//     fontFamily: "Cairo",
//     marginTop: 4,
//   },
//   helperText: {
//     fontSize: 12,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//     marginTop: 4,
//   },
//   deliveryNote: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#10B981",
//     marginBottom: 16,
//     textAlign: "center",
//     backgroundColor: "#f0fdf4",
//     padding: 8,
//     borderRadius: 8,
//   },
//   card: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   cardTitleContainer: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 16,
//   },
//   cardTitle: { fontSize: 18, fontFamily: "Cairo-SemiBold", color: "#1f2937" },
//   itemCount: { fontSize: 14, fontFamily: "Cairo", color: "#6b7280" },
//   itemRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 12,
//     paddingBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f1f5f9",
//   },
//   itemDetails: { flex: 1, paddingRight: 8 },
//   itemName: {
//     fontSize: 15,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//     marginBottom: 4,
//   },
//   itemQuantity: { fontSize: 13, fontFamily: "Cairo", color: "#6b7280" },
//   itemPrice: { fontSize: 15, fontFamily: "Cairo-Bold", color: "#374151" },
//   summaryContainer: {
//     marginTop: 16,
//     paddingTop: 16,
//     borderTopWidth: 1,
//     borderTopColor: "#e5e7eb",
//   },
//   divider: { height: 1, backgroundColor: "#e5e7eb", marginVertical: 12 },
//   securityCard: {
//     backgroundColor: "#f0fdf4",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 24,
//     borderWidth: 1,
//     borderColor: "#86efac",
//   },
//   securityHeader: {
//     flexDirection: "row",
//     alignItems: "center",
//     marginBottom: 12,
//     gap: 8,
//   },
//   securityTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#047857",
//   },
//   securityText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4B5563",
//     lineHeight: 22,
//   },
//   payButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 12,
//     padding: 18,
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 12,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//   },
//   payButtonDisabled: { opacity: 0.6 },
//   payButtonContent: { flexDirection: "row", alignItems: "center", gap: 10 },
//   payButtonText: { color: "white", fontSize: 16, fontFamily: "Cairo-Bold" },
//   modalBackground: {
//     flex: 1,
//     backgroundColor: "rgba(0, 0, 0, 0.5)",
//     justifyContent: "center",
//     alignItems: "center",
//   },
//   modalContainer: { flex: 1, backgroundColor: "#fff" },
//   modalContent: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "80%",
//     maxWidth: 300,
//   },
//   successModalContent: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "90%",
//     maxWidth: 350,
//   },
//   lottieAnimation: { width: 200, height: 200 },
//   failureModal: { borderColor: "#E53935", borderWidth: 2 },
//   modalTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   modalText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   modalButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 8,
//     paddingVertical: 12,
//     paddingHorizontal: 24,
//     marginTop: 24,
//   },
//   modalButtonText: { color: "white", fontSize: 16, fontFamily: "Cairo-Bold" },
//   webView: { flex: 1 },
//   webViewHeader: {
//     height: 56,
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     borderBottomWidth: 1,
//     borderBottomColor: "#E5E7EB",
//     backgroundColor: "#f9fafb",
//   },
//   webViewCloseButton: { padding: 8 },
//   webViewTitleContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 8,
//     flex: 1,
//     justifyContent: "center",
//     marginRight: 40,
//   },
//   webViewTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   loadingOverlay: {
//     position: "absolute",
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//     backgroundColor: "rgba(255,255,255,0.95)",
//     justifyContent: "center",
//     alignItems: "center",
//     zIndex: 1000,
//   },
//   loadingCard: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//     width: "80%",
//     maxWidth: 300,
//   },
//   loadingTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   loadingSubtext: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   errorValue: { fontSize: 14, fontFamily: "Cairo", color: "#DC2626" },
//   shippingFeeRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginVertical: 4,
//   },
//   shippingFeeValueContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     justifyContent: "flex-end",
//   },
//   summaryLabel: { fontSize: 14, fontFamily: "Cairo", color: "#4b5563" },
//   summaryValue: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
// });

/************************************************* */

// import React, { useState, useCallback, useEffect, useRef } from "react";
// import {
//   View,
//   Text,
//   ScrollView,
//   Alert,
//   ActivityIndicator,
//   StyleSheet,
//   Platform,
//   TouchableOpacity,
//   SafeAreaView,
//   BackHandler,
//   Modal,
//   StatusBar,
//   TextInput,
//   KeyboardAvoidingView,
//   Animated,
// } from "react-native";
// import { router, useNavigation } from "expo-router";
// import { WebView } from "react-native-webview";
// import { useFocusEffect } from "@react-navigation/native";
// import {
//   Shield,
//   CreditCard,
//   ArrowLeft,
//   Lock,
//   ChevronLeft,
//   XCircle,
//   User,
//   Phone,
//   Mail,
//   MapPin,
// } from "lucide-react-native";
// import Toast from "react-native-toast-message";
// import NetInfo from "@react-native-community/netinfo";
// import * as SecureStore from "expo-secure-store";
// import useCartStore from "../../store/cartStore";
// import { OrderSummaryRow } from "../Components/OrderSummary";
// import useShippingFee from "../hooks/useShippingFee";
// import { useSafeAreaInsets } from "react-native-safe-area-context";
// import CryptoJS from "crypto-js";
// import LottieView from "lottie-react-native";

// // Environment Configuration
// const IS_TEST_ENV = process.env.EXPO_PUBLIC_IS_TEST_ENV === "true";

// const PAYMENT_API_URL = IS_TEST_ENV
//   ? "https://demo.bookeey.com/pgapi/api/payment/requestLink"
//   : "https://pg.bookeey.com/internalapi/api/payment/requestLink";

// const MerchUID = IS_TEST_ENV ? "mer2400018" : "mer2400018";
// const SECRET_KEY = IS_TEST_ENV ? "0623475" : "0623475";

// const SURL = IS_TEST_ENV
//   ? "https://f36b-37-36-175-221.ngrok-free.app/api/payments/success"
//   : "https://your-production-domain.com/api/payments/success";
// const FURL = IS_TEST_ENV
//   ? "https://f36b-37-36-175-221.ngrok-free.app/api/payments/failure"
//   : "https://your-production-domain.com/api/payments/failure";

// const FORM_DATA_KEY = "user_checkout_info";
// const REQUEST_TIMEOUT = 30000; // 30 seconds

// // Components
// const PaymentSuccessModal = ({ visible, onClose }) => {
//   const animationRef = useRef(null);

//   useEffect(() => {
//     if (visible && animationRef.current) {
//       animationRef.current.play();
//     }
//   }, [visible]);

//   return (
//     <Modal
//       visible={visible}
//       transparent={true}
//       animationType="fade"
//       onRequestClose={onClose}
//     >
//       <View style={styles.modalBackground}>
//         <View style={styles.successModalContent}>
//           <LottieView
//             ref={animationRef}
//             source={require("../../assets/lotties/payment-success.json")}
//             style={styles.lottieAnimation}
//             loop={false}
//             onAnimationFinish={onClose}
//           />
//           <Text style={styles.modalTitle}>Payment Successful!</Text>
//           <Text style={styles.modalText}>
//             Thank you for your purchase. Redirecting to cart...
//           </Text>
//         </View>
//       </View>
//     </Modal>
//   );
// };

// const PaymentLoadingOverlay = () => (
//   <View style={styles.loadingOverlay}>
//     <View style={styles.loadingCard}>
//       <ActivityIndicator size="large" color="#10B981" />
//       <Text style={styles.loadingTitle}>Processing Payment</Text>
//       <Text style={styles.loadingSubtext}>Please don't close this window</Text>
//     </View>
//   </View>
// );

// // Constants
// const REQUIRED_FIELDS = [
//   "firstName",
//   "lastName",
//   "phone",
//   "email",
//   "state",
//   "city",
//   "address",
// ];
// const PHONE_REGEX = /^\d{8,}$/;
// const EMAIL_REGEX = /\S+@\S+\.\S+/;

// const saveFormData = async (data) => {
//   try {
//     await SecureStore.setItemAsync(FORM_DATA_KEY, JSON.stringify(data));
//   } catch (error) {
//     console.error("Error saving form data:", error);
//   }
// };

// const loadFormData = async () => {
//   try {
//     const savedData = await SecureStore.getItemAsync(FORM_DATA_KEY);
//     return savedData ? JSON.parse(savedData) : null;
//   } catch (error) {
//     console.error("Error loading form data:", error);
//     return null;
//   }
// };

// export default function CheckoutPage() {
//   const insets = useSafeAreaInsets();
//   const navigation = useNavigation();
//   const { items, total, discountedTotal, appliedCoupon, clearCart } =
//     useCartStore();
//   const {
//     shippingFee,
//     loading: isLoadingShippingFee,
//     error: shippingFeeError,
//   } = useShippingFee();

//   const [formData, setFormData] = useState({
//     firstName: "",
//     lastName: "",
//     phone: "",
//     email: "",
//     state: "",
//     city: "",
//     address: "",
//   });
//   const [formErrors, setFormErrors] = useState({});
//   const [isProcessing, setIsProcessing] = useState(false);
//   const [paymentError, setPaymentError] = useState(null);
//   const [showWebView, setShowWebView] = useState(false);
//   const [paymentUrl, setPaymentUrl] = useState(null);
//   const [isWebViewLoading, setIsWebViewLoading] = useState(true);
//   const [showSuccessModal, setShowSuccessModal] = useState(false);
//   const [showFailureModal, setShowFailureModal] = useState(false);

//   useEffect(() => {
//     const loadSavedData = async () => {
//       const savedData = await loadFormData();
//       if (savedData) {
//         setFormData(savedData);
//       }
//     };
//     loadSavedData();
//   }, []);

//   useEffect(() => {
//     if (items.length === 0) {
//       router.replace("/(root)/Cart");
//     }
//   }, [items.length]);

//   const validateForm = () => {
//     const errors = {};
//     let isValid = true;

//     REQUIRED_FIELDS.forEach((field) => {
//       if (!formData[field].trim()) {
//         errors[field] = `${
//           field.charAt(0).toUpperCase() + field.slice(1)
//         } is required`;
//         isValid = false;
//       }
//     });

//     if (formData.email && !EMAIL_REGEX.test(formData.email)) {
//       errors.email = "Invalid email address";
//       isValid = false;
//     }

//     const cleanPhone = formData.phone.replace(/[^\d]/g, "");
//     if (formData.phone && !PHONE_REGEX.test(cleanPhone)) {
//       errors.phone = "Phone number must be at least 8 digits";
//       isValid = false;
//     }

//     setFormErrors(errors);
//     if (!isValid) {
//       Toast.show({
//         type: "error",
//         text1: "Form Validation Error",
//         text2: "Please fill in all required fields correctly",
//         position: "top",
//       });
//     }
//     return isValid;
//   };

//   const handleBackPress = useCallback(() => {
//     if (showWebView) {
//       Alert.alert(
//         "Cancel Payment?",
//         "Are you sure you want to cancel? This payment will not be processed.",
//         [
//           { text: "Continue Payment", style: "cancel" },
//           {
//             text: "Cancel Payment",
//             style: "destructive",
//             onPress: () => {
//               setShowWebView(false);
//               setPaymentUrl(null);
//               setShowFailureModal(true);
//             },
//           },
//         ]
//       );
//       return true;
//     }
//     router.push("/(root)/Cart");
//     return true;
//   }, [showWebView]);

//   useEffect(() => {
//     const backHandler = BackHandler.addEventListener(
//       "hardwareBackPress",
//       handleBackPress
//     );
//     return () => backHandler.remove();
//   }, [handleBackPress]);

//   useFocusEffect(
//     useCallback(() => {
//       navigation.setOptions({
//         gestureEnabled: !showWebView,
//         headerShown: false,
//       });
//     }, [showWebView])
//   );

//   const handlePaymentSuccess = async () => {
//     await saveFormData(formData);
//     clearCart();
//     setShowWebView(false);
//     setPaymentUrl(null);
//     Toast.show({
//       type: "success",
//       text1: "Payment Successful",
//       text2: "Thank you for your purchase!",
//       position: "top",
//     });
//     setShowSuccessModal(true);
//     setTimeout(() => {
//       setShowSuccessModal(false);
//       router.push("/(root)/Cart");
//     }, 3000);
//   };

//   const handlePaymentFailure = () => {
//     setShowWebView(false);
//     setPaymentUrl(null);
//     setShowFailureModal(true);
//   };

//   const handlePaymentError = (errorMessage) => {
//     setPaymentError(errorMessage);
//     setShowFailureModal(true);
//   };

//   const subtotal = total;
//   const discount = appliedCoupon
//     ? appliedCoupon.type === "percentage"
//       ? (total * appliedCoupon.amount) / 100
//       : appliedCoupon.amount
//     : 0;
//   const finalTotal = (discountedTotal || total) + shippingFee;

//   const handlePayment = async () => {
//     if (isProcessing || !validateForm()) return;

//     try {
//       const netInfo = await NetInfo.fetch();
//       if (!netInfo.isConnected) {
//         throw new Error("No internet connection detected");
//       }

//       setIsProcessing(true);
//       setPaymentError(null);

//       const currentDate = new Date()
//         .toISOString()
//         .replace(/[^0-9]/g, "")
//         .slice(0, 14);
//       const randomSuffix = Math.random().toString(36).slice(2, 6);
//       const orderId = `TX${currentDate}${randomSuffix}`;
//       const fullName = `${formData.firstName} ${formData.lastName}`;
//       const cleanPhone = formData.phone.replace(/[^\d]/g, "");
//       const txnHDR = `${Date.now()}${Math.floor(Math.random() * 10000)}`;

//       // HashMac calculation using Txn_HDR as rndnum
//       const sequence = `${MerchUID}|${orderId}|${SURL}|${FURL}|${finalTotal.toFixed(
//         3
//       )}|GEN|${SECRET_KEY}|${txnHDR}`;
//       const hashMac = CryptoJS.SHA512(sequence).toString(CryptoJS.enc.Hex);

//       console.log("HashMac Sequence:", sequence);
//       console.log("Generated HashMac:", hashMac);

//       const payload = {
//         DBRqst: "PY_ECom",
//         Do_Appinfo: {
//           APPTyp: "MOB",
//           OS: Platform.OS === "ios" ? "iOS" : "ANDROID",
//           DevcType: "",
//           APPID: "PG",
//           IPAddrs: "",
//           HsCode: "",
//           Country: "KW",
//           AppVer: "1.0",
//           UsrSessID: "",
//           MdlID: "Pay_Req",
//           APIVer: "2.1",
//         },
//         Do_PyrDtl: {
//           Pyr_MPhone: cleanPhone,
//           Pyr_Name: fullName,
//           ISDNCD: "965",
//           Emailid: formData.email || "",
//           address: formData.address || "",
//           city: formData.city || "",
//           state: formData.state || "",
//           Pyr_Email: formData.email || "",
//         },
//         Do_MerchDtl: {
//           BKY_PRDENUM: "ECom",
//           MerchUID: MerchUID,
//           SURL: SURL,
//           FURL: FURL,
//         },
//         Do_TxnHdr: {
//           BKY_Txn_UID: "",
//           Merch_Txn_UID: orderId,
//           Merch_TrackUID: "",
//           Txn_Date: "",
//           PayFor: "ECom",
//           PayMethod: "knet", // Lowercase as per documentation
//           Txn_AMT: finalTotal.toFixed(3),
//           Txn_HDR: txnHDR,
//           CDR: "",
//           CDR_KN: "",
//           CDR_BW: "",
//           CDR_CC: "",
//           CDR_AMX: "",
//           CDRCommission: "",
//           hashMac: hashMac,
//         },
//         Do_TxnDtl: [
//           {
//             SubMerchUID: MerchUID,
//             Txn_AMT: finalTotal.toFixed(3),
//             Comission: "",
//             Merch_Txn_UID: "",
//             PayMthd: "",
//             SURL: "",
//             FURL: "",
//             Amount: "",
//             TxnType: "",
//           },
//         ],
//         Do_MoreDtl: {
//           Cust_Data1: "",
//           Cust_Data2: "",
//           Cust_Data3: "",
//         },
//       };

//       const headers = {
//         "Content-Type": "application/json",
//         Accept: "application/json",
//       };

//       console.log("Sending payload to:", PAYMENT_API_URL);
//       console.log("Payload:", JSON.stringify(payload, null, 2));

//       const controller = new AbortController();
//       const timeoutId = setTimeout(() => controller.abort(), REQUEST_TIMEOUT);

//       const response = await fetch(PAYMENT_API_URL, {
//         method: "POST",
//         headers,
//         body: JSON.stringify(payload),
//         signal: controller.signal,
//       });

//       clearTimeout(timeoutId);

//       if (!response.ok) {
//         const errorText = await response.text();
//         console.error("Payment service error:", response.status, errorText);
//         throw new Error(
//           `Payment service error: ${response.status} - ${errorText}`
//         );
//       }

//       const data = await response.json();
//       console.log("Bookeey API Response:", JSON.stringify(data, null, 2));

//       if (data.ErrorMessage && data.ErrorMessage !== "Success") {
//         throw new Error(`API Error: ${data.ErrorMessage}`);
//       }

//       const paymentUrl = data?.PayUrl;
//       if (!paymentUrl) {
//         console.error("Payment URL not found in response");
//         throw new Error("Payment URL not found in response");
//       }

//       if (!paymentUrl.startsWith("https://")) {
//         throw new Error("Invalid or insecure payment URL received");
//       }

//       setPaymentUrl(paymentUrl);
//       setShowWebView(true);
//     } catch (error) {
//       let errorMessage = "Payment initiation failed";
//       if (error.name === "AbortError") {
//         errorMessage = "Request timed out. Please try again.";
//       } else if (error.message) {
//         errorMessage = error.message;
//       }
//       console.error("Payment Error:", error);
//       setPaymentError(errorMessage);
//       handlePaymentError(errorMessage);
//     } finally {
//       setIsProcessing(false);
//     }
//   };

//   if (items.length === 0) return null;

//   return (
//     <SafeAreaView style={[styles.safeArea, { paddingTop: insets.top }]}>
//       <KeyboardAvoidingView
//         behavior={Platform.OS === "ios" ? "padding" : "height"}
//         style={styles.container}
//       >
//         <StatusBar barStyle="dark-content" backgroundColor="#f9fafb" />
//         <View style={styles.header}>
//           <TouchableOpacity
//             onPress={handleBackPress}
//             style={styles.backButton}
//             hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//           >
//             <ChevronLeft color="#E53935" size={28} />
//           </TouchableOpacity>
//           <Text style={styles.headerTitle}>Secure Checkout</Text>
//         </View>

//         <ScrollView
//           style={styles.container}
//           contentContainerStyle={styles.contentContainer}
//           showsVerticalScrollIndicator={false}
//         >
//           <View style={styles.formContainer}>
//             <Text style={styles.formTitle}>Delivery Information</Text>
//             <Text style={styles.deliveryNote}>
//               Orders will be delivered within the next business day.
//             </Text>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>Personal Information</Text>
//               {[
//                 { field: "firstName", label: "First Name *", Icon: User },
//                 { field: "lastName", label: "Last Name *", Icon: User },
//                 { field: "email", label: "Email *", Icon: Mail },
//                 { field: "phone", label: "Phone Number *", Icon: Phone },
//               ].map(({ field, label, Icon }) => (
//                 <View key={field} style={styles.formField}>
//                   <View style={styles.inputLabelContainer}>
//                     <Icon size={16} color="#4b5563" />
//                     <Text style={styles.inputLabel}>{label}</Text>
//                   </View>
//                   <TextInput
//                     style={[
//                       styles.input,
//                       formErrors[field] && styles.inputError,
//                     ]}
//                     value={formData[field]}
//                     onChangeText={(text) =>
//                       setFormData((prev) => ({
//                         ...prev,
//                         [field]:
//                           field === "phone" ? text.replace(/[^\d]/g, "") : text,
//                       }))
//                     }
//                     placeholder={`Enter your ${field}`}
//                     keyboardType={
//                       field === "email"
//                         ? "email-address"
//                         : field === "phone"
//                         ? "phone-pad"
//                         : "default"
//                     }
//                     autoCapitalize={field === "email" ? "none" : "words"}
//                     maxLength={field === "phone" ? 15 : undefined}
//                   />
//                   {formErrors[field] && (
//                     <Text style={styles.errorText}>{formErrors[field]}</Text>
//                   )}
//                   {field === "phone" && !formErrors.phone && (
//                     <Text style={styles.helperText}>
//                       Enter your Kuwait mobile number (minimum 8 digits)
//                     </Text>
//                   )}
//                 </View>
//               ))}
//             </View>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>Delivery Address</Text>
//               {[
//                 { field: "state", label: "State *" },
//                 { field: "city", label: "City *" },
//                 {
//                   field: "address",
//                   label: "Delivery Address *",
//                   multiline: true,
//                 },
//               ].map(({ field, label, multiline }) => (
//                 <View key={field} style={styles.formField}>
//                   <View style={styles.inputLabelContainer}>
//                     <MapPin size={16} color="#4b5563" />
//                     <Text style={styles.inputLabel}>{label}</Text>
//                   </View>
//                   <TextInput
//                     style={[
//                       styles.input,
//                       formErrors[field] && styles.inputError,
//                     ]}
//                     value={formData[field]}
//                     onChangeText={(text) =>
//                       setFormData((prev) => ({ ...prev, [field]: text }))
//                     }
//                     placeholder={`Enter your ${field}`}
//                     multiline={multiline}
//                     numberOfLines={multiline ? 3 : 1}
//                   />
//                   {formErrors[field] && (
//                     <Text style={styles.errorText}>{formErrors[field]}</Text>
//                   )}
//                 </View>
//               ))}
//             </View>
//           </View>

//           <View style={styles.card}>
//             <View style={styles.cardTitleContainer}>
//               <Text style={styles.cardTitle}>Order Summary</Text>
//               <Text style={styles.itemCount}>{items.length} items</Text>
//             </View>
//             {items.map((item) => (
//               <View key={item.documentId} style={styles.itemRow}>
//                 <View style={styles.itemDetails}>
//                   <Text style={styles.itemName} numberOfLines={1}>
//                     {item.name}
//                   </Text>
//                   <Text style={styles.itemQuantity}>Qty: {item.quantity}</Text>
//                 </View>
//                 <Text style={styles.itemPrice}>
//                   {((item.salesPrice || item.price) * item.quantity).toFixed(3)}{" "}
//                   KWD
//                 </Text>
//               </View>
//             ))}

//             <View style={styles.summaryContainer}>
//               <OrderSummaryRow
//                 label="Subtotal"
//                 value={`${subtotal.toFixed(3)} KWD`}
//               />
//               {appliedCoupon && (
//                 <OrderSummaryRow
//                   label={`Discount (${appliedCoupon.code})`}
//                   value={`- ${discount.toFixed(3)} KWD`}
//                   isDiscount
//                 />
//               )}
//               <View style={styles.shippingFeeRow}>
//                 <Text style={styles.summaryLabel}>Shipping Fee</Text>
//                 <View style={styles.shippingFeeValueContainer}>
//                   {isLoadingShippingFee ? (
//                     <ActivityIndicator size="small" color="#10B981" />
//                   ) : shippingFeeError ? (
//                     <Text style={styles.errorValue}>Error loading fee</Text>
//                   ) : (
//                     <Text style={styles.summaryValue}>{`${shippingFee.toFixed(
//                       3
//                     )} KWD`}</Text>
//                   )}
//                 </View>
//               </View>
//               <View style={styles.divider} />
//               <OrderSummaryRow
//                 label="Total Amount"
//                 value={`${finalTotal.toFixed(3)} KWD`}
//                 isTotal
//                 isLoading={isLoadingShippingFee}
//               />
//             </View>
//           </View>

//           <View style={styles.securityCard}>
//             <View style={styles.securityHeader}>
//               <Lock size={20} color="#10B981" />
//               <Text style={styles.securityTitle}>Secure Payment</Text>
//             </View>
//             <Text style={styles.securityText}>
//               • SSL encrypted payment processing • Verified by Bookeey Payment
//               Gateway • Your payment details are protected
//             </Text>
//           </View>

//           <TouchableOpacity
//             style={[
//               styles.payButton,
//               (isProcessing || isLoadingShippingFee) &&
//                 styles.payButtonDisabled,
//             ]}
//             onPress={handlePayment}
//             disabled={isProcessing || isLoadingShippingFee}
//           >
//             {isProcessing ? (
//               <ActivityIndicator color="white" size="small" />
//             ) : (
//               <View style={styles.payButtonContent}>
//                 <CreditCard size={20} color="white" />
//                 <Text style={styles.payButtonText}>
//                   Pay {finalTotal.toFixed(3)} KWD
//                 </Text>
//               </View>
//             )}
//           </TouchableOpacity>
//           {paymentError && <Text style={styles.errorText}>{paymentError}</Text>}
//         </ScrollView>

//         <Modal
//           visible={showWebView}
//           animationType="slide"
//           onRequestClose={handleBackPress}
//         >
//           <SafeAreaView style={styles.modalContainer}>
//             <View style={styles.webViewHeader}>
//               <TouchableOpacity
//                 onPress={handleBackPress}
//                 style={styles.webViewCloseButton}
//                 hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//               >
//                 <ArrowLeft color="#E53935" size={24} />
//               </TouchableOpacity>
//               <View style={styles.webViewTitleContainer}>
//                 <Lock size={16} color="#10B981" />
//                 <Text style={styles.webViewTitle}>Secure Payment</Text>
//               </View>
//             </View>
//             {isWebViewLoading && <PaymentLoadingOverlay />}
//             {paymentUrl && (
//               <WebView
//                 source={{ uri: paymentUrl }}
//                 onNavigationStateChange={(navState) => {
//                   if (navState.url.startsWith(SURL)) {
//                     handlePaymentSuccess();
//                   } else if (navState.url.startsWith(FURL)) {
//                     handlePaymentFailure();
//                   }
//                 }}
//                 onLoadStart={() => setIsWebViewLoading(true)}
//                 onLoadEnd={() => setIsWebViewLoading(false)}
//                 onError={(syntheticEvent) =>
//                   handlePaymentError(syntheticEvent.nativeEvent.description)
//                 }
//                 onHttpError={() => handlePaymentError("Connection error")}
//                 style={styles.webView}
//                 incognito={true}
//                 cacheEnabled={false}
//                 domStorageEnabled={true}
//                 javaScriptEnabled={true}
//                 startInLoadingState={true}
//               />
//             )}
//           </SafeAreaView>
//         </Modal>

//         <PaymentSuccessModal
//           visible={showSuccessModal}
//           onClose={() => {
//             setShowSuccessModal(false);
//             router.push("/(root)/Cart");
//           }}
//         />

//         <Modal
//           visible={showFailureModal}
//           transparent={true}
//           animationType="fade"
//           onRequestClose={() => setShowFailureModal(false)}
//         >
//           <View style={styles.modalBackground}>
//             <View style={[styles.modalContent, styles.failureModal]}>
//               <XCircle size={48} color="#E53935" />
//               <Text style={styles.modalTitle}>Payment Failed</Text>
//               <Text style={styles.modalText}>
//                 {paymentError ||
//                   "Please try again or use a different payment method."}
//               </Text>
//               <TouchableOpacity
//                 style={styles.modalButton}
//                 onPress={() => setShowFailureModal(false)}
//               >
//                 <Text style={styles.modalButtonText}>Try Again</Text>
//               </TouchableOpacity>
//             </View>
//           </View>
//         </Modal>
//       </KeyboardAvoidingView>
//       <Toast />
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: { flex: 1, backgroundColor: "#f9fafb" },
//   container: { flex: 1 },
//   contentContainer: { padding: 16, paddingBottom: 100 },
//   header: {
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     paddingVertical: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f0f0f0",
//     backgroundColor: "#f9fafb",
//   },
//   backButton: { padding: 4 },
//   headerTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#1f2937",
//     marginLeft: 16,
//   },
//   formContainer: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   section: { marginBottom: 24 },
//   sectionTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#e5e7eb",
//     paddingBottom: 4,
//   },
//   formTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 12,
//   },
//   formField: { marginBottom: 16 },
//   inputLabelContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 6,
//     marginBottom: 4,
//   },
//   inputLabel: { fontSize: 14, fontFamily: "Cairo-SemiBold", color: "#4b5563" },
//   input: {
//     borderWidth: 1,
//     borderColor: "#e5e7eb",
//     borderRadius: 8,
//     padding: 12,
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#1f2937",
//     backgroundColor: "#fafafa",
//   },
//   inputError: { borderColor: "#ef4444" },
//   errorText: {
//     color: "#ef4444",
//     fontSize: 12,
//     fontFamily: "Cairo",
//     marginTop: 4,
//   },
//   helperText: {
//     fontSize: 12,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//     marginTop: 4,
//   },
//   deliveryNote: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#10B981",
//     marginBottom: 16,
//     textAlign: "center",
//     backgroundColor: "#f0fdf4",
//     padding: 8,
//     borderRadius: 8,
//   },
//   card: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   cardTitleContainer: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 16,
//   },
//   cardTitle: { fontSize: 18, fontFamily: "Cairo-SemiBold", color: "#1f2937" },
//   itemCount: { fontSize: 14, fontFamily: "Cairo", color: "#6b7280" },
//   itemRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 12,
//     paddingBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f1f5f9",
//   },
//   itemDetails: { flex: 1, paddingRight: 8 },
//   itemName: {
//     fontSize: 15,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//     marginBottom: 4,
//   },
//   itemQuantity: { fontSize: 13, fontFamily: "Cairo", color: "#6b7280" },
//   itemPrice: { fontSize: 15, fontFamily: "Cairo-Bold", color: "#374151" },
//   summaryContainer: {
//     marginTop: 16,
//     paddingTop: 16,
//     borderTopWidth: 1,
//     borderTopColor: "#e5e7eb",
//   },
//   divider: { height: 1, backgroundColor: "#e5e7eb", marginVertical: 12 },
//   securityCard: {
//     backgroundColor: "#f0fdf4",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 24,
//     borderWidth: 1,
//     borderColor: "#86efac",
//   },
//   securityHeader: {
//     flexDirection: "row",
//     alignItems: "center",
//     marginBottom: 12,
//     gap: 8,
//   },
//   securityTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#047857",
//   },
//   securityText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4B5563",
//     lineHeight: 22,
//   },
//   payButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 12,
//     padding: 18,
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 12,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//   },
//   payButtonDisabled: { opacity: 0.6 },
//   payButtonContent: { flexDirection: "row", alignItems: "center", gap: 10 },
//   payButtonText: { color: "white", fontSize: 16, fontFamily: "Cairo-Bold" },
//   modalBackground: {
//     flex: 1,
//     backgroundColor: "rgba(0, 0, 0, 0.5)",
//     justifyContent: "center",
//     alignItems: "center",
//   },
//   modalContainer: { flex: 1, backgroundColor: "#fff" },
//   modalContent: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "80%",
//     maxWidth: 300,
//   },
//   successModalContent: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "90%",
//     maxWidth: 350,
//   },
//   lottieAnimation: { width: 200, height: 200 },
//   failureModal: { borderColor: "#E53935", borderWidth: 2 },
//   modalTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   modalText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   modalButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 8,
//     paddingVertical: 12,
//     paddingHorizontal: 24,
//     marginTop: 24,
//   },
//   modalButtonText: { color: "white", fontSize: 16, fontFamily: "Cairo-Bold" },
//   webView: { flex: 1 },
//   webViewHeader: {
//     height: 56,
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     borderBottomWidth: 1,
//     borderBottomColor: "#E5E7EB",
//     backgroundColor: "#f9fafb",
//   },
//   webViewCloseButton: { padding: 8 },
//   webViewTitleContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 8,
//     flex: 1,
//     justifyContent: "center",
//     marginRight: 40,
//   },
//   webViewTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   loadingOverlay: {
//     position: "absolute",
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//     backgroundColor: "rgba(255,255,255,0.95)",
//     justifyContent: "center",
//     alignItems: "center",
//     zIndex: 1000,
//   },
//   loadingCard: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//     width: "80%",
//     maxWidth: 300,
//   },
//   loadingTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   loadingSubtext: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   errorValue: { fontSize: 14, fontFamily: "Cairo", color: "#DC2626" },
//   shippingFeeRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginVertical: 4,
//   },
//   shippingFeeValueContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     justifyContent: "flex-end",
//   },
//   summaryLabel: { fontSize: 14, fontFamily: "Cairo", color: "#4b5563" },
//   summaryValue: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
// });

/********************************************** */

// Used To work

// import React, { useState, useCallback, useEffect, useRef } from "react";
// import {
//   View,
//   Text,
//   ScrollView,
//   Alert,
//   ActivityIndicator,
//   StyleSheet,
//   Platform,
//   TouchableOpacity,
//   SafeAreaView,
//   BackHandler,
//   Modal,
//   StatusBar,
//   TextInput,
//   KeyboardAvoidingView,
//   Animated,
// } from "react-native";
// import { router, useNavigation } from "expo-router";
// import { WebView } from "react-native-webview";
// import { useFocusEffect } from "@react-navigation/native";
// import {
//   Shield,
//   CreditCard,
//   ArrowLeft,
//   Lock,
//   ChevronLeft,
//   XCircle,
//   User,
//   Phone,
//   Mail,
//   MapPin,
// } from "lucide-react-native";
// import Toast from "react-native-toast-message";
// import NetInfo from "@react-native-community/netinfo";
// import * as SecureStore from "expo-secure-store";
// import useCartStore from "../../store/cartStore";
// import { OrderSummaryRow } from "../Components/OrderSummary";
// import useShippingFee from "../hooks/useShippingFee";
// import { useSafeAreaInsets } from "react-native-safe-area-context";
// import CryptoJS from "crypto-js";
// import LottieView from "lottie-react-native";

// const IS_TEST_ENV = true;

// const PAYMENT_API_URL = IS_TEST_ENV
//   ? "https://demo.bookeey.com/pgapi/api/payment/requestLink"
//   : "https://pg.bookeey.com/internalapi/api/payment/requestLink";

// const MerchUID = "mer2400018";
// const SECRET_KEY = "0623475";

// const SURL = IS_TEST_ENV
//   ? "https://664b-37-39-176-72.ngrok-free.app/api/payments/success"
//   : "https://your-production-domain.com/api/payments/success";
// const FURL = IS_TEST_ENV
//   ? "https://664b-37-39-176-72.ngrok-free.app/api/payments/failure"
//   : "https://your-production-domain.com/api/payments/failure";

// const FORM_DATA_KEY = "user_checkout_info";
// const REQUEST_TIMEOUT = 30000;

// const PaymentSuccessModal = ({ visible, onClose }) => {
//   const animationRef = useRef(null);

//   useEffect(() => {
//     if (visible && animationRef.current) {
//       animationRef.current.play();
//     }
//   }, [visible]);

//   return (
//     <Modal
//       visible={visible}
//       transparent={true}
//       animationType="fade"
//       onRequestClose={onClose}
//     >
//       <View style={styles.modalBackground}>
//         <View style={styles.successModalContent}>
//           <LottieView
//             ref={animationRef}
//             source={require("../../assets/lotties/payment-success.json")}
//             style={styles.lottieAnimation}
//             loop={false}
//             onAnimationFinish={onClose}
//           />
//           <Text style={styles.modalTitle}>Payment Successful!</Text>
//           <Text style={styles.modalText}>
//             Thank you for your purchase. Redirecting to cart...
//           </Text>
//         </View>
//       </View>
//     </Modal>
//   );
// };

// const PaymentLoadingOverlay = () => (
//   <View style={styles.loadingOverlay}>
//     <View style={styles.loadingCard}>
//       <ActivityIndicator size="large" color="#10B981" />
//       <Text style={styles.loadingTitle}>Processing Payment</Text>
//       <Text style={styles.loadingSubtext}>Please don't close this window</Text>
//     </View>
//   </View>
// );

// const REQUIRED_FIELDS = [
//   "firstName",
//   "lastName",
//   "phone",
//   "email",
//   "state",
//   "city",
//   "address",
// ];
// const PHONE_REGEX = /^\d{8,}$/;
// const EMAIL_REGEX = /\S+@\S+\.\S+/;

// const saveFormData = async (data) => {
//   try {
//     await SecureStore.setItemAsync(FORM_DATA_KEY, JSON.stringify(data));
//   } catch (error) {
//     console.error("Error saving form data:", error);
//   }
// };

// const loadFormData = async () => {
//   try {
//     const savedData = await SecureStore.getItemAsync(FORM_DATA_KEY);
//     return savedData ? JSON.parse(savedData) : null;
//   } catch (error) {
//     console.error("Error loading form data:", error);
//     return null;
//   }
// };

// export default function CheckoutPage() {
//   const insets = useSafeAreaInsets();
//   const navigation = useNavigation();
//   const { items, total, discountedTotal, appliedCoupon, clearCart } =
//     useCartStore();
//   const {
//     shippingFee,
//     loading: isLoadingShippingFee,
//     error: shippingFeeError,
//   } = useShippingFee();

//   const [formData, setFormData] = useState({
//     firstName: "",
//     lastName: "",
//     phone: "",
//     email: "",
//     state: "",
//     city: "",
//     address: "",
//   });
//   const [formErrors, setFormErrors] = useState({});
//   const [isProcessing, setIsProcessing] = useState(false);
//   const [paymentError, setPaymentError] = useState(null);
//   const [showWebView, setShowWebView] = useState(false);
//   const [paymentUrl, setPaymentUrl] = useState(null);
//   const [isWebViewLoading, setIsWebViewLoading] = useState(true);
//   const [showSuccessModal, setShowSuccessModal] = useState(false);
//   const [showFailureModal, setShowFailureModal] = useState(false);

//   useEffect(() => {
//     const loadSavedData = async () => {
//       const savedData = await loadFormData();
//       if (savedData) setFormData(savedData);
//     };
//     loadSavedData();
//   }, []);

//   useEffect(() => {
//     if (items.length === 0) router.replace("/(root)/Cart");
//   }, [items.length]);

//   const validateForm = () => {
//     const errors = {};
//     let isValid = true;

//     REQUIRED_FIELDS.forEach((field) => {
//       if (!formData[field].trim()) {
//         errors[field] = `${
//           field.charAt(0).toUpperCase() + field.slice(1)
//         } is required`;
//         isValid = false;
//       }
//     });

//     if (formData.email && !EMAIL_REGEX.test(formData.email)) {
//       errors.email = "Invalid email address";
//       isValid = false;
//     }

//     const cleanPhone = formData.phone.replace(/[^\d]/g, "");
//     if (formData.phone && !PHONE_REGEX.test(cleanPhone)) {
//       errors.phone = "Phone number must be at least 8 digits";
//       isValid = false;
//     }

//     setFormErrors(errors);
//     if (!isValid) {
//       Toast.show({
//         type: "error",
//         text1: "Form Validation Error",
//         text2: "Please fill in all required fields correctly",
//         position: "top",
//       });
//     }
//     return isValid;
//   };

//   const handleBackPress = useCallback(() => {
//     if (showWebView) {
//       Alert.alert(
//         "Cancel Payment?",
//         "Are you sure you want to cancel? This payment will not be processed.",
//         [
//           { text: "Continue Payment", style: "cancel" },
//           {
//             text: "Cancel Payment",
//             style: "destructive",
//             onPress: () => {
//               setShowWebView(false);
//               setPaymentUrl(null);
//               setShowFailureModal(true);
//             },
//           },
//         ]
//       );
//       return true;
//     }
//     router.push("/(root)/Cart");
//     return true;
//   }, [showWebView]);

//   useEffect(() => {
//     const backHandler = BackHandler.addEventListener(
//       "hardwareBackPress",
//       handleBackPress
//     );
//     return () => backHandler.remove();
//   }, [handleBackPress]);

//   useFocusEffect(
//     useCallback(() => {
//       navigation.setOptions({
//         gestureEnabled: !showWebView,
//         headerShown: false,
//       });
//     }, [showWebView])
//   );

//   const handlePaymentSuccess = async () => {
//     await saveFormData(formData);
//     clearCart();
//     setShowWebView(false);
//     setPaymentUrl(null);
//     Toast.show({
//       type: "success",
//       text1: "Payment Successful",
//       text2: "Thank you for your purchase!",
//       position: "top",
//     });
//     setShowSuccessModal(true);
//     setTimeout(() => {
//       setShowSuccessModal(false);
//       router.push("/(root)/Cart");
//     }, 3000);
//   };

//   const handlePaymentFailure = () => {
//     setShowWebView(false);
//     setPaymentUrl(null);
//     setShowFailureModal(true);
//   };

//   const handlePaymentError = (errorMessage) => {
//     setPaymentError(errorMessage);
//     setShowFailureModal(true);
//   };

//   const subtotal = total;
//   const discount = appliedCoupon
//     ? appliedCoupon.type === "percentage"
//       ? (total * appliedCoupon.amount) / 100
//       : appliedCoupon.amount
//     : 0;
//   const finalTotal = (discountedTotal || total) + shippingFee;

//   const handlePayment = async () => {
//     if (isProcessing || !validateForm()) return;

//     try {
//       const netInfo = await NetInfo.fetch();
//       if (!netInfo.isConnected)
//         throw new Error("No internet connection detected");

//       setIsProcessing(true);
//       setPaymentError(null);

//       const currentDate = new Date()
//         .toISOString()
//         .replace(/[^0-9]/g, "")
//         .slice(0, 14);
//       const randomSuffix = Math.random().toString(36).slice(2, 6);
//       const orderId = `TX${currentDate}${randomSuffix}`;
//       const fullName = `${formData.firstName} ${formData.lastName}`;
//       const cleanPhone = formData.phone.replace(/[^\d]/g, "");
//       const txnHDR = `${Date.now()}${Math.floor(Math.random() * 10000)}`;

//       const sequence = `${MerchUID}|${orderId}|${SURL}|${FURL}|${finalTotal.toFixed(
//         2
//       )}|GEN|${SECRET_KEY}|${txnHDR}`;
//       const hashMac = CryptoJS.SHA512(sequence).toString(CryptoJS.enc.Hex);

//       console.log("Sequence components:", {
//         MerchUID,
//         orderId,
//         SURL,
//         FURL,
//         Txn_AMT: finalTotal.toFixed(2),
//         crossCat: "GEN",
//         secret_key: SECRET_KEY,
//         rndnum: txnHDR,
//       });
//       console.log("Full sequence:", sequence);
//       console.log("Generated HashMac:", hashMac);

//       const payload = {
//         DBRqst: "PY_ECom",
//         Do_Appinfo: {
//           APPTyp: "MOB",
//           OS: Platform.OS === "ios" ? "iOS" : "ANDROID",
//           DevcType: "",
//           APPID: "PG",
//           IPAddrs: "",
//           HsCode: "",
//           Country: "KW",
//           AppVer: "1.0",
//           UsrSessID: "",
//           MdlID: "Pay_Req",
//           APIVer: "2.1",
//         },
//         Do_PyrDtl: {
//           Pyr_MPhone: cleanPhone,
//           Pyr_Name: fullName,
//           ISDNCD: "965",
//           Emailid: formData.email || "",
//           address: formData.address || "",
//           city: formData.city || "",
//           state: formData.state || "",
//           Pyr_Email: formData.email || "",
//         },
//         Do_MerchDtl: {
//           BKY_PRDENUM: "ECom",
//           MerchUID: MerchUID,
//           SURL: SURL,
//           FURL: FURL,
//         },
//         Do_TxnHdr: {
//           BKY_Txn_UID: "",
//           Merch_Txn_UID: orderId,
//           Merch_TrackUID: "",
//           Txn_Date: "",
//           PayFor: "ECom",
//           PayMethod: "KNET",
//           Txn_AMT: finalTotal.toFixed(2),
//           Txn_HDR: txnHDR,
//           CDR: "",
//           CDR_KN: "",
//           CDR_BW: "",
//           CDR_CC: "",
//           CDR_AMX: "",
//           CDRCommission: "",
//           hashMac: hashMac,
//         },
//         Do_TxnDtl: [
//           {
//             SubMerchUID: MerchUID,
//             Txn_AMT: finalTotal.toFixed(2),
//             Comission: "",
//             Merch_Txn_UID: "",
//             PayMthd: "",
//             SURL: "",
//             FURL: "",
//             Amount: "",
//             TxnType: "",
//           },
//         ],
//         Do_MoreDtl: {
//           Cust_Data1: "",
//           Cust_Data2: "",
//           Cust_Data3: "",
//         },
//       };

//       const headers = {
//         "Content-Type": "application/json",
//         Accept: "application/json",
//       };

//       console.log("Sending payload to:", PAYMENT_API_URL);
//       console.log("Payload:", JSON.stringify(payload, null, 2));

//       const controller = new AbortController();
//       const timeoutId = setTimeout(() => controller.abort(), REQUEST_TIMEOUT);

//       const response = await fetch(PAYMENT_API_URL, {
//         method: "POST",
//         headers,
//         body: JSON.stringify(payload),
//         signal: controller.signal,
//       });

//       clearTimeout(timeoutId);

//       if (!response.ok) {
//         const errorText = await response.text();
//         console.error("Payment service error:", response.status, errorText);
//         throw new Error(
//           `Payment service error: ${response.status} - ${errorText}`
//         );
//       }

//       const data = await response.json();
//       console.log("Bookeey API Response:", JSON.stringify(data, null, 2));

//       if (data.ErrorMessage && data.ErrorMessage !== "Success")
//         throw new Error(`API Error: ${data.ErrorMessage}`);

//       const paymentUrl = data?.PayUrl;
//       if (!paymentUrl) throw new Error("Payment URL not found in response");

//       if (!paymentUrl.startsWith("https://"))
//         throw new Error("Invalid or insecure payment URL received");

//       setPaymentUrl(paymentUrl);
//       setShowWebView(true);
//     } catch (error) {
//       let errorMessage = "Payment initiation failed";
//       if (error.name === "AbortError")
//         errorMessage = "Request timed out. Please try again.";
//       else if (error.message) errorMessage = error.message;
//       console.error("Payment Error:", error);
//       setPaymentError(errorMessage);
//       handlePaymentError(errorMessage);
//     } finally {
//       setIsProcessing(false);
//     }
//   };

//   if (items.length === 0) return null;

//   return (
//     <SafeAreaView style={[styles.safeArea, { paddingTop: insets.top }]}>
//       <KeyboardAvoidingView
//         behavior={Platform.OS === "ios" ? "padding" : "height"}
//         style={styles.container}
//       >
//         <StatusBar barStyle="dark-content" backgroundColor="#f9fafb" />
//         <View style={styles.header}>
//           <TouchableOpacity
//             onPress={handleBackPress}
//             style={styles.backButton}
//             hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//           >
//             <ChevronLeft color="#E53935" size={28} />
//           </TouchableOpacity>
//           <Text style={styles.headerTitle}>Secure Checkout</Text>
//         </View>

//         <ScrollView
//           style={styles.container}
//           contentContainerStyle={styles.contentContainer}
//           showsVerticalScrollIndicator={false}
//         >
//           <View style={styles.formContainer}>
//             <Text style={styles.formTitle}>Delivery Information</Text>
//             <Text style={styles.deliveryNote}>
//               Orders will be delivered within the next business day.
//             </Text>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>Personal Information</Text>
//               {[
//                 { field: "firstName", label: "First Name *", Icon: User },
//                 { field: "lastName", label: "Last Name *", Icon: User },
//                 { field: "email", label: "Email *", Icon: Mail },
//                 { field: "phone", label: "Phone Number *", Icon: Phone },
//               ].map(({ field, label, Icon }) => (
//                 <View key={field} style={styles.formField}>
//                   <View style={styles.inputLabelContainer}>
//                     <Icon size={16} color="#4b5563" />
//                     <Text style={styles.inputLabel}>{label}</Text>
//                   </View>
//                   <TextInput
//                     style={[
//                       styles.input,
//                       formErrors[field] && styles.inputError,
//                     ]}
//                     value={formData[field]}
//                     onChangeText={(text) =>
//                       setFormData((prev) => ({
//                         ...prev,
//                         [field]:
//                           field === "phone" ? text.replace(/[^\d]/g, "") : text,
//                       }))
//                     }
//                     placeholder={`Enter your ${field}`}
//                     keyboardType={
//                       field === "email"
//                         ? "email-address"
//                         : field === "phone"
//                         ? "phone-pad"
//                         : "default"
//                     }
//                     autoCapitalize={field === "email" ? "none" : "words"}
//                     maxLength={field === "phone" ? 15 : undefined}
//                   />
//                   {formErrors[field] && (
//                     <Text style={styles.errorText}>{formErrors[field]}</Text>
//                   )}
//                   {field === "phone" && !formErrors.phone && (
//                     <Text style={styles.helperText}>
//                       Enter your Kuwait mobile number (minimum 8 digits)
//                     </Text>
//                   )}
//                 </View>
//               ))}
//             </View>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>Delivery Address</Text>
//               {[
//                 { field: "state", label: "State *" },
//                 { field: "city", label: "City *" },
//                 {
//                   field: "address",
//                   label: "Delivery Address *",
//                   multiline: true,
//                 },
//               ].map(({ field, label, multiline }) => (
//                 <View key={field} style={styles.formField}>
//                   <View style={styles.inputLabelContainer}>
//                     <MapPin size={16} color="#4b5563" />
//                     <Text style={styles.inputLabel}>{label}</Text>
//                   </View>
//                   <TextInput
//                     style={[
//                       styles.input,
//                       formErrors[field] && styles.inputError,
//                     ]}
//                     value={formData[field]}
//                     onChangeText={(text) =>
//                       setFormData((prev) => ({ ...prev, [field]: text }))
//                     }
//                     placeholder={`Enter your ${field}`}
//                     multiline={multiline}
//                     numberOfLines={multiline ? 3 : 1}
//                   />
//                   {formErrors[field] && (
//                     <Text style={styles.errorText}>{formErrors[field]}</Text>
//                   )}
//                 </View>
//               ))}
//             </View>
//           </View>

//           <View style={styles.card}>
//             <View style={styles.cardTitleContainer}>
//               <Text style={styles.cardTitle}>Order Summary</Text>
//               <Text style={styles.itemCount}>{items.length} items</Text>
//             </View>
//             {items.map((item) => (
//               <View key={item.documentId} style={styles.itemRow}>
//                 <View style={styles.itemDetails}>
//                   <Text style={styles.itemName} numberOfLines={1}>
//                     {item.name}
//                   </Text>
//                   <Text style={styles.itemQuantity}>Qty: {item.quantity}</Text>
//                 </View>
//                 <Text style={styles.itemPrice}>
//                   {((item.salesPrice || item.price) * item.quantity).toFixed(2)}{" "}
//                   KWD
//                 </Text>
//               </View>
//             ))}

//             <View style={styles.summaryContainer}>
//               <OrderSummaryRow
//                 label="Subtotal"
//                 value={`${subtotal.toFixed(2)} KWD`}
//               />
//               {appliedCoupon && (
//                 <OrderSummaryRow
//                   label={`Discount (${appliedCoupon.code})`}
//                   value={`- ${discount.toFixed(2)} KWD`}
//                   isDiscount
//                 />
//               )}
//               <View style={styles.shippingFeeRow}>
//                 <Text style={styles.summaryLabel}>Shipping Fee</Text>
//                 <View style={styles.shippingFeeValueContainer}>
//                   {isLoadingShippingFee ? (
//                     <ActivityIndicator size="small" color="#10B981" />
//                   ) : shippingFeeError ? (
//                     <Text style={styles.errorValue}>Error loading fee</Text>
//                   ) : (
//                     <Text style={styles.summaryValue}>{`${shippingFee.toFixed(
//                       2
//                     )} KWD`}</Text>
//                   )}
//                 </View>
//               </View>
//               <View style={styles.divider} />
//               <OrderSummaryRow
//                 label="Total Amount"
//                 value={`${finalTotal.toFixed(2)} KWD`}
//                 isTotal
//                 isLoading={isLoadingShippingFee}
//               />
//             </View>
//           </View>

//           <View style={styles.securityCard}>
//             <View style={styles.securityHeader}>
//               <Lock size={20} color="#10B981" />
//               <Text style={styles.securityTitle}>Secure Payment</Text>
//             </View>
//             <Text style={styles.securityText}>
//               • SSL encrypted payment processing • Verified by Bookeey Payment
//               Gateway • Your payment details are protected
//             </Text>
//           </View>

//           <TouchableOpacity
//             style={[
//               styles.payButton,
//               (isProcessing || isLoadingShippingFee) &&
//                 styles.payButtonDisabled,
//             ]}
//             onPress={handlePayment}
//             disabled={isProcessing || isLoadingShippingFee}
//           >
//             {isProcessing ? (
//               <ActivityIndicator color="white" size="small" />
//             ) : (
//               <View style={styles.payButtonContent}>
//                 <CreditCard size={20} color="white" />
//                 <Text style={styles.payButtonText}>
//                   Pay {finalTotal.toFixed(2)} KWD
//                 </Text>
//               </View>
//             )}
//           </TouchableOpacity>
//           {paymentError && <Text style={styles.errorText}>{paymentError}</Text>}
//         </ScrollView>

//         <Modal
//           visible={showWebView}
//           animationType="slide"
//           onRequestClose={handleBackPress}
//         >
//           <SafeAreaView style={styles.modalContainer}>
//             <View style={styles.webViewHeader}>
//               <TouchableOpacity
//                 onPress={handleBackPress}
//                 style={styles.webViewCloseButton}
//                 hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//               >
//                 <ArrowLeft color="#E53935" size={24} />
//               </TouchableOpacity>
//               <View style={styles.webViewTitleContainer}>
//                 <Lock size={16} color="#10B981" />
//                 <Text style={styles.webViewTitle}>Secure Payment</Text>
//               </View>
//             </View>
//             {isWebViewLoading && <PaymentLoadingOverlay />}
//             {paymentUrl && (
//               <WebView
//                 source={{ uri: paymentUrl }}
//                 onNavigationStateChange={(navState) => {
//                   if (navState.url.startsWith(SURL)) handlePaymentSuccess();
//                   else if (navState.url.startsWith(FURL))
//                     handlePaymentFailure();
//                 }}
//                 onLoadStart={() => setIsWebViewLoading(true)}
//                 onLoadEnd={() => setIsWebViewLoading(false)}
//                 onError={(syntheticEvent) =>
//                   handlePaymentError(syntheticEvent.nativeEvent.description)
//                 }
//                 onHttpError={() => handlePaymentError("Connection error")}
//                 style={styles.webView}
//                 incognito={true}
//                 cacheEnabled={false}
//                 domStorageEnabled={true}
//                 javaScriptEnabled={true}
//                 startInLoadingState={true}
//               />
//             )}
//           </SafeAreaView>
//         </Modal>

//         <PaymentSuccessModal
//           visible={showSuccessModal}
//           onClose={() => {
//             setShowSuccessModal(false);
//             router.push("/(root)/Cart");
//           }}
//         />

//         <Modal
//           visible={showFailureModal}
//           transparent={true}
//           animationType="fade"
//           onRequestClose={() => setShowFailureModal(false)}
//         >
//           <View style={styles.modalBackground}>
//             <View style={[styles.modalContent, styles.failureModal]}>
//               <XCircle size={48} color="#E53935" />
//               <Text style={styles.modalTitle}>Payment Failed</Text>
//               <Text style={styles.modalText}>
//                 {paymentError ||
//                   "Please try again or use a different payment method."}
//               </Text>
//               <TouchableOpacity
//                 style={styles.modalButton}
//                 onPress={() => setShowFailureModal(false)}
//               >
//                 <Text style={styles.modalButtonText}>Try Again</Text>
//               </TouchableOpacity>
//             </View>
//           </View>
//         </Modal>
//       </KeyboardAvoidingView>
//       <Toast />
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: { flex: 1, backgroundColor: "#f9fafb" },
//   container: { flex: 1 },
//   contentContainer: { padding: 16, paddingBottom: 100 },
//   header: {
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     paddingVertical: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f0f0f0",
//     backgroundColor: "#f9fafb",
//   },
//   backButton: { padding: 4 },
//   headerTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#1f2937",
//     marginLeft: 16,
//   },
//   formContainer: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   section: { marginBottom: 24 },
//   sectionTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#e5e7eb",
//     paddingBottom: 4,
//   },
//   formTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 12,
//   },
//   formField: { marginBottom: 16 },
//   inputLabelContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 6,
//     marginBottom: 4,
//   },
//   inputLabel: { fontSize: 14, fontFamily: "Cairo-SemiBold", color: "#4b5563" },
//   input: {
//     borderWidth: 1,
//     borderColor: "#e5e7eb",
//     borderRadius: 8,
//     padding: 12,
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#1f2937",
//     backgroundColor: "#fafafa",
//   },
//   inputError: { borderColor: "#ef4444" },
//   errorText: {
//     color: "#ef4444",
//     fontSize: 12,
//     fontFamily: "Cairo",
//     marginTop: 4,
//   },
//   helperText: {
//     fontSize: 12,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//     marginTop: 4,
//   },
//   deliveryNote: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#10B981",
//     marginBottom: 16,
//     textAlign: "center",
//     backgroundColor: "#f0fdf4",
//     padding: 8,
//     borderRadius: 8,
//   },
//   card: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   cardTitleContainer: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 16,
//   },
//   cardTitle: { fontSize: 18, fontFamily: "Cairo-SemiBold", color: "#1f2937" },
//   itemCount: { fontSize: 14, fontFamily: "Cairo", color: "#6b7280" },
//   itemRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 12,
//     paddingBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f1f5f9",
//   },
//   itemDetails: { flex: 1, paddingRight: 8 },
//   itemName: {
//     fontSize: 15,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//     marginBottom: 4,
//   },
//   itemQuantity: { fontSize: 13, fontFamily: "Cairo", color: "#6b7280" },
//   itemPrice: { fontSize: 15, fontFamily: "Cairo-Bold", color: "#374151" },
//   summaryContainer: {
//     marginTop: 16,
//     paddingTop: 16,
//     borderTopWidth: 1,
//     borderTopColor: "#e5e7eb",
//   },
//   divider: { height: 1, backgroundColor: "#e5e7eb", marginVertical: 12 },
//   securityCard: {
//     backgroundColor: "#f0fdf4",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 24,
//     borderWidth: 1,
//     borderColor: "#86efac",
//   },
//   securityHeader: {
//     flexDirection: "row",
//     alignItems: "center",
//     marginBottom: 12,
//     gap: 8,
//   },
//   securityTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#047857",
//   },
//   securityText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4B5563",
//     lineHeight: 22,
//   },
//   payButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 12,
//     padding: 18,
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 12,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//   },
//   payButtonDisabled: { opacity: 0.6 },
//   payButtonContent: { flexDirection: "row", alignItems: "center", gap: 10 },
//   payButtonText: { color: "white", fontSize: 16, fontFamily: "Cairo-Bold" },
//   modalBackground: {
//     flex: 1,
//     backgroundColor: "rgba(0, 0, 0, 0.5)",
//     justifyContent: "center",
//     alignItems: "center",
//   },
//   modalContainer: { flex: 1, backgroundColor: "#fff" },
//   modalContent: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "80%",
//     maxWidth: 300,
//   },
//   successModalContent: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "90%",
//     maxWidth: 350,
//   },
//   lottieAnimation: { width: 200, height: 200 },
//   failureModal: { borderColor: "#E53935", borderWidth: 2 },
//   modalTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   modalText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   modalButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 8,
//     paddingVertical: 12,
//     paddingHorizontal: 24,
//     marginTop: 24,
//   },
//   modalButtonText: { color: "white", fontSize: 16, fontFamily: "Cairo-Bold" },
//   webView: { flex: 1 },
//   webViewHeader: {
//     height: 56,
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     borderBottomWidth: 1,
//     borderBottomColor: "#E5E7EB",
//     backgroundColor: "#f9fafb",
//   },
//   webViewCloseButton: { padding: 8 },
//   webViewTitleContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 8,
//     flex: 1,
//     justifyContent: "center",
//     marginRight: 40,
//   },
//   webViewTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   loadingOverlay: {
//     position: "absolute",
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//     backgroundColor: "rgba(255,255,255,0.95)",
//     justifyContent: "center",
//     alignItems: "center",
//     zIndex: 1000,
//   },
//   loadingCard: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//     width: "80%",
//     maxWidth: 300,
//   },
//   loadingTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   loadingSubtext: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   errorValue: { fontSize: 14, fontFamily: "Cairo", color: "#DC2626" },
//   shippingFeeRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginVertical: 4,
//   },
//   shippingFeeValueContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     justifyContent: "flex-end",
//   },
//   summaryLabel: { fontSize: 14, fontFamily: "Cairo", color: "#4b5563" },
//   summaryValue: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
// });

/************************************** */

// import React, { useState, useCallback, useEffect, useRef } from "react";
// import {
//   View,
//   Text,
//   ScrollView,
//   Alert,
//   ActivityIndicator,
//   StyleSheet,
//   Platform,
//   TouchableOpacity,
//   SafeAreaView,
//   BackHandler,
//   Modal,
//   StatusBar,
//   TextInput,
//   KeyboardAvoidingView,
//   Animated,
// } from "react-native";
// import { router, useNavigation } from "expo-router";
// import { WebView } from "react-native-webview";
// import { useFocusEffect } from "@react-navigation/native";
// import {
//   Shield,
//   CreditCard,
//   ArrowLeft,
//   Lock,
//   ChevronLeft,
//   XCircle,
//   User,
//   Phone,
//   Mail,
//   MapPin,
// } from "lucide-react-native";
// import Toast from "react-native-toast-message";
// import NetInfo from "@react-native-community/netinfo";
// import * as SecureStore from "expo-secure-store";
// import useCartStore from "../../store/cartStore";
// import { OrderSummaryRow } from "../Components/OrderSummary";
// import useShippingFee from "../hooks/useShippingFee";
// import { useSafeAreaInsets } from "react-native-safe-area-context";
// import CryptoJS from "crypto-js";
// import LottieView from "lottie-react-native";

// const IS_TEST_ENV = true;

// const PAYMENT_API_URL = IS_TEST_ENV
//   ? "https://demo.bookeey.com/pgapi/api/payment/requestLink"
//   : "https://pg.bookeey.com/internalapi/api/payment/requestLink";

// const MerchUID = "mer2400018";
// const SECRET_KEY = "0623475";

// const SURL = IS_TEST_ENV
//   ? "https://664b-37-39-176-72.ngrok-free.app/api/payments/success"
//   : "https://your-production-domain.com/api/payments/success";
// const FURL = IS_TEST_ENV
//   ? "https://664b-37-39-176-72.ngrok-free.app/api/payments/failure"
//   : "https://your-production-domain.com/api/payments/failure";

// const FORM_DATA_KEY = "user_checkout_info";
// const REQUEST_TIMEOUT = 30000;

// const PaymentSuccessModal = ({ visible, onClose }) => {
//   const animationRef = useRef(null);

//   useEffect(() => {
//     if (visible && animationRef.current) {
//       animationRef.current.play();
//     }
//   }, [visible]);

//   return (
//     <Modal
//       visible={visible}
//       transparent={true}
//       animationType="fade"
//       onRequestClose={onClose}
//     >
//       <View style={styles.modalBackground}>
//         <View style={styles.successModalContent}>
//           <LottieView
//             ref={animationRef}
//             source={require("../../assets/lotties/payment-success.json")}
//             style={styles.lottieAnimation}
//             loop={false}
//             onAnimationFinish={onClose}
//           />
//           <Text style={styles.modalTitle}>Payment Successful!</Text>
//           <Text style={styles.modalText}>
//             Thank you for your purchase. Redirecting to cart...
//           </Text>
//         </View>
//       </View>
//     </Modal>
//   );
// };

// const PaymentLoadingOverlay = () => (
//   <View style={styles.loadingOverlay}>
//     <View style={styles.loadingCard}>
//       <ActivityIndicator size="large" color="#10B981" />
//       <Text style={styles.loadingTitle}>Processing Payment</Text>
//       <Text style={styles.loadingSubtext}>Please don't close this window</Text>
//     </View>
//   </View>
// );

// const REQUIRED_FIELDS = [
//   "firstName",
//   "lastName",
//   "phone",
//   "email",
//   "state",
//   "city",
//   "address",
// ];
// const PHONE_REGEX = /^\d{8,}$/;
// const EMAIL_REGEX = /\S+@\S+\.\S+/;

// const saveFormData = async (data) => {
//   try {
//     await SecureStore.setItemAsync(FORM_DATA_KEY, JSON.stringify(data));
//   } catch (error) {
//     console.error("Error saving form data:", error);
//   }
// };

// const loadFormData = async () => {
//   try {
//     const savedData = await SecureStore.getItemAsync(FORM_DATA_KEY);
//     return savedData ? JSON.parse(savedData) : null;
//   } catch (error) {
//     console.error("Error loading form data:", error);
//     return null;
//   }
// };

// export default function CheckoutPage() {
//   const insets = useSafeAreaInsets();
//   const navigation = useNavigation();
//   const { items, total, discountedTotal, appliedCoupon, clearCart } =
//     useCartStore();
//   const {
//     shippingFee,
//     loading: isLoadingShippingFee,
//     error: shippingFeeError,
//   } = useShippingFee();

//   const [formData, setFormData] = useState({
//     firstName: "",
//     lastName: "",
//     phone: "",
//     email: "",
//     state: "",
//     city: "",
//     address: "",
//   });
//   const [formErrors, setFormErrors] = useState({});
//   const [isProcessing, setIsProcessing] = useState(false);
//   const [paymentError, setPaymentError] = useState(null);
//   const [showWebView, setShowWebView] = useState(false);
//   const [paymentUrl, setPaymentUrl] = useState(null);
//   const [isWebViewLoading, setIsWebViewLoading] = useState(true);
//   const [showSuccessModal, setShowSuccessModal] = useState(false);
//   const [showFailureModal, setShowFailureModal] = useState(false);

//   useEffect(() => {
//     const loadSavedData = async () => {
//       const savedData = await loadFormData();
//       if (savedData) setFormData(savedData);
//     };
//     loadSavedData();
//   }, []);

//   useEffect(() => {
//     if (items.length === 0) router.replace("/(root)/Cart");
//   }, [items.length]);

//   const validateForm = () => {
//     const errors = {};
//     let isValid = true;

//     REQUIRED_FIELDS.forEach((field) => {
//       if (!formData[field].trim()) {
//         errors[field] = `${
//           field.charAt(0).toUpperCase() + field.slice(1)
//         } is required`;
//         isValid = false;
//       }
//     });

//     if (formData.email && !EMAIL_REGEX.test(formData.email)) {
//       errors.email = "Invalid email address";
//       isValid = false;
//     }

//     const cleanPhone = formData.phone.replace(/[^\d]/g, "");
//     if (formData.phone && !PHONE_REGEX.test(cleanPhone)) {
//       errors.phone = "Phone number must be at least 8 digits";
//       isValid = false;
//     }

//     setFormErrors(errors);
//     if (!isValid) {
//       Toast.show({
//         type: "error",
//         text1: "Form Validation Error",
//         text2: "Please fill in all required fields correctly",
//         position: "top",
//       });
//     }
//     return isValid;
//   };

//   const handleBackPress = useCallback(() => {
//     if (showWebView) {
//       Alert.alert(
//         "Cancel Payment?",
//         "Are you sure you want to cancel? This payment will not be processed.",
//         [
//           { text: "Continue Payment", style: "cancel" },
//           {
//             text: "Cancel Payment",
//             style: "destructive",
//             onPress: () => {
//               setShowWebView(false);
//               setPaymentUrl(null);
//               setShowFailureModal(true);
//             },
//           },
//         ]
//       );
//       return true;
//     }
//     router.push("/(root)/Cart");
//     return true;
//   }, [showWebView]);

//   useEffect(() => {
//     const backHandler = BackHandler.addEventListener(
//       "hardwareBackPress",
//       handleBackPress
//     );
//     return () => backHandler.remove();
//   }, [handleBackPress]);

//   useFocusEffect(
//     useCallback(() => {
//       navigation.setOptions({
//         gestureEnabled: !showWebView,
//         headerShown: false,
//       });
//     }, [showWebView])
//   );

//   const handlePaymentSuccess = async () => {
//     await saveFormData(formData);
//     clearCart();
//     setShowWebView(false);
//     setPaymentUrl(null);
//     Toast.show({
//       type: "success",
//       text1: "Payment Successful",
//       text2: "Thank you for your purchase!",
//       position: "top",
//     });
//     setShowSuccessModal(true);
//     setTimeout(() => {
//       setShowSuccessModal(false);
//       router.push("/(root)/Cart");
//     }, 3000);
//   };

//   const handlePaymentFailure = () => {
//     setShowWebView(false);
//     setPaymentUrl(null);
//     setShowFailureModal(true);
//   };

//   const handlePaymentError = (errorMessage) => {
//     setPaymentError(errorMessage);
//     setShowFailureModal(true);
//   };

//   const subtotal = total;
//   const discount = appliedCoupon
//     ? appliedCoupon.type === "percentage"
//       ? (total * appliedCoupon.amount) / 100
//       : appliedCoupon.amount
//     : 0;
//   const finalTotal = (discountedTotal || total) + shippingFee;

//   const handlePayment = async () => {
//     if (isProcessing || !validateForm()) return;

//     try {
//       const netInfo = await NetInfo.fetch();
//       if (!netInfo.isConnected)
//         throw new Error("No internet connection detected");

//       setIsProcessing(true);
//       setPaymentError(null);

//       const currentDate = new Date()
//         .toISOString()
//         .replace(/[^0-9]/g, "")
//         .slice(0, 14);
//       const randomSuffix = Math.random().toString(36).slice(2, 6);
//       const orderId = `TX${currentDate}${randomSuffix}`;
//       const fullName = `${formData.firstName} ${formData.lastName}`;
//       const cleanPhone = formData.phone.replace(/[^\d]/g, "");
//       const txnHDR = `${Date.now()}${Math.floor(Math.random() * 10000)}`;

//       const sequence = `${MerchUID}|${orderId}|${SURL}|${FURL}|${finalTotal.toFixed(
//         3
//       )}|GEN|${SECRET_KEY}|${txnHDR}`;
//       const hashMac = CryptoJS.SHA512(sequence).toString(CryptoJS.enc.Hex);

//       const payload = {
//         DBRqst: "PY_ECom",
//         Do_Appinfo: {
//           APPTyp: "MOB",
//           OS: Platform.OS === "ios" ? "iOS" : "Android",
//           DevcType: "",
//           APPID: "PG",
//           IPAddrs: "",
//           HsCode: "",
//           Country: "KW",
//           AppVer: "1.0",
//           UsrSessID: "",
//           MdlID: "Pay_Req",
//           APIVer: "2.1",
//         },
//         Do_PyrDtl: {
//           Pyr_MPhone: cleanPhone,
//           Pyr_Name: fullName,
//           ISDNCD: "965",
//         },
//         Do_MerchDtl: {
//           BKY_PRDENUM: "ECom",
//           MerchUID: MerchUID,
//           SURL: SURL,
//           FURL: FURL,
//         },
//         Do_TxnHdr: {
//           BKY_Txn_UID: "",
//           Merch_Txn_UID: orderId,
//           PayFor: "ECom",
//           PayMethod: "knet",
//           Txn_HDR: txnHDR,
//           hashMac: hashMac,
//         },
//         Do_TxnDtl: [
//           {
//             SubMerchUID: MerchUID,
//             Txn_AMT: finalTotal.toFixed(3),
//           },
//         ],
//       };

//       const headers = {
//         "Content-Type": "application/json",
//         Accept: "application/json",
//       };

//       const controller = new AbortController();
//       const timeoutId = setTimeout(() => controller.abort(), REQUEST_TIMEOUT);

//       const response = await fetch(PAYMENT_API_URL, {
//         method: "POST",
//         headers,
//         body: JSON.stringify(payload),
//         signal: controller.signal,
//       });

//       clearTimeout(timeoutId);

//       if (!response.ok) {
//         const errorText = await response.text();
//         throw new Error(
//           `Payment service error: ${response.status} - ${errorText}`
//         );
//       }

//       const data = await response.json();

//       if (data.ErrorMessage && data.ErrorMessage !== "Success")
//         throw new Error(`API Error: ${data.ErrorMessage}`);

//       const paymentUrl = data?.PayUrl;
//       if (!paymentUrl) throw new Error("Payment URL not found in response");

//       if (!paymentUrl.startsWith("https://"))
//         throw new Error("Invalid or insecure payment URL received");

//       setPaymentUrl(paymentUrl);
//       setShowWebView(true);
//     } catch (error) {
//       let errorMessage = "Payment initiation failed";
//       if (error.name === "AbortError")
//         errorMessage = "Request timed out. Please try again.";
//       else if (error.message) errorMessage = error.message;
//       setPaymentError(errorMessage);
//       handlePaymentError(errorMessage);
//     } finally {
//       setIsProcessing(false);
//     }
//   };

//   if (items.length === 0) return null;

//   return (
//     <SafeAreaView style={[styles.safeArea, { paddingTop: insets.top }]}>
//       <KeyboardAvoidingView
//         behavior={Platform.OS === "ios" ? "padding" : "height"}
//         style={styles.container}
//       >
//         <StatusBar barStyle="dark-content" backgroundColor="#f9fafb" />
//         <View style={styles.header}>
//           <TouchableOpacity
//             onPress={handleBackPress}
//             style={styles.backButton}
//             hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//           >
//             <ChevronLeft color="#E53935" size={28} />
//           </TouchableOpacity>
//           <Text style={styles.headerTitle}>Secure Checkout</Text>
//         </View>

//         <ScrollView
//           style={styles.container}
//           contentContainerStyle={styles.contentContainer}
//           showsVerticalScrollIndicator={false}
//         >
//           <View style={styles.formContainer}>
//             <Text style={styles.formTitle}>Delivery Information</Text>
//             <Text style={styles.deliveryNote}>
//               Orders will be delivered within the next business day.
//             </Text>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>Personal Information</Text>
//               {[
//                 { field: "firstName", label: "First Name *", Icon: User },
//                 { field: "lastName", label: "Last Name *", Icon: User },
//                 { field: "email", label: "Email *", Icon: Mail },
//                 { field: "phone", label: "Phone Number *", Icon: Phone },
//               ].map(({ field, label, Icon }) => (
//                 <View key={field} style={styles.formField}>
//                   <View style={styles.inputLabelContainer}>
//                     <Icon size={16} color="#4b5563" />
//                     <Text style={styles.inputLabel}>{label}</Text>
//                   </View>
//                   <TextInput
//                     style={[
//                       styles.input,
//                       formErrors[field] && styles.inputError,
//                     ]}
//                     value={formData[field]}
//                     onChangeText={(text) =>
//                       setFormData((prev) => ({
//                         ...prev,
//                         [field]:
//                           field === "phone" ? text.replace(/[^\d]/g, "") : text,
//                       }))
//                     }
//                     placeholder={`Enter your ${field}`}
//                     keyboardType={
//                       field === "email"
//                         ? "email-address"
//                         : field === "phone"
//                         ? "phone-pad"
//                         : "default"
//                     }
//                     autoCapitalize={field === "email" ? "none" : "words"}
//                     maxLength={field === "phone" ? 15 : undefined}
//                   />
//                   {formErrors[field] && (
//                     <Text style={styles.errorText}>{formErrors[field]}</Text>
//                   )}
//                   {field === "phone" && !formErrors.phone && (
//                     <Text style={styles.helperText}>
//                       Enter your Kuwait mobile number (minimum 8 digits)
//                     </Text>
//                   )}
//                 </View>
//               ))}
//             </View>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>Delivery Address</Text>
//               {[
//                 { field: "state", label: "State *" },
//                 { field: "city", label: "City *" },
//                 {
//                   field: "address",
//                   label: "Delivery Address *",
//                   multiline: true,
//                 },
//               ].map(({ field, label, multiline }) => (
//                 <View key={field} style={styles.formField}>
//                   <View style={styles.inputLabelContainer}>
//                     <MapPin size={16} color="#4b5563" />
//                     <Text style={styles.inputLabel}>{label}</Text>
//                   </View>
//                   <TextInput
//                     style={[
//                       styles.input,
//                       formErrors[field] && styles.inputError,
//                     ]}
//                     value={formData[field]}
//                     onChangeText={(text) =>
//                       setFormData((prev) => ({ ...prev, [field]: text }))
//                     }
//                     placeholder={`Enter your ${field}`}
//                     multiline={multiline}
//                     numberOfLines={multiline ? 3 : 1}
//                   />
//                   {formErrors[field] && (
//                     <Text style={styles.errorText}>{formErrors[field]}</Text>
//                   )}
//                 </View>
//               ))}
//             </View>
//           </View>

//           <View style={styles.card}>
//             <View style={styles.cardTitleContainer}>
//               <Text style={styles.cardTitle}>Order Summary</Text>
//               <Text style={styles.itemCount}>{items.length} items</Text>
//             </View>
//             {items.map((item) => (
//               <View key={item.documentId} style={styles.itemRow}>
//                 <View style={styles.itemDetails}>
//                   <Text style={styles.itemName} numberOfLines={1}>
//                     {item.name}
//                   </Text>
//                   <Text style={styles.itemQuantity}>Qty: {item.quantity}</Text>
//                 </View>
//                 <Text style={styles.itemPrice}>
//                   {((item.salesPrice || item.price) * item.quantity).toFixed(3)}{" "}
//                   KWD
//                 </Text>
//               </View>
//             ))}

//             <View style={styles.summaryContainer}>
//               <OrderSummaryRow
//                 label="Subtotal"
//                 value={`${subtotal.toFixed(3)} KWD`}
//               />
//               {appliedCoupon && (
//                 <OrderSummaryRow
//                   label={`Discount (${appliedCoupon.code})`}
//                   value={`- ${discount.toFixed(3)} KWD`}
//                   isDiscount
//                 />
//               )}
//               <View style={styles.shippingFeeRow}>
//                 <Text style={styles.summaryLabel}>Shipping Fee</Text>
//                 <View style={styles.shippingFeeValueContainer}>
//                   {isLoadingShippingFee ? (
//                     <ActivityIndicator size="small" color="#10B981" />
//                   ) : shippingFeeError ? (
//                     <Text style={styles.errorValue}>Error loading fee</Text>
//                   ) : (
//                     <Text style={styles.summaryValue}>{`${shippingFee.toFixed(
//                       3
//                     )} KWD`}</Text>
//                   )}
//                 </View>
//               </View>
//               <View style={styles.divider} />
//               <OrderSummaryRow
//                 label="Total Amount"
//                 value={`${finalTotal.toFixed(3)} KWD`}
//                 isTotal
//                 isLoading={isLoadingShippingFee}
//               />
//             </View>
//           </View>

//           <View style={styles.securityCard}>
//             <View style={styles.securityHeader}>
//               <Lock size={20} color="#10B981" />
//               <Text style={styles.securityTitle}>Secure Payment</Text>
//             </View>
//             <Text style={styles.securityText}>
//               • SSL encrypted payment processing • Verified by Bookeey Payment
//               Gateway • Your payment details are protected
//             </Text>
//           </View>

//           <TouchableOpacity
//             style={[
//               styles.payButton,
//               (isProcessing || isLoadingShippingFee) &&
//                 styles.payButtonDisabled,
//             ]}
//             onPress={handlePayment}
//             disabled={isProcessing || isLoadingShippingFee}
//           >
//             {isProcessing ? (
//               <ActivityIndicator color="white" size="small" />
//             ) : (
//               <View style={styles.payButtonContent}>
//                 <CreditCard size={20} color="white" />
//                 <Text style={styles.payButtonText}>
//                   Pay {finalTotal.toFixed(3)} KWD
//                 </Text>
//               </View>
//             )}
//           </TouchableOpacity>
//           {paymentError && <Text style={styles.errorText}>{paymentError}</Text>}
//         </ScrollView>

//         <Modal
//           visible={showWebView}
//           animationType="slide"
//           onRequestClose={handleBackPress}
//         >
//           <SafeAreaView style={styles.modalContainer}>
//             <View style={styles.webViewHeader}>
//               <TouchableOpacity
//                 onPress={handleBackPress}
//                 style={styles.webViewCloseButton}
//                 hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//               >
//                 <ArrowLeft color="#E53935" size={24} />
//               </TouchableOpacity>
//               <View style={styles.webViewTitleContainer}>
//                 <Lock size={16} color="#10B981" />
//                 <Text style={styles.webViewTitle}>Secure Payment</Text>
//               </View>
//             </View>
//             {isWebViewLoading && <PaymentLoadingOverlay />}
//             {paymentUrl && (
//               <WebView
//                 source={{ uri: paymentUrl }}
//                 onNavigationStateChange={(navState) => {
//                   if (navState.url.startsWith(SURL)) handlePaymentSuccess();
//                   else if (navState.url.startsWith(FURL))
//                     handlePaymentFailure();
//                 }}
//                 onLoadStart={() => setIsWebViewLoading(true)}
//                 onLoadEnd={() => setIsWebViewLoading(false)}
//                 onError={(syntheticEvent) =>
//                   handlePaymentError(syntheticEvent.nativeEvent.description)
//                 }
//                 onHttpError={() => handlePaymentError("Connection error")}
//                 style={styles.webView}
//                 incognito={true}
//                 cacheEnabled={false}
//                 domStorageEnabled={true}
//                 javaScriptEnabled={true}
//                 startInLoadingState={true}
//               />
//             )}
//           </SafeAreaView>
//         </Modal>

//         <PaymentSuccessModal
//           visible={showSuccessModal}
//           onClose={() => {
//             setShowSuccessModal(false);
//             router.push("/(root)/Cart");
//           }}
//         />

//         <Modal
//           visible={showFailureModal}
//           transparent={true}
//           animationType="fade"
//           onRequestClose={() => setShowFailureModal(false)}
//         >
//           <View style={styles.modalBackground}>
//             <View style={[styles.modalContent, styles.failureModal]}>
//               <XCircle size={48} color="#E53935" />
//               <Text style={styles.modalTitle}>Payment Failed</Text>
//               <Text style={styles.modalText}>
//                 {paymentError ||
//                   "Please try again or use a different payment method."}
//               </Text>
//               <TouchableOpacity
//                 style={styles.modalButton}
//                 onPress={() => setShowFailureModal(false)}
//               >
//                 <Text style={styles.modalButtonText}>Try Again</Text>
//               </TouchableOpacity>
//             </View>
//           </View>
//         </Modal>
//       </KeyboardAvoidingView>
//       <Toast />
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: { flex: 1, backgroundColor: "#f9fafb" },
//   container: { flex: 1 },
//   contentContainer: { padding: 16, paddingBottom: 100 },
//   header: {
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     paddingVertical: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f0f0f0",
//     backgroundColor: "#f9fafb",
//   },
//   backButton: { padding: 4 },
//   headerTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#1f2937",
//     marginLeft: 16,
//   },
//   formContainer: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   section: { marginBottom: 24 },
//   sectionTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#e5e7eb",
//     paddingBottom: 4,
//   },
//   formTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 12,
//   },
//   formField: { marginBottom: 16 },
//   inputLabelContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 6,
//     marginBottom: 4,
//   },
//   inputLabel: { fontSize: 14, fontFamily: "Cairo-SemiBold", color: "#4b5563" },
//   input: {
//     borderWidth: 1,
//     borderColor: "#e5e7eb",
//     borderRadius: 8,
//     padding: 12,
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#1f2937",
//     backgroundColor: "#fafafa",
//   },
//   inputError: { borderColor: "#ef4444" },
//   errorText: {
//     color: "#ef4444",
//     fontSize: 12,
//     fontFamily: "Cairo",
//     marginTop: 4,
//   },
//   helperText: {
//     fontSize: 12,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//     marginTop: 4,
//   },
//   deliveryNote: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#10B981",
//     marginBottom: 16,
//     textAlign: "center",
//     backgroundColor: "#f0fdf4",
//     padding: 8,
//     borderRadius: 8,
//   },
//   card: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   cardTitleContainer: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 16,
//   },
//   cardTitle: { fontSize: 18, fontFamily: "Cairo-SemiBold", color: "#1f2937" },
//   itemCount: { fontSize: 14, fontFamily: "Cairo", color: "#6b7280" },
//   itemRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 12,
//     paddingBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f1f5f9",
//   },
//   itemDetails: { flex: 1, paddingRight: 8 },
//   itemName: {
//     fontSize: 15,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//     marginBottom: 4,
//   },
//   itemQuantity: { fontSize: 13, fontFamily: "Cairo", color: "#6b7280" },
//   itemPrice: { fontSize: 15, fontFamily: "Cairo-Bold", color: "#374151" },
//   summaryContainer: {
//     marginTop: 16,
//     paddingTop: 16,
//     borderTopWidth: 1,
//     borderTopColor: "#e5e7eb",
//   },
//   divider: { height: 1, backgroundColor: "#e5e7eb", marginVertical: 12 },
//   securityCard: {
//     backgroundColor: "#f0fdf4",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 24,
//     borderWidth: 1,
//     borderColor: "#86efac",
//   },
//   securityHeader: {
//     flexDirection: "row",
//     alignItems: "center",
//     marginBottom: 12,
//     gap: 8,
//   },
//   securityTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#047857",
//   },
//   securityText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4B5563",
//     lineHeight: 22,
//   },
//   payButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 12,
//     padding: 18,
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 12,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//   },
//   payButtonDisabled: { opacity: 0.6 },
//   payButtonContent: { flexDirection: "row", alignItems: "center", gap: 10 },
//   payButtonText: { color: "white", fontSize: 16, fontFamily: "Cairo-Bold" },
//   modalBackground: {
//     flex: 1,
//     backgroundColor: "rgba(0, 0, 0, 0.5)",
//     justifyContent: "center",
//     alignItems: "center",
//   },
//   modalContainer: { flex: 1, backgroundColor: "#fff" },
//   modalContent: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "80%",
//     maxWidth: 300,
//   },
//   successModalContent: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "90%",
//     maxWidth: 350,
//   },
//   lottieAnimation: { width: 200, height: 200 },
//   failureModal: { borderColor: "#E53935", borderWidth: 2 },
//   modalTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   modalText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   modalButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 8,
//     paddingVertical: 12,
//     paddingHorizontal: 24,
//     marginTop: 24,
//   },
//   modalButtonText: { color: "white", fontSize: 16, fontFamily: "Cairo-Bold" },
//   webView: { flex: 1 },
//   webViewHeader: {
//     height: 56,
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     borderBottomWidth: 1,
//     borderBottomColor: "#E5E7EB",
//     backgroundColor: "#f9fafb",
//   },
//   webViewCloseButton: { padding: 8 },
//   webViewTitleContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 8,
//     flex: 1,
//     justifyContent: "center",
//     marginRight: 40,
//   },
//   webViewTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   loadingOverlay: {
//     position: "absolute",
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//     backgroundColor: "rgba(255,255,255,0.95)",
//     justifyContent: "center",
//     alignItems: "center",
//     zIndex: 1000,
//   },
//   loadingCard: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//     width: "80%",
//     maxWidth: 300,
//   },
//   loadingTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   loadingSubtext: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   errorValue: { fontSize: 14, fontFamily: "Cairo", color: "#DC2626" },
//   shippingFeeRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginVertical: 4,
//   },
//   shippingFeeValueContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     justifyContent: "flex-end",
//   },
//   summaryLabel: { fontSize: 14, fontFamily: "Cairo", color: "#4b5563" },
//   summaryValue: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
// });

/********************************************** */

//Latest Works perfectly

// import React, { useState, useCallback, useEffect, useRef } from "react";
// import {
//   View,
//   Text,
//   ScrollView,
//   Alert,
//   ActivityIndicator,
//   StyleSheet,
//   Platform,
//   TouchableOpacity,
//   SafeAreaView,
//   BackHandler,
//   Modal,
//   StatusBar,
//   TextInput,
//   KeyboardAvoidingView,
//   Animated,
// } from "react-native";
// import { router, useNavigation } from "expo-router";
// import { WebView } from "react-native-webview";
// import { useFocusEffect } from "@react-navigation/native";
// import {
//   Shield,
//   CreditCard,
//   ArrowLeft,
//   Lock,
//   ChevronLeft,
//   XCircle,
//   User,
//   Phone,
//   Mail,
//   MapPin,
// } from "lucide-react-native";
// import Toast from "react-native-toast-message";
// import NetInfo from "@react-native-community/netinfo";
// import * as SecureStore from "expo-secure-store";
// import useCartStore from "../../store/cartStore";
// import { OrderSummaryRow } from "../Components/OrderSummary";
// import useShippingFee from "../hooks/useShippingFee";
// import { useSafeAreaInsets } from "react-native-safe-area-context";
// import CryptoJS from "crypto-js";
// import LottieView from "lottie-react-native";

// const IS_TEST_ENV = true;
// const PAYMENT_API_URL = IS_TEST_ENV
//   ? "https://demo.bookeey.com/pgapi/api/payment/requestLink"
//   : "https://pg.bookeey.com/internalapi/api/payment/requestLink";
// const MerchUID = "mer2400018";
// const SECRET_KEY = "0623475";
// const SURL = IS_TEST_ENV
//   ? "https://664b-37-39-176-72.ngrok-free.app/api/payments/success"
//   : "https://your-production-domain.com/api/payments/success";
// const FURL = IS_TEST_ENV
//   ? "https://664b-37-39-176-72.ngrok-free.app/api/payments/failure"
//   : "https://your-production-domain.com/api/payments/failure";
// const FORM_DATA_KEY = "user_checkout_info";
// const REQUEST_TIMEOUT = 30000;

// const PaymentSuccessModal = ({ visible, onClose }) => {
//   const animationRef = useRef(null);

//   useEffect(() => {
//     if (visible && animationRef.current) {
//       animationRef.current.play();
//     }
//   }, [visible]);

//   return (
//     <Modal
//       visible={visible}
//       transparent={true}
//       animationType="fade"
//       onRequestClose={onClose}
//     >
//       <View style={styles.modalBackground}>
//         <View style={styles.successModalContent}>
//           <LottieView
//             ref={animationRef}
//             source={require("../../assets/lotties/payment-success.json")}
//             style={styles.lottieAnimation}
//             loop={false}
//             onAnimationFinish={onClose}
//           />
//           <Text style={styles.modalTitle}>Payment Successful!</Text>
//           <Text style={styles.modalText}>
//             Thank you for your purchase. Redirecting to cart...
//           </Text>
//         </View>
//       </View>
//     </Modal>
//   );
// };

// const PaymentLoadingOverlay = () => (
//   <View style={styles.loadingOverlay}>
//     <View style={styles.loadingCard}>
//       <ActivityIndicator size="large" color="#10B981" />
//       <Text style={styles.loadingTitle}>Processing Payment</Text>
//       <Text style={styles.loadingSubtext}>Please don't close this window</Text>
//     </View>
//   </View>
// );

// const REQUIRED_FIELDS = [
//   "firstName",
//   "lastName",
//   "phone",
//   "email",
//   "state",
//   "city",
//   "address",
// ];
// const PHONE_REGEX = /^\d{8,}$/;
// const EMAIL_REGEX = /\S+@\S+\.\S+/;

// const saveFormData = async (data) => {
//   try {
//     await SecureStore.setItemAsync(FORM_DATA_KEY, JSON.stringify(data));
//   } catch (error) {
//     console.error("Error saving form data:", error);
//   }
// };

// const loadFormData = async () => {
//   try {
//     const savedData = await SecureStore.getItemAsync(FORM_DATA_KEY);
//     return savedData ? JSON.parse(savedData) : null;
//   } catch (error) {
//     console.error("Error loading form data:", error);
//     return null;
//   }
// };

// export default function CheckoutPage() {
//   const insets = useSafeAreaInsets();
//   const navigation = useNavigation();
//   const { items, total, discountedTotal, appliedCoupon, clearCart } =
//     useCartStore();
//   const {
//     shippingFee,
//     loading: isLoadingShippingFee,
//     error: shippingFeeError,
//   } = useShippingFee();
//   const [formData, setFormData] = useState({
//     firstName: "",
//     lastName: "",
//     phone: "",
//     email: "",
//     state: "",
//     city: "",
//     address: "",
//   });
//   const [formErrors, setFormErrors] = useState({});
//   const [isProcessing, setIsProcessing] = useState(false);
//   const [paymentError, setPaymentError] = useState(null);
//   const [showWebView, setShowWebView] = useState(false);
//   const [paymentUrl, setPaymentUrl] = useState(null);
//   const [isWebViewLoading, setIsWebViewLoading] = useState(true);
//   const [showSuccessModal, setShowSuccessModal] = useState(false);
//   const [showFailureModal, setShowFailureModal] = useState(false);

//   useEffect(() => {
//     const loadSavedData = async () => {
//       const savedData = await loadFormData();
//       if (savedData) setFormData(savedData);
//     };
//     loadSavedData();
//   }, []);

//   useEffect(() => {
//     if (items.length === 0) router.replace("/(root)/Cart");
//   }, [items.length]);

//   const validateForm = () => {
//     const errors = {};
//     let isValid = true;

//     REQUIRED_FIELDS.forEach((field) => {
//       if (!formData[field].trim()) {
//         errors[field] = `${
//           field.charAt(0).toUpperCase() + field.slice(1)
//         } is required`;
//         isValid = false;
//       }
//     });

//     if (formData.email && !EMAIL_REGEX.test(formData.email)) {
//       errors.email = "Invalid email address";
//       isValid = false;
//     }

//     const cleanPhone = formData.phone.replace(/[^\d]/g, "");
//     if (formData.phone && !PHONE_REGEX.test(cleanPhone)) {
//       errors.phone = "Phone number must be at least 8 digits";
//       isValid = false;
//     }

//     setFormErrors(errors);
//     if (!isValid) {
//       Toast.show({
//         type: "error",
//         text1: "Form Validation Error",
//         text2: "Please fill in all required fields correctly",
//         position: "top",
//       });
//     }
//     return isValid;
//   };

//   const handleBackPress = useCallback(() => {
//     if (showWebView) {
//       Alert.alert(
//         "Cancel Payment?",
//         "Are you sure you want to cancel? This payment will not be processed.",
//         [
//           { text: "Continue Payment", style: "cancel" },
//           {
//             text: "Cancel Payment",
//             style: "destructive",
//             onPress: () => {
//               setShowWebView(false);
//               setPaymentUrl(null);
//               setShowFailureModal(true);
//             },
//           },
//         ]
//       );
//       return true;
//     }
//     router.push("/(root)/Cart");
//     return true;
//   }, [showWebView]);

//   useEffect(() => {
//     const backHandler = BackHandler.addEventListener(
//       "hardwareBackPress",
//       handleBackPress
//     );
//     return () => backHandler.remove();
//   }, [handleBackPress]);

//   useFocusEffect(
//     useCallback(() => {
//       navigation.setOptions({
//         gestureEnabled: !showWebView,
//         headerShown: false,
//       });
//     }, [showWebView])
//   );

//   const handlePaymentSuccess = async () => {
//     await saveFormData(formData);
//     clearCart();
//     setShowWebView(false);
//     setPaymentUrl(null);
//     Toast.show({
//       type: "success",
//       text1: "Payment Successful",
//       text2: "Thank you for your purchase!",
//       position: "top",
//     });
//     setShowSuccessModal(true);
//     setTimeout(() => {
//       setShowSuccessModal(false);
//       router.push("/(root)/Cart");
//     }, 3000);
//   };

//   const handlePaymentFailure = () => {
//     setShowWebView(false);
//     setPaymentUrl(null);
//     setShowFailureModal(true);
//   };

//   const handlePaymentError = (errorMessage) => {
//     setPaymentError(errorMessage);
//     setShowFailureModal(true);
//   };

//   const formatAmount = (amount) => {
//     return Number(amount.toFixed(2)).toString();
//   };

//   const subtotal = total;
//   const discount = appliedCoupon
//     ? appliedCoupon.type === "percentage"
//       ? (total * appliedCoupon.amount) / 100
//       : appliedCoupon.amount
//     : 0;
//   const finalTotal = (discountedTotal || total) + shippingFee;

//   const handlePayment = async () => {
//     if (isProcessing || !validateForm()) return;

//     try {
//       const netInfo = await NetInfo.fetch();
//       if (!netInfo.isConnected)
//         throw new Error("No internet connection detected");

//       setIsProcessing(true);
//       setPaymentError(null);

//       const currentDate = new Date()
//         .toISOString()
//         .replace(/[^0-9]/g, "")
//         .slice(0, 14);
//       const randomSuffix = Math.random().toString(36).slice(2, 6);
//       const orderId = `TX${currentDate}${randomSuffix}`;
//       const fullName = `${formData.firstName} ${formData.lastName}`;
//       const cleanPhone = formData.phone.replace(/[^\d]/g, "");
//       const txnHDR = `${Date.now()}${Math.floor(Math.random() * 10000)}`;
//       const formattedAmount = formatAmount(finalTotal);

//       const sequence = `${MerchUID}|${orderId}|${SURL}|${FURL}|${formattedAmount}|GEN|${SECRET_KEY}|${txnHDR}`;
//       const hashMac = CryptoJS.SHA512(sequence).toString(CryptoJS.enc.Hex);

//       const payload = {
//         DBRqst: "PY_ECom",
//         Do_Appinfo: {
//           APPTyp: "MOB",
//           OS: Platform.OS === "ios" ? "iOS" : "Android",
//           DevcType: "",
//           APPID: "PG",
//           IPAddrs: "",
//           HsCode: "",
//           Country: "KW",
//           AppVer: "1.0",
//           UsrSessID: "",
//           MdlID: "Pay_Req",
//           APIVer: "2.1",
//         },
//         Do_PyrDtl: {
//           Pyr_MPhone: cleanPhone,
//           Pyr_Name: fullName,
//           ISDNCD: "965",
//         },
//         Do_MerchDtl: {
//           BKY_PRDENUM: "ECom",
//           MerchUID: MerchUID,
//           SURL: SURL,
//           FURL: FURL,
//         },
//         Do_TxnHdr: {
//           BKY_Txn_UID: "",
//           Merch_Txn_UID: orderId,
//           PayFor: "ECom",
//           PayMethod: "knet",
//           Txn_HDR: txnHDR,
//           hashMac: hashMac,
//         },
//         Do_TxnDtl: [
//           {
//             SubMerchUID: MerchUID,
//             Txn_AMT: formattedAmount,
//           },
//         ],
//       };

//       console.log(payload);

//       const headers = {
//         "Content-Type": "application/json",
//         Accept: "application/json",
//       };

//       const controller = new AbortController();
//       const timeoutId = setTimeout(() => controller.abort(), REQUEST_TIMEOUT);

//       const response = await fetch(PAYMENT_API_URL, {
//         method: "POST",
//         headers,
//         body: JSON.stringify(payload),
//         signal: controller.signal,
//       });

//       clearTimeout(timeoutId);

//       if (!response.ok) {
//         const errorText = await response.text();
//         throw new Error(
//           `Payment service error: ${response.status} - ${errorText}`
//         );
//       }

//       const data = await response.json();
//       console.log(data);

//       if (data.ErrorMessage && data.ErrorMessage !== "Success")
//         throw new Error(`API Error: ${data.ErrorMessage}`);

//       const paymentUrl = data?.PayUrl;
//       if (!paymentUrl) throw new Error("Payment URL not found in response");

//       if (!paymentUrl.startsWith("https://"))
//         throw new Error("Invalid or insecure payment URL received");

//       setPaymentUrl(paymentUrl);
//       setShowWebView(true);
//     } catch (error) {
//       let errorMessage = "Payment initiation failed";
//       if (error.name === "AbortError")
//         errorMessage = "Request timed out. Please try again.";
//       else if (error.message) errorMessage = error.message;
//       setPaymentError(errorMessage);
//       handlePaymentError(errorMessage);
//     } finally {
//       setIsProcessing(false);
//     }
//   };

//   if (items.length === 0) return null;

//   return (
//     <SafeAreaView style={[styles.safeArea, { paddingTop: insets.top }]}>
//       <KeyboardAvoidingView
//         behavior={Platform.OS === "ios" ? "padding" : "height"}
//         style={styles.container}
//       >
//         <StatusBar barStyle="dark-content" backgroundColor="#f9fafb" />
//         <View style={styles.header}>
//           <TouchableOpacity
//             onPress={handleBackPress}
//             style={styles.backButton}
//             hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//           >
//             <ChevronLeft color="#E53935" size={28} />
//           </TouchableOpacity>
//           <Text style={styles.headerTitle}>Secure Checkout</Text>
//         </View>

//         <ScrollView
//           style={styles.container}
//           contentContainerStyle={styles.contentContainer}
//           showsVerticalScrollIndicator={false}
//         >
//           <View style={styles.formContainer}>
//             <Text style={styles.formTitle}>Delivery Information</Text>
//             <Text style={styles.deliveryNote}>
//               Orders will be delivered within the next business day.
//             </Text>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>Personal Information</Text>
//               {[
//                 { field: "firstName", label: "First Name *", Icon: User },
//                 { field: "lastName", label: "Last Name *", Icon: User },
//                 { field: "email", label: "Email *", Icon: Mail },
//                 { field: "phone", label: "Phone Number *", Icon: Phone },
//               ].map(({ field, label, Icon }) => (
//                 <View key={field} style={styles.formField}>
//                   <View style={styles.inputLabelContainer}>
//                     <Icon size={16} color="#4b5563" />
//                     <Text style={styles.inputLabel}>{label}</Text>
//                   </View>
//                   <TextInput
//                     style={[
//                       styles.input,
//                       formErrors[field] && styles.inputError,
//                     ]}
//                     value={formData[field]}
//                     onChangeText={(text) =>
//                       setFormData((prev) => ({
//                         ...prev,
//                         [field]:
//                           field === "phone" ? text.replace(/[^\d]/g, "") : text,
//                       }))
//                     }
//                     placeholder={`Enter your ${field}`}
//                     keyboardType={
//                       field === "email"
//                         ? "email-address"
//                         : field === "phone"
//                         ? "phone-pad"
//                         : "default"
//                     }
//                     autoCapitalize={field === "email" ? "none" : "words"}
//                     maxLength={field === "phone" ? 15 : undefined}
//                   />
//                   {formErrors[field] && (
//                     <Text style={styles.errorText}>{formErrors[field]}</Text>
//                   )}
//                   {field === "phone" && !formErrors.phone && (
//                     <Text style={styles.helperText}>
//                       Enter your Kuwait mobile number (minimum 8 digits)
//                     </Text>
//                   )}
//                 </View>
//               ))}
//             </View>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>Delivery Address</Text>
//               {[
//                 { field: "state", label: "State *" },
//                 { field: "city", label: "City *" },
//                 {
//                   field: "address",
//                   label: "Delivery Address *",
//                   multiline: true,
//                 },
//               ].map(({ field, label, multiline }) => (
//                 <View key={field} style={styles.formField}>
//                   <View style={styles.inputLabelContainer}>
//                     <MapPin size={16} color="#4b5563" />
//                     <Text style={styles.inputLabel}>{label}</Text>
//                   </View>
//                   <TextInput
//                     style={[
//                       styles.input,
//                       formErrors[field] && styles.inputError,
//                     ]}
//                     value={formData[field]}
//                     onChangeText={(text) =>
//                       setFormData((prev) => ({ ...prev, [field]: text }))
//                     }
//                     placeholder={`Enter your ${field}`}
//                     multiline={multiline}
//                     numberOfLines={multiline ? 3 : 1}
//                   />
//                   {formErrors[field] && (
//                     <Text style={styles.errorText}>{formErrors[field]}</Text>
//                   )}
//                 </View>
//               ))}
//             </View>
//           </View>

//           <View style={styles.card}>
//             <View style={styles.cardTitleContainer}>
//               <Text style={styles.cardTitle}>Order Summary</Text>
//               <Text style={styles.itemCount}>{items.length} items</Text>
//             </View>
//             {items.map((item) => (
//               <View key={item.documentId} style={styles.itemRow}>
//                 <View style={styles.itemDetails}>
//                   <Text style={styles.itemName} numberOfLines={1}>
//                     {item.name}
//                   </Text>
//                   <Text style={styles.itemQuantity}>Qty: {item.quantity}</Text>
//                 </View>
//                 <Text style={styles.itemPrice}>
//                   {((item.salesPrice || item.price) * item.quantity).toFixed(2)}{" "}
//                   KWD
//                 </Text>
//               </View>
//             ))}

//             <View style={styles.summaryContainer}>
//               <OrderSummaryRow
//                 label="Subtotal"
//                 value={`${subtotal.toFixed(2)} KWD`}
//               />
//               {appliedCoupon && (
//                 <OrderSummaryRow
//                   label={`Discount (${appliedCoupon.code})`}
//                   value={`- ${discount.toFixed(2)} KWD`}
//                   isDiscount
//                 />
//               )}
//               <View style={styles.shippingFeeRow}>
//                 <Text style={styles.summaryLabel}>Shipping Fee</Text>
//                 <View style={styles.shippingFeeValueContainer}>
//                   {isLoadingShippingFee ? (
//                     <ActivityIndicator size="small" color="#10B981" />
//                   ) : shippingFeeError ? (
//                     <Text style={styles.errorValue}>Error loading fee</Text>
//                   ) : (
//                     <Text style={styles.summaryValue}>{`${shippingFee.toFixed(
//                       2
//                     )} KWD`}</Text>
//                   )}
//                 </View>
//               </View>
//               <View style={styles.divider} />
//               <OrderSummaryRow
//                 label="Total Amount"
//                 value={`${formatAmount(finalTotal)} KWD`}
//                 isTotal
//                 isLoading={isLoadingShippingFee}
//               />
//             </View>
//           </View>

//           <View style={styles.securityCard}>
//             <View style={styles.securityHeader}>
//               <Lock size={20} color="#10B981" />
//               <Text style={styles.securityTitle}>Secure Payment</Text>
//             </View>
//             <Text style={styles.securityText}>
//               • SSL encrypted payment processing • Verified by Bookeey Payment
//               Gateway • Your payment details are protected
//             </Text>
//           </View>

//           <TouchableOpacity
//             style={[
//               styles.payButton,
//               (isProcessing || isLoadingShippingFee) &&
//                 styles.payButtonDisabled,
//             ]}
//             onPress={handlePayment}
//             disabled={isProcessing || isLoadingShippingFee}
//           >
//             {isProcessing ? (
//               <ActivityIndicator color="white" size="small" />
//             ) : (
//               <View style={styles.payButtonContent}>
//                 <CreditCard size={20} color="white" />
//                 <Text style={styles.payButtonText}>
//                   Pay {formatAmount(finalTotal)} KWD
//                 </Text>
//               </View>
//             )}
//           </TouchableOpacity>
//           {paymentError && <Text style={styles.errorText}>{paymentError}</Text>}
//         </ScrollView>

//         <Modal
//           visible={showWebView}
//           animationType="slide"
//           onRequestClose={handleBackPress}
//         >
//           <SafeAreaView style={styles.modalContainer}>
//             <View style={styles.webViewHeader}>
//               <TouchableOpacity
//                 onPress={handleBackPress}
//                 style={styles.webViewCloseButton}
//                 hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//               >
//                 <ArrowLeft color="#E53935" size={24} />
//               </TouchableOpacity>
//               <View style={styles.webViewTitleContainer}>
//                 <Lock size={16} color="#10B981" />
//                 <Text style={styles.webViewTitle}>Secure Payment</Text>
//               </View>
//             </View>
//             {isWebViewLoading && <PaymentLoadingOverlay />}
//             {paymentUrl && (
//               <WebView
//                 source={{ uri: paymentUrl }}
//                 onNavigationStateChange={(navState) => {
//                   if (navState.url.startsWith(SURL)) handlePaymentSuccess();
//                   else if (navState.url.startsWith(FURL))
//                     handlePaymentFailure();
//                 }}
//                 onLoadStart={() => setIsWebViewLoading(true)}
//                 onLoadEnd={() => setIsWebViewLoading(false)}
//                 onError={(syntheticEvent) =>
//                   handlePaymentError(syntheticEvent.nativeEvent.description)
//                 }
//                 onHttpError={() => handlePaymentError("Connection error")}
//                 style={styles.webView}
//                 incognito={true}
//                 cacheEnabled={false}
//                 domStorageEnabled={true}
//                 javaScriptEnabled={true}
//                 startInLoadingState={true}
//               />
//             )}
//           </SafeAreaView>
//         </Modal>

//         <PaymentSuccessModal
//           visible={showSuccessModal}
//           onClose={() => {
//             setShowSuccessModal(false);
//             router.push("/(root)/Cart");
//           }}
//         />

//         <Modal
//           visible={showFailureModal}
//           transparent={true}
//           animationType="fade"
//           onRequestClose={() => setShowFailureModal(false)}
//         >
//           <View style={styles.modalBackground}>
//             <View style={[styles.modalContent, styles.failureModal]}>
//               <XCircle size={48} color="#E53935" />
//               <Text style={styles.modalTitle}>Payment Failed</Text>
//               <Text style={styles.modalText}>
//                 {paymentError ||
//                   "Please try again or use a different payment method."}
//               </Text>
//               <TouchableOpacity
//                 style={styles.modalButton}
//                 onPress={() => setShowFailureModal(false)}
//               >
//                 <Text style={styles.modalButtonText}>Try Again</Text>
//               </TouchableOpacity>
//             </View>
//           </View>
//         </Modal>
//       </KeyboardAvoidingView>
//       <Toast />
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: { flex: 1, backgroundColor: "#f9fafb" },
//   container: { flex: 1 },
//   contentContainer: { padding: 16, paddingBottom: 100 },
//   header: {
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     paddingVertical: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f0f0f0",
//     backgroundColor: "#f9fafb",
//   },
//   backButton: { padding: 4 },
//   headerTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#1f2937",
//     marginLeft: 16,
//   },
//   formContainer: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   section: { marginBottom: 24 },
//   sectionTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#e5e7eb",
//     paddingBottom: 4,
//   },
//   formTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 12,
//   },
//   formField: { marginBottom: 16 },
//   inputLabelContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 6,
//     marginBottom: 4,
//   },
//   inputLabel: { fontSize: 14, fontFamily: "Cairo-SemiBold", color: "#4b5563" },
//   input: {
//     borderWidth: 1,
//     borderColor: "#e5e7eb",
//     borderRadius: 8,
//     padding: 12,
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#1f2937",
//     backgroundColor: "#fafafa",
//   },
//   inputError: { borderColor: "#ef4444" },
//   errorText: {
//     color: "#ef4444",
//     fontSize: 12,
//     fontFamily: "Cairo",
//     marginTop: 4,
//   },
//   helperText: {
//     fontSize: 12,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//     marginTop: 4,
//   },
//   deliveryNote: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#10B981",
//     marginBottom: 16,
//     textAlign: "center",
//     backgroundColor: "#f0fdf4",
//     padding: 8,
//     borderRadius: 8,
//   },
//   card: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   cardTitleContainer: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 16,
//   },
//   cardTitle: { fontSize: 18, fontFamily: "Cairo-SemiBold", color: "#1f2937" },
//   itemCount: { fontSize: 14, fontFamily: "Cairo", color: "#6b7280" },
//   itemRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 12,
//     paddingBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f1f5f9",
//   },
//   itemDetails: { flex: 1, paddingRight: 8 },
//   itemName: {
//     fontSize: 15,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//     marginBottom: 4,
//   },
//   itemQuantity: { fontSize: 13, fontFamily: "Cairo", color: "#6b7280" },
//   itemPrice: { fontSize: 15, fontFamily: "Cairo-Bold", color: "#374151" },
//   summaryContainer: {
//     marginTop: 16,
//     paddingTop: 16,
//     borderTopWidth: 1,
//     borderTopColor: "#e5e7eb",
//   },
//   divider: { height: 1, backgroundColor: "#e5e7eb", marginVertical: 12 },
//   securityCard: {
//     backgroundColor: "#f0fdf4",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 24,
//     borderWidth: 1,
//     borderColor: "#86efac",
//   },
//   securityHeader: {
//     flexDirection: "row",
//     alignItems: "center",
//     marginBottom: 12,
//     gap: 8,
//   },
//   securityTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#047857",
//   },
//   securityText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4B5563",
//     lineHeight: 22,
//   },
//   payButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 12,
//     padding: 18,
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 12,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//   },
//   payButtonDisabled: { opacity: 0.6 },
//   payButtonContent: { flexDirection: "row", alignItems: "center", gap: 10 },
//   payButtonText: { color: "white", fontSize: 16, fontFamily: "Cairo-Bold" },
//   modalBackground: {
//     flex: 1,
//     backgroundColor: "rgba(0, 0, 0, 0.5)",
//     justifyContent: "center",
//     alignItems: "center",
//   },
//   modalContainer: { flex: 1, backgroundColor: "#fff" },
//   modalContent: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "80%",
//     maxWidth: 300,
//   },
//   successModalContent: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "90%",
//     maxWidth: 350,
//   },
//   lottieAnimation: { width: 200, height: 200 },
//   failureModal: { borderColor: "#E53935", borderWidth: 2 },
//   modalTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   modalText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   modalButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 8,
//     paddingVertical: 12,
//     paddingHorizontal: 24,
//     marginTop: 24,
//   },
//   modalButtonText: { color: "white", fontSize: 16, fontFamily: "Cairo-Bold" },
//   webView: { flex: 1 },
//   webViewHeader: {
//     height: 56,
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     borderBottomWidth: 1,
//     borderBottomColor: "#E5E7EB",
//     backgroundColor: "#f9fafb",
//   },
//   webViewCloseButton: { padding: 8 },
//   webViewTitleContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 8,
//     flex: 1,
//     justifyContent: "center",
//     marginRight: 40,
//   },
//   webViewTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   loadingOverlay: {
//     position: "absolute",
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//     backgroundColor: "rgba(255,255,255,0.95)",
//     justifyContent: "center",
//     alignItems: "center",
//     zIndex: 1000,
//   },
//   loadingCard: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//     width: "80%",
//     maxWidth: 300,
//   },
//   loadingTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   loadingSubtext: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   errorValue: { fontSize: 14, fontFamily: "Cairo", color: "#DC2626" },
//   shippingFeeRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginVertical: 4,
//   },
//   shippingFeeValueContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     justifyContent: "flex-end",
//   },
//   summaryLabel: { fontSize: 14, fontFamily: "Cairo", color: "#4b5563" },
//   summaryValue: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
// });

/******************************* */

//Works//

// import React, { useState, useCallback, useEffect, useRef } from "react";
// import {
//   View,
//   Text,
//   ScrollView,
//   Alert,
//   ActivityIndicator,
//   StyleSheet,
//   Platform,
//   TouchableOpacity,
//   SafeAreaView,
//   BackHandler,
//   Modal,
//   StatusBar,
//   TextInput,
//   KeyboardAvoidingView,
//   Animated,
// } from "react-native";
// import { router, useNavigation } from "expo-router";
// import { WebView } from "react-native-webview";
// import { useFocusEffect } from "@react-navigation/native";
// import {
//   Shield,
//   CreditCard,
//   ArrowLeft,
//   Lock,
//   ChevronLeft,
//   XCircle,
//   User,
//   Phone,
//   Mail,
//   MapPin,
// } from "lucide-react-native";
// import Toast from "react-native-toast-message";
// import NetInfo from "@react-native-community/netinfo";
// import * as SecureStore from "expo-secure-store";
// import useCartStore from "../../store/cartStore";
// import { OrderSummaryRow } from "../Components/OrderSummary";
// import useShippingFee from "../hooks/useShippingFee";
// import { useSafeAreaInsets } from "react-native-safe-area-context";
// import CryptoJS from "crypto-js";
// import LottieView from "lottie-react-native";
// import { useAuth } from "@clerk/clerk-expo";

// const IS_TEST_ENV = true;
// const PAYMENT_API_URL = IS_TEST_ENV
//   ? "https://demo.bookeey.com/pgapi/api/payment/requestLink"
//   : "https://pg.bookeey.com/internalapi/api/payment/requestLink";
// const MerchUID = "mer2400018";
// const SECRET_KEY = "0623475";
// const SURL = IS_TEST_ENV
//   ? "https://ca9a-37-39-181-176.ngrok-free.app/api/payments/success"
//   : "https://your-production-domain.com/api/payments/success";
// const FURL = IS_TEST_ENV
//   ? "https://664b-37-39-176-72.ngrok-free.app/api/payments/failure"
//   : "https://your-production-domain.com/api/payments/failure";
// const FORM_DATA_KEY = "user_checkout_info";
// const REQUEST_TIMEOUT = 30000;

// const PaymentSuccessModal = ({ visible, onClose }) => {
//   const animationRef = useRef(null);

//   useEffect(() => {
//     if (visible && animationRef.current) animationRef.current.play();
//   }, [visible]);

//   return (
//     <Modal
//       visible={visible}
//       transparent={true}
//       animationType="fade"
//       onRequestClose={onClose}
//     >
//       <View style={styles.modalBackground}>
//         <View style={styles.successModalContent}>
//           <LottieView
//             ref={animationRef}
//             source={require("../../assets/lotties/payment-success.json")}
//             style={styles.lottieAnimation}
//             loop={false}
//             onAnimationFinish={onClose}
//           />
//           <Text style={styles.modalTitle}>Payment Successful!</Text>
//           <Text style={styles.modalText}>
//             Thank you for your purchase. Redirecting to cart...
//           </Text>
//         </View>
//       </View>
//     </Modal>
//   );
// };

// const PaymentLoadingOverlay = () => (
//   <View style={styles.loadingOverlay}>
//     <View style={styles.loadingCard}>
//       <ActivityIndicator size="large" color="#10B981" />
//       <Text style={styles.loadingTitle}>Processing Payment</Text>
//       <Text style={styles.loadingSubtext}>Please don't close this window</Text>
//     </View>
//   </View>
// );

// const REQUIRED_FIELDS = [
//   "firstName",
//   "lastName",
//   "phone",
//   "email",
//   "state",
//   "city",
//   "address",
// ];
// const PHONE_REGEX = /^\d{8,}$/;
// const EMAIL_REGEX = /\S+@\S+\.\S+/;

// const saveFormData = async (data) => {
//   try {
//     await SecureStore.setItemAsync(FORM_DATA_KEY, JSON.stringify(data));
//   } catch (error) {
//     console.error("Error saving form data:", error);
//   }
// };

// const loadFormData = async () => {
//   try {
//     const savedData = await SecureStore.getItemAsync(FORM_DATA_KEY);
//     return savedData ? JSON.parse(savedData) : null;
//   } catch (error) {
//     console.error("Error loading form data:", error);
//     return null;
//   }
// };

// export default function CheckoutPage() {
//   const insets = useSafeAreaInsets();
//   const navigation = useNavigation();
//   const { items, total, discountedTotal, appliedCoupon, clearCart } =
//     useCartStore();
//   const {
//     shippingFee,
//     loading: isLoadingShippingFee,
//     error: shippingFeeError,
//   } = useShippingFee();
//   const { user } = useAuth();

//   const [formData, setFormData] = useState({
//     firstName: "",
//     lastName: "",
//     phone: "",
//     email: "",
//     state: "",
//     city: "",
//     address: "",
//   });
//   const [formErrors, setFormErrors] = useState({});
//   const [isProcessing, setIsProcessing] = useState(false);
//   const [paymentError, setPaymentError] = useState(null);
//   const [showWebView, setShowWebView] = useState(false);
//   const [paymentUrl, setPaymentUrl] = useState(null);
//   const [isWebViewLoading, setIsWebViewLoading] = useState(true);
//   const [showSuccessModal, setShowSuccessModal] = useState(false);
//   const [showFailureModal, setShowFailureModal] = useState(false);

//   useEffect(() => {
//     const loadSavedData = async () => {
//       const savedData = await loadFormData();
//       if (savedData) setFormData(savedData);
//       if (user) {
//         setFormData((prev) => ({
//           ...prev,
//           firstName: user.firstName || "",
//           lastName: user.lastName || "",
//           email: user.emailAddresses[0]?.emailAddress || "",
//           phone: user.phoneNumbers[0]?.phoneNumber || "",
//         }));
//       }
//     };
//     loadSavedData();
//   }, [user]);

//   useEffect(() => {
//     if (items.length === 0) router.replace("/(root)/Cart");
//   }, [items.length]);

//   const validateForm = () => {
//     const errors = {};
//     let isValid = true;

//     REQUIRED_FIELDS.forEach((field) => {
//       if (!formData[field].trim()) {
//         errors[field] = `${
//           field.charAt(0).toUpperCase() + field.slice(1)
//         } is required`;
//         isValid = false;
//       }
//     });

//     if (formData.email && !EMAIL_REGEX.test(formData.email)) {
//       errors.email = "Invalid email address";
//       isValid = false;
//     }

//     const cleanPhone = formData.phone.replace(/[^\d]/g, "");
//     if (formData.phone && !PHONE_REGEX.test(cleanPhone)) {
//       errors.phone = "Phone number must be at least 8 digits";
//       isValid = false;
//     }

//     setFormErrors(errors);
//     if (!isValid) {
//       Toast.show({
//         type: "error",
//         text1: "Form Validation Error",
//         text2: "Please fill in all required fields correctly",
//         position: "top",
//       });
//     }
//     return isValid;
//   };

//   const handleBackPress = useCallback(() => {
//     if (showWebView) {
//       Alert.alert(
//         "Cancel Payment?",
//         "Are you sure you want to cancel? This payment will not be processed.",
//         [
//           { text: "Continue Payment", style: "cancel" },
//           {
//             text: "Cancel Payment",
//             style: "destructive",
//             onPress: () => {
//               setShowWebView(false);
//               setPaymentUrl(null);
//               setShowFailureModal(true);
//             },
//           },
//         ]
//       );
//       return true;
//     }
//     router.push("/(root)/Cart");
//     return true;
//   }, [showWebView]);

//   useEffect(() => {
//     const backHandler = BackHandler.addEventListener(
//       "hardwareBackPress",
//       handleBackPress
//     );
//     return () => backHandler.remove();
//   }, [handleBackPress]);

//   useFocusEffect(
//     useCallback(() => {
//       navigation.setOptions({
//         gestureEnabled: !showWebView,
//         headerShown: false,
//       });
//     }, [showWebView])
//   );

//   const handlePaymentSuccess = async () => {
//     try {
//       const orderId = `TX${new Date()
//         .toISOString()
//         .replace(/[^0-9]/g, "")
//         .slice(0, 14)}${Math.random().toString(36).slice(2, 6)}`;
//       const orderData = {
//         data: {
//           orderId,
//           OrderStatus: "Pending",
//           OrderTotal: finalTotal,
//           OrderDetails: JSON.stringify(items),
//           shippingInfo: JSON.stringify({
//             state: formData.state,
//             city: formData.city,
//             address: formData.address,
//           }),
//           paymentStatus: "success",
//           paymentId: orderId,
//           isGuestOrder: !user,
//           guestInfo: !user
//             ? JSON.stringify({
//                 firstName: formData.firstName,
//                 lastName: formData.lastName,
//                 email: formData.email,
//                 phone: formData.phone,
//               })
//             : null,
//           auth: user ? user.id : null,
//         },
//       };

//       const response = await fetch(
//         `${process.env.EXPO_PUBLIC_STRAPI_API_URL}/api/orders`,
//         {
//           method: "POST",
//           headers: {
//             "Content-Type": "application/json",
//             Authorization: `Bearer ${process.env.EXPO_PUBLIC_STRAPI_API_TOKEN_USER}`,
//           },
//           body: JSON.stringify(orderData),
//         }
//       );

//       if (!response.ok) throw new Error("Failed to create order in Strapi");

//       await saveFormData(formData);
//       clearCart();
//       setShowWebView(false);
//       setPaymentUrl(null);
//       Toast.show({
//         type: "success",
//         text1: "Payment Successful",
//         text2: "Thank you for your purchase!",
//         position: "top",
//       });
//       setShowSuccessModal(true);
//       setTimeout(() => {
//         setShowSuccessModal(false);
//         router.push("/(root)/Cart");
//       }, 3000);
//     } catch (error) {
//       console.error("Error in payment success:", error);
//       setPaymentError("Failed to record order. Contact support.");
//       handlePaymentFailure();
//     }
//   };

//   const handlePaymentFailure = () => {
//     setShowWebView(false);
//     setPaymentUrl(null);
//     setShowFailureModal(true);
//   };

//   const handlePaymentError = (errorMessage) => {
//     setPaymentError(errorMessage);
//     setShowFailureModal(true);
//   };

//   const formatAmount = (amount) => Number(amount.toFixed(2)).toString();

//   const subtotal = total;
//   const discount = appliedCoupon
//     ? appliedCoupon.type === "percentage"
//       ? (total * appliedCoupon.amount) / 100
//       : appliedCoupon.amount
//     : 0;
//   const finalTotal = (discountedTotal || total) + shippingFee;

//   const handlePayment = async () => {
//     if (isProcessing || !validateForm()) return;

//     try {
//       const netInfo = await NetInfo.fetch();
//       if (!netInfo.isConnected)
//         throw new Error("No internet connection detected");

//       setIsProcessing(true);
//       setPaymentError(null);

//       const currentDate = new Date()
//         .toISOString()
//         .replace(/[^0-9]/g, "")
//         .slice(0, 14);
//       const randomSuffix = Math.random().toString(36).slice(2, 6);
//       const orderId = `TX${currentDate}${randomSuffix}`;
//       const fullName = `${formData.firstName} ${formData.lastName}`;
//       const cleanPhone = formData.phone.replace(/[^\d]/g, "");
//       const txnHDR = `${Date.now()}${Math.floor(Math.random() * 10000)}`;
//       const formattedAmount = formatAmount(finalTotal);

//       const sequence = `${MerchUID}|${orderId}|${SURL}|${FURL}|${formattedAmount}|GEN|${SECRET_KEY}|${txnHDR}`;
//       const hashMac = CryptoJS.SHA512(sequence).toString(CryptoJS.enc.Hex);

//       const payload = {
//         DBRqst: "PY_ECom",
//         Do_Appinfo: {
//           APPTyp: "MOB",
//           OS: Platform.OS === "ios" ? "iOS" : "Android",
//           DevcType: "",
//           APPID: "PG",
//           IPAddrs: "",
//           HsCode: "",
//           Country: "KW",
//           AppVer: "1.0",
//           UsrSessID: "",
//           MdlID: "Pay_Req",
//           APIVer: "2.1",
//         },
//         Do_PyrDtl: {
//           Pyr_MPhone: cleanPhone,
//           Pyr_Name: fullName,
//           ISDNCD: "965",
//         },
//         Do_MerchDtl: {
//           BKY_PRDENUM: "ECom",
//           MerchUID: MerchUID,
//           SURL: SURL,
//           FURL: FURL,
//         },
//         Do_TxnHdr: {
//           BKY_Txn_UID: "",
//           Merch_Txn_UID: orderId,
//           PayFor: "ECom",
//           PayMethod: "knet",
//           Txn_HDR: txnHDR,
//           hashMac: hashMac,
//         },
//         Do_TxnDtl: [{ SubMerchUID: MerchUID, Txn_AMT: formattedAmount }],
//       };

//       const headers = {
//         "Content-Type": "application/json",
//         Accept: "application/json",
//       };
//       const controller = new AbortController();
//       const timeoutId = setTimeout(() => controller.abort(), REQUEST_TIMEOUT);

//       console.log(payload);

//       const response = await fetch(PAYMENT_API_URL, {
//         method: "POST",
//         headers,
//         body: JSON.stringify(payload),
//         signal: controller.signal,
//       });
//       clearTimeout(timeoutId);

//       if (!response.ok) {
//         const errorText = await response.text();
//         throw new Error(
//           `Payment service error: ${response.status} - ${errorText}`
//         );
//       }

//       const data = await response.json();
//       console.log(data);

//       if (data.ErrorMessage && data.ErrorMessage !== "Success")
//         throw new Error(`API Error: ${data.ErrorMessage}`);

//       const paymentUrl = data?.PayUrl;
//       if (!paymentUrl || !paymentUrl.startsWith("https://"))
//         throw new Error("Invalid or insecure payment URL received");

//       setPaymentUrl(paymentUrl);
//       setShowWebView(true);
//     } catch (error) {
//       let errorMessage = "Payment initiation failed";
//       if (error.name === "AbortError")
//         errorMessage = "Request timed out. Please try again.";
//       else if (error.message) errorMessage = error.message;
//       setPaymentError(errorMessage);
//       handlePaymentError(errorMessage);
//     } finally {
//       setIsProcessing(false);
//     }
//   };

//   if (items.length === 0) return null;

//   return (
//     <SafeAreaView style={[styles.safeArea, { paddingTop: insets.top }]}>
//       <KeyboardAvoidingView
//         behavior={Platform.OS === "ios" ? "padding" : "height"}
//         style={styles.container}
//       >
//         <StatusBar barStyle="dark-content" backgroundColor="#f9fafb" />
//         <View style={styles.header}>
//           <TouchableOpacity
//             onPress={handleBackPress}
//             style={styles.backButton}
//             hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//           >
//             <ChevronLeft color="#E53935" size={28} />
//           </TouchableOpacity>
//           <Text style={styles.headerTitle}>Secure Checkout</Text>
//         </View>

//         <ScrollView
//           style={styles.container}
//           contentContainerStyle={styles.contentContainer}
//           showsVerticalScrollIndicator={false}
//         >
//           <View style={styles.formContainer}>
//             <Text style={styles.formTitle}>Delivery Information</Text>
//             <Text style={styles.deliveryNote}>
//               Orders will be delivered within the next business day.
//             </Text>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>Personal Information</Text>
//               {[
//                 { field: "firstName", label: "First Name *", Icon: User },
//                 { field: "lastName", label: "Last Name *", Icon: User },
//                 { field: "email", label: "Email *", Icon: Mail },
//                 { field: "phone", label: "Phone Number *", Icon: Phone },
//               ].map(({ field, label, Icon }) => (
//                 <View key={field} style={styles.formField}>
//                   <View style={styles.inputLabelContainer}>
//                     <Icon size={16} color="#4b5563" />
//                     <Text style={styles.inputLabel}>{label}</Text>
//                   </View>
//                   <TextInput
//                     style={[
//                       styles.input,
//                       formErrors[field] && styles.inputError,
//                     ]}
//                     value={formData[field]}
//                     onChangeText={(text) =>
//                       setFormData((prev) => ({
//                         ...prev,
//                         [field]:
//                           field === "phone" ? text.replace(/[^\d]/g, "") : text,
//                       }))
//                     }
//                     placeholder={`Enter your ${field}`}
//                     keyboardType={
//                       field === "email"
//                         ? "email-address"
//                         : field === "phone"
//                         ? "phone-pad"
//                         : "default"
//                     }
//                     autoCapitalize={field === "email" ? "none" : "words"}
//                     maxLength={field === "phone" ? 15 : undefined}
//                   />
//                   {formErrors[field] && (
//                     <Text style={styles.errorText}>{formErrors[field]}</Text>
//                   )}
//                   {field === "phone" && !formErrors.phone && (
//                     <Text style={styles.helperText}>
//                       Enter your Kuwait mobile number (minimum 8 digits)
//                     </Text>
//                   )}
//                 </View>
//               ))}
//             </View>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>Delivery Address</Text>
//               {[
//                 { field: "state", label: "State *" },
//                 { field: "city", label: "City *" },
//                 {
//                   field: "address",
//                   label: "Delivery Address *",
//                   multiline: true,
//                 },
//               ].map(({ field, label, multiline }) => (
//                 <View key={field} style={styles.formField}>
//                   <View style={styles.inputLabelContainer}>
//                     <MapPin size={16} color="#4b5563" />
//                     <Text style={styles.inputLabel}>{label}</Text>
//                   </View>
//                   <TextInput
//                     style={[
//                       styles.input,
//                       formErrors[field] && styles.inputError,
//                     ]}
//                     value={formData[field]}
//                     onChangeText={(text) =>
//                       setFormData((prev) => ({ ...prev, [field]: text }))
//                     }
//                     placeholder={`Enter your ${field}`}
//                     multiline={multiline}
//                     numberOfLines={multiline ? 3 : 1}
//                   />
//                   {formErrors[field] && (
//                     <Text style={styles.errorText}>{formErrors[field]}</Text>
//                   )}
//                 </View>
//               ))}
//             </View>
//           </View>

//           <View style={styles.card}>
//             <View style={styles.cardTitleContainer}>
//               <Text style={styles.cardTitle}>Order Summary</Text>
//               <Text style={styles.itemCount}>{items.length} items</Text>
//             </View>
//             {items.map((item) => (
//               <View key={item.documentId} style={styles.itemRow}>
//                 <View style={styles.itemDetails}>
//                   <Text style={styles.itemName} numberOfLines={1}>
//                     {item.name}
//                   </Text>
//                   <Text style={styles.itemQuantity}>Qty: {item.quantity}</Text>
//                 </View>
//                 <Text style={styles.itemPrice}>
//                   {((item.salesPrice || item.price) * item.quantity).toFixed(2)}{" "}
//                   KWD
//                 </Text>
//               </View>
//             ))}

//             <View style={styles.summaryContainer}>
//               <OrderSummaryRow
//                 label="Subtotal"
//                 value={`${subtotal.toFixed(2)} KWD`}
//               />
//               {appliedCoupon && (
//                 <OrderSummaryRow
//                   label={`Discount (${appliedCoupon.code})`}
//                   value={`- ${discount.toFixed(2)} KWD`}
//                   isDiscount
//                 />
//               )}
//               <View style={styles.shippingFeeRow}>
//                 <Text style={styles.summaryLabel}>Shipping Fee</Text>
//                 <View style={styles.shippingFeeValueContainer}>
//                   {isLoadingShippingFee ? (
//                     <ActivityIndicator size="small" color="#10B981" />
//                   ) : shippingFeeError ? (
//                     <Text style={styles.errorValue}>Error loading fee</Text>
//                   ) : (
//                     <Text style={styles.summaryValue}>{`${shippingFee.toFixed(
//                       2
//                     )} KWD`}</Text>
//                   )}
//                 </View>
//               </View>
//               <View style={styles.divider} />
//               <OrderSummaryRow
//                 label="Total Amount"
//                 value={`${formatAmount(finalTotal)} KWD`}
//                 isTotal
//                 isLoading={isLoadingShippingFee}
//               />
//             </View>
//           </View>

//           <View style={styles.securityCard}>
//             <View style={styles.securityHeader}>
//               <Lock size={20} color="#10B981" />
//               <Text style={styles.securityTitle}>Secure Payment</Text>
//             </View>
//             <Text style={styles.securityText}>
//               • SSL encrypted payment processing • Verified by Bookeey Payment
//               Gateway • Your payment details are protected
//             </Text>
//           </View>

//           <TouchableOpacity
//             style={[
//               styles.payButton,
//               (isProcessing || isLoadingShippingFee) &&
//                 styles.payButtonDisabled,
//             ]}
//             onPress={handlePayment}
//             disabled={isProcessing || isLoadingShippingFee}
//           >
//             {isProcessing ? (
//               <ActivityIndicator color="white" size="small" />
//             ) : (
//               <View style={styles.payButtonContent}>
//                 <CreditCard size={20} color="white" />
//                 <Text style={styles.payButtonText}>
//                   Pay {formatAmount(finalTotal)} KWD
//                 </Text>
//               </View>
//             )}
//           </TouchableOpacity>
//           {paymentError && <Text style={styles.errorText}>{paymentError}</Text>}
//         </ScrollView>

//         <Modal
//           visible={showWebView}
//           animationType="slide"
//           onRequestClose={handleBackPress}
//         >
//           <SafeAreaView style={styles.modalContainer}>
//             <View style={styles.webViewHeader}>
//               <TouchableOpacity
//                 onPress={handleBackPress}
//                 style={styles.webViewCloseButton}
//                 hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//               >
//                 <ArrowLeft color="#E53935" size={24} />
//               </TouchableOpacity>
//               <View style={styles.webViewTitleContainer}>
//                 <Lock size={16} color="#10B981" />
//                 <Text style={styles.webViewTitle}>Secure Payment</Text>
//               </View>
//             </View>
//             {isWebViewLoading && <PaymentLoadingOverlay />}
//             {paymentUrl && (
//               <WebView
//                 source={{ uri: paymentUrl }}
//                 onNavigationStateChange={(navState) => {
//                   if (navState.url.startsWith(SURL)) handlePaymentSuccess();
//                   else if (navState.url.startsWith(FURL))
//                     handlePaymentFailure();
//                 }}
//                 onLoadStart={() => setIsWebViewLoading(true)}
//                 onLoadEnd={() => setIsWebViewLoading(false)}
//                 onError={(syntheticEvent) =>
//                   handlePaymentError(syntheticEvent.nativeEvent.description)
//                 }
//                 onHttpError={() => handlePaymentError("Connection error")}
//                 style={styles.webView}
//                 incognito={true}
//                 cacheEnabled={false}
//                 domStorageEnabled={true}
//                 javaScriptEnabled={true}
//                 startInLoadingState={true}
//               />
//             )}
//           </SafeAreaView>
//         </Modal>

//         <PaymentSuccessModal
//           visible={showSuccessModal}
//           onClose={() => {
//             setShowSuccessModal(false);
//             router.push("/(root)/Cart");
//           }}
//         />

//         <Modal
//           visible={showFailureModal}
//           transparent={true}
//           animationType="fade"
//           onRequestClose={() => setShowFailureModal(false)}
//         >
//           <View style={styles.modalBackground}>
//             <View style={[styles.modalContent, styles.failureModal]}>
//               <XCircle size={48} color="#E53935" />
//               <Text style={styles.modalTitle}>Payment Failed</Text>
//               <Text style={styles.modalText}>
//                 {paymentError ||
//                   "Please try again or use a different payment method."}
//               </Text>
//               <TouchableOpacity
//                 style={styles.modalButton}
//                 onPress={() => setShowFailureModal(false)}
//               >
//                 <Text style={styles.modalButtonText}>Try Again</Text>
//               </TouchableOpacity>
//             </View>
//           </View>
//         </Modal>
//       </KeyboardAvoidingView>
//       <Toast />
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: { flex: 1, backgroundColor: "#f9fafb" },
//   container: { flex: 1 },
//   contentContainer: { padding: 16, paddingBottom: 100 },
//   header: {
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     paddingVertical: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f0f0f0",
//     backgroundColor: "#f9fafb",
//   },
//   backButton: { padding: 4 },
//   headerTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#1f2937",
//     marginLeft: 16,
//   },
//   formContainer: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   section: { marginBottom: 24 },
//   sectionTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#e5e7eb",
//     paddingBottom: 4,
//   },
//   formTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 12,
//   },
//   formField: { marginBottom: 16 },
//   inputLabelContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 6,
//     marginBottom: 4,
//   },
//   inputLabel: { fontSize: 14, fontFamily: "Cairo-SemiBold", color: "#4b5563" },
//   input: {
//     borderWidth: 1,
//     borderColor: "#e5e7eb",
//     borderRadius: 8,
//     padding: 12,
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#1f2937",
//     backgroundColor: "#fafafa",
//   },
//   inputError: { borderColor: "#ef4444" },
//   errorText: {
//     color: "#ef4444",
//     fontSize: 12,
//     fontFamily: "Cairo",
//     marginTop: 4,
//   },
//   helperText: {
//     fontSize: 12,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//     marginTop: 4,
//   },
//   deliveryNote: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#10B981",
//     marginBottom: 16,
//     textAlign: "center",
//     backgroundColor: "#f0fdf4",
//     padding: 8,
//     borderRadius: 8,
//   },
//   card: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   cardTitleContainer: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 16,
//   },
//   cardTitle: { fontSize: 18, fontFamily: "Cairo-SemiBold", color: "#1f2937" },
//   itemCount: { fontSize: 14, fontFamily: "Cairo", color: "#6b7280" },
//   itemRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 12,
//     paddingBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f1f5f9",
//   },
//   itemDetails: { flex: 1, paddingRight: 8 },
//   itemName: {
//     fontSize: 15,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//     marginBottom: 4,
//   },
//   itemQuantity: { fontSize: 13, fontFamily: "Cairo", color: "#6b7280" },
//   itemPrice: { fontSize: 15, fontFamily: "Cairo-Bold", color: "#374151" },
//   summaryContainer: {
//     marginTop: 16,
//     paddingTop: 16,
//     borderTopWidth: 1,
//     borderTopColor: "#e5e7eb",
//   },
//   divider: { height: 1, backgroundColor: "#e5e7eb", marginVertical: 12 },
//   securityCard: {
//     backgroundColor: "#f0fdf4",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 24,
//     borderWidth: 1,
//     borderColor: "#86efac",
//   },
//   securityHeader: {
//     flexDirection: "row",
//     alignItems: "center",
//     marginBottom: 12,
//     gap: 8,
//   },
//   securityTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#047857",
//   },
//   securityText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4B5563",
//     lineHeight: 22,
//   },
//   payButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 12,
//     padding: 18,
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 12,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//   },
//   payButtonDisabled: { opacity: 0.6 },
//   payButtonContent: { flexDirection: "row", alignItems: "center", gap: 10 },
//   payButtonText: { color: "white", fontSize: 16, fontFamily: "Cairo-Bold" },
//   modalBackground: {
//     flex: 1,
//     backgroundColor: "rgba(0, 0, 0, 0.5)",
//     justifyContent: "center",
//     alignItems: "center",
//   },
//   modalContainer: { flex: 1, backgroundColor: "#fff" },
//   modalContent: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "80%",
//     maxWidth: 300,
//   },
//   successModalContent: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "90%",
//     maxWidth: 350,
//   },
//   lottieAnimation: { width: 200, height: 200 },
//   failureModal: { borderColor: "#E53935", borderWidth: 2 },
//   modalTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   modalText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   modalButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 8,
//     paddingVertical: 12,
//     paddingHorizontal: 24,
//     marginTop: 24,
//   },
//   modalButtonText: { color: "white", fontSize: 16, fontFamily: "Cairo-Bold" },
//   webView: { flex: 1 },
//   webViewHeader: {
//     height: 56,
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     borderBottomWidth: 1,
//     borderBottomColor: "#E5E7EB",
//     backgroundColor: "#f9fafb",
//   },
//   webViewCloseButton: { padding: 8 },
//   webViewTitleContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 8,
//     flex: 1,
//     justifyContent: "center",
//     marginRight: 40,
//   },
//   webViewTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   loadingOverlay: {
//     position: "absolute",
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//     backgroundColor: "rgba(255,255,255,0.95)",
//     justifyContent: "center",
//     alignItems: "center",
//     zIndex: 1000,
//   },
//   loadingCard: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//     width: "80%",
//     maxWidth: 300,
//   },
//   loadingTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   loadingSubtext: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   errorValue: { fontSize: 14, fontFamily: "Cairo", color: "#DC2626" },
//   shippingFeeRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginVertical: 4,
//   },
//   shippingFeeValueContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     justifyContent: "flex-end",
//   },
//   summaryLabel: { fontSize: 14, fontFamily: "Cairo", color: "#4b5563" },
//   summaryValue: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
// });

/***************************** */

// import React, { useState, useCallback, useEffect, useRef } from "react";
// import {
//   View,
//   Text,
//   ScrollView,
//   Alert,
//   ActivityIndicator,
//   StyleSheet,
//   Platform,
//   TouchableOpacity,
//   SafeAreaView,
//   BackHandler,
//   Modal,
//   StatusBar,
//   TextInput,
//   KeyboardAvoidingView,
// } from "react-native";
// import { router, useNavigation } from "expo-router";
// import { WebView } from "react-native-webview";
// import { useFocusEffect } from "@react-navigation/native";
// import {
//   Shield,
//   CreditCard,
//   ArrowLeft,
//   Lock,
//   ChevronLeft,
//   XCircle,
//   User,
//   Phone,
//   Mail,
//   MapPin,
// } from "lucide-react-native";
// import Toast from "react-native-toast-message";
// import NetInfo from "@react-native-community/netinfo";
// import * as SecureStore from "expo-secure-store";
// import useCartStore from "../../store/cartStore";
// import { OrderSummaryRow } from "../Components/OrderSummary";
// import useShippingFee from "../hooks/useShippingFee";
// import { useSafeAreaInsets } from "react-native-safe-area-context";
// import CryptoJS from "crypto-js";
// import LottieView from "lottie-react-native";
// import { useUserContext } from "../contexts/UserContext";

// const IS_TEST_ENV = false; // Set to false for production
// const PAYMENT_API_URL = IS_TEST_ENV
//   ? "https://demo.bookeey.com/pgapi/api/payment/requestLink"
//   : "https://pg.bookeey.com/internalapi/api/payment/requestLink";
// const MerchUID = "mer2400018";
// const SECRET_KEY = "0623475";
// const SURL = IS_TEST_ENV
//   ? "https://ca9a-37-39-181-176.ngrok-free.app/api/payments/success"
//   : "https://your-production-domain.com/api/payments/success"; // Replace with your production URL
// const FURL = IS_TEST_ENV
//   ? "https://664b-37-39-176-72.ngrok-free.app/api/payments/failure"
//   : "https://your-production-domain.com/api/payments/failure"; // Replace with your production URL
// const FORM_DATA_KEY = "user_checkout_info";
// const REQUEST_TIMEOUT = 30000;

// const PaymentSuccessModal = ({ visible, onClose }) => {
//   const animationRef = useRef(null);

//   useEffect(() => {
//     if (visible && animationRef.current) animationRef.current.play();
//   }, [visible]);

//   return (
//     <Modal
//       visible={visible}
//       transparent={true}
//       animationType="fade"
//       onRequestClose={onClose}
//     >
//       <View style={styles.modalBackground}>
//         <View style={styles.successModalContent}>
//           <LottieView
//             ref={animationRef}
//             source={require("../../assets/lotties/payment-success.json")}
//             style={styles.lottieAnimation}
//             loop={false}
//             onAnimationFinish={onClose}
//           />
//           <Text style={styles.modalTitle}>Payment Successful!</Text>
//           <Text style={styles.modalText}>
//             Thank you for your purchase. Redirecting to cart...
//           </Text>
//         </View>
//       </View>
//     </Modal>
//   );
// };

// const PaymentLoadingOverlay = () => (
//   <View style={styles.loadingOverlay}>
//     <View style={styles.loadingCard}>
//       <ActivityIndicator size="large" color="#10B981" />
//       <Text style={styles.loadingTitle}>Processing Payment</Text>
//       <Text style={styles.loadingSubtext}>Please don't close this window</Text>
//     </View>
//   </View>
// );

// const REQUIRED_FIELDS = [
//   "firstName",
//   "lastName",
//   "phone",
//   "email",
//   "state",
//   "city",
//   "address",
// ];
// const PHONE_REGEX = /^\d{8,}$/;
// const EMAIL_REGEX = /\S+@\S+\.\S+/;

// const saveFormData = async (data) => {
//   try {
//     await SecureStore.setItemAsync(FORM_DATA_KEY, JSON.stringify(data));
//   } catch (error) {
//     console.error("Error saving form data:", error);
//   }
// };

// const loadFormData = async () => {
//   try {
//     const savedData = await SecureStore.getItemAsync(FORM_DATA_KEY);
//     return savedData ? JSON.parse(savedData) : null;
//   } catch (error) {
//     console.error("Error loading form data:", error);
//     return null;
//   }
// };

// export default function CheckoutPage() {
//   const insets = useSafeAreaInsets();
//   const navigation = useNavigation();
//   const { items, total, discountedTotal, appliedCoupon, clearCart } =
//     useCartStore();
//   const {
//     shippingFee,
//     loading: isLoadingShippingFee,
//     error: shippingFeeError,
//   } = useShippingFee();
//   const { userData } = useUserContext();

//   const [formData, setFormData] = useState({
//     firstName: "",
//     lastName: "",
//     phone: "",
//     email: "",
//     state: "",
//     city: "",
//     address: "",
//   });
//   const [formErrors, setFormErrors] = useState({});
//   const [isProcessing, setIsProcessing] = useState(false);
//   const [paymentError, setPaymentError] = useState(null);
//   const [showWebView, setShowWebView] = useState(false);
//   const [paymentUrl, setPaymentUrl] = useState(null);
//   const [isWebViewLoading, setIsWebViewLoading] = useState(true);
//   const [showSuccessModal, setShowSuccessModal] = useState(false);
//   const [showFailureModal, setShowFailureModal] = useState(false);

//   useEffect(() => {
//     const loadSavedData = async () => {
//       const savedData = await loadFormData();
//       if (savedData) setFormData(savedData);
//       if (userData && !userData.isGuestMode) {
//         setFormData((prev) => ({
//           ...prev,
//           firstName: userData.firstName || "",
//           lastName: userData.lastName || "",
//           email: userData.email || "",
//           phone: userData.phone || "",
//         }));
//       }
//     };
//     loadSavedData();
//   }, [userData]);

//   useEffect(() => {
//     if (items.length === 0) router.replace("/(root)/Cart");
//   }, [items.length]);

//   const validateForm = () => {
//     const errors = {};
//     let isValid = true;

//     REQUIRED_FIELDS.forEach((field) => {
//       if (!formData[field].trim()) {
//         errors[field] = `${
//           field.charAt(0).toUpperCase() + field.slice(1)
//         } is required`;
//         isValid = false;
//       }
//     });

//     if (formData.email && !EMAIL_REGEX.test(formData.email)) {
//       errors.email = "Invalid email address";
//       isValid = false;
//     }

//     const cleanPhone = formData.phone.replace(/[^\d]/g, "");
//     if (formData.phone && !PHONE_REGEX.test(cleanPhone)) {
//       errors.phone = "Phone number must be at least 8 digits";
//       isValid = false;
//     }

//     setFormErrors(errors);
//     if (!isValid) {
//       Toast.show({
//         type: "error",
//         text1: "Form Validation Error",
//         text2: "Please fill in all required fields correctly",
//         position: "top",
//       });
//     }
//     return isValid;
//   };

//   const handleBackPress = useCallback(() => {
//     if (showWebView) {
//       Alert.alert(
//         "Cancel Payment?",
//         "Are you sure you want to cancel? This payment will not be processed.",
//         [
//           { text: "Continue Payment", style: "cancel" },
//           {
//             text: "Cancel Payment",
//             style: "destructive",
//             onPress: () => {
//               setShowWebView(false);
//               setPaymentUrl(null);
//               setShowFailureModal(true);
//             },
//           },
//         ]
//       );
//       return true;
//     }
//     router.push("/(root)/Cart");
//     return true;
//   }, [showWebView]);

//   useEffect(() => {
//     const backHandler = BackHandler.addEventListener(
//       "hardwareBackPress",
//       handleBackPress
//     );
//     return () => backHandler.remove();
//   }, [handleBackPress]);

//   useFocusEffect(
//     useCallback(() => {
//       navigation.setOptions({
//         gestureEnabled: !showWebView,
//         headerShown: false,
//       });
//     }, [showWebView])
//   );

//   const handlePaymentSuccess = async () => {
//     try {
//       const orderId = `TX${new Date()
//         .toISOString()
//         .replace(/[^0-9]/g, "")
//         .slice(0, 14)}${Math.random().toString(36).slice(2, 6)}`;
//       const subtotal = total;
//       const discountAmount = appliedCoupon
//         ? appliedCoupon.type === "percentage"
//           ? (total * appliedCoupon.amount) / 100
//           : appliedCoupon.amount
//         : 0;
//       const orderTotal = (discountedTotal || total) + shippingFee;

//       const orderData = {
//         data: {
//           orderId,
//           OrderStatus: "Pending",
//           subtotal: Number(subtotal.toFixed(2)),
//           discountAmount: Number(discountAmount.toFixed(2)),
//           shippingFee: Number(shippingFee.toFixed(2)),
//           OrderTotal: Number(orderTotal.toFixed(2)),
//           OrderDetails: JSON.stringify(items),
//           shippingInfo: JSON.stringify({
//             state: formData.state,
//             city: formData.city,
//             address: formData.address,
//             phone: formData.phone,
//           }),
//           paymentStatus: "success",
//           paymentId: orderId,
//           isGuestOrder: userData?.isGuestMode || !userData,
//           guestInfo:
//             userData?.isGuestMode || !userData
//               ? JSON.stringify({
//                   firstName: formData.firstName,
//                   lastName: formData.lastName,
//                   email: formData.email,
//                   phone: formData.phone,
//                 })
//               : null,
//           auth: userData && !userData.isGuestMode ? userData.strapiId : null,
//         },
//       };

//       const response = await fetch(
//         `${process.env.EXPO_PUBLIC_STRAPI_API_URL}/api/orders`,
//         {
//           method: "POST",
//           headers: {
//             "Content-Type": "application/json",
//             Authorization: `Bearer ${process.env.EXPO_PUBLIC_STRAPI_API_TOKEN_USER}`,
//           },
//           body: JSON.stringify(orderData),
//         }
//       );

//       if (!response.ok) {
//         const errorText = await response.text();
//         throw new Error(`Failed to create order in Strapi: ${errorText}`);
//       }

//       await saveFormData(formData);
//       clearCart();
//       setShowWebView(false);
//       setPaymentUrl(null);
//       Toast.show({
//         type: "success",
//         text1: "Payment Successful",
//         text2: "Thank you for your purchase!",
//         position: "top",
//       });
//       setShowSuccessModal(true);
//       setTimeout(() => {
//         setShowSuccessModal(false);
//         router.push("/(root)/Cart");
//       }, 3000);
//     } catch (error) {
//       console.error("Error in payment success:", error);
//       setPaymentError("Failed to record order. Contact support.");
//       handlePaymentFailure();
//     }
//   };

//   const handlePaymentFailure = () => {
//     setShowWebView(false);
//     setPaymentUrl(null);
//     setShowFailureModal(true);
//   };

//   const handlePaymentError = (errorMessage) => {
//     setPaymentError(errorMessage);
//     setShowFailureModal(true);
//   };

//   const formatAmount = (amount) => Number(amount.toFixed(2)).toString();

//   const subtotal = total;
//   const discount = appliedCoupon
//     ? appliedCoupon.type === "percentage"
//       ? (total * appliedCoupon.amount) / 100
//       : appliedCoupon.amount
//     : 0;
//   const finalTotal = (discountedTotal || total) + shippingFee;

//   const handlePayment = async () => {
//     if (isProcessing || !validateForm()) return;

//     try {
//       const netInfo = await NetInfo.fetch();
//       if (!netInfo.isConnected)
//         throw new Error("No internet connection detected");

//       setIsProcessing(true);
//       setPaymentError(null);

//       const currentDate = new Date()
//         .toISOString()
//         .replace(/[^0-9]/g, "")
//         .slice(0, 14);
//       const randomSuffix = Math.random().toString(36).slice(2, 6);
//       const orderId = `TX${currentDate}${randomSuffix}`;
//       const fullName = `${formData.firstName} ${formData.lastName}`;
//       const cleanPhone = formData.phone.replace(/[^\d]/g, "");
//       const txnHDR = `${Date.now()}${Math.floor(Math.random() * 10000)}`;
//       const formattedAmount = formatAmount(finalTotal);

//       const sequence = `${MerchUID}|${orderId}|${SURL}|${FURL}|${formattedAmount}|GEN|${SECRET_KEY}|${txnHDR}`;
//       const hashMac = CryptoJS.SHA512(sequence).toString(CryptoJS.enc.Hex);

//       const payload = {
//         DBRqst: "PY_ECom",
//         Do_Appinfo: {
//           APPTyp: "MOB",
//           OS: Platform.OS === "ios" ? "iOS" : "Android",
//           DevcType: "",
//           APPID: "PG",
//           IPAddrs: "",
//           HsCode: "",
//           Country: "KW",
//           AppVer: "1.0",
//           UsrSessID: "",
//           MdlID: "Pay_Req",
//           APIVer: "2.1",
//         },
//         Do_PyrDtl: {
//           Pyr_MPhone: cleanPhone,
//           Pyr_Name: fullName,
//           ISDNCD: "965",
//         },
//         Do_MerchDtl: {
//           BKY_PRDENUM: "ECom",
//           MerchUID: MerchUID,
//           SURL: SURL,
//           FURL: FURL,
//         },
//         Do_TxnHdr: {
//           BKY_Txn_UID: "",
//           Merch_Txn_UID: orderId,
//           PayFor: "ECom",
//           PayMethod: "knet",
//           Txn_HDR: txnHDR,
//           hashMac: hashMac,
//         },
//         Do_TxnDtl: [{ SubMerchUID: MerchUID, Txn_AMT: formattedAmount }],
//       };

//       const headers = {
//         "Content-Type": "application/json",
//         Accept: "application/json",
//       };
//       const controller = new AbortController();
//       const timeoutId = setTimeout(() => controller.abort(), REQUEST_TIMEOUT);

//       console.log(payload);

//       const response = await fetch(PAYMENT_API_URL, {
//         method: "POST",
//         headers,
//         body: JSON.stringify(payload),
//         signal: controller.signal,
//       });
//       clearTimeout(timeoutId);

//       if (!response.ok) {
//         const errorText = await response.text();
//         throw new Error(
//           `Payment service error: ${response.status} - ${errorText}`
//         );
//       }

//       const data = await response.json();
//       console.log(data);

//       if (data.ErrorMessage && data.ErrorMessage !== "Success")
//         throw new Error(`API Error: ${data.ErrorMessage}`);

//       const paymentUrl = data?.PayUrl;
//       if (!paymentUrl || !paymentUrl.startsWith("https://"))
//         throw new Error("Invalid or insecure payment URL received");

//       setPaymentUrl(paymentUrl);
//       setShowWebView(true);
//     } catch (error) {
//       let errorMessage = "Payment initiation failed";
//       if (error.name === "AbortError")
//         errorMessage = "Request timed out. Please try again.";
//       else if (error.message) errorMessage = error.message;
//       setPaymentError(errorMessage);
//       handlePaymentError(errorMessage);
//     } finally {
//       setIsProcessing(false);
//     }
//   };

//   if (items.length === 0) return null;

//   return (
//     <SafeAreaView style={[styles.safeArea, { paddingTop: insets.top }]}>
//       <KeyboardAvoidingView
//         behavior={Platform.OS === "ios" ? "padding" : "height"}
//         style={styles.container}
//       >
//         <StatusBar barStyle="dark-content" backgroundColor="#f9fafb" />
//         <View style={styles.header}>
//           <TouchableOpacity
//             onPress={handleBackPress}
//             style={styles.backButton}
//             hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//           >
//             <ChevronLeft color="#E53935" size={28} />
//           </TouchableOpacity>
//           <Text style={styles.headerTitle}>Secure Checkout</Text>
//         </View>

//         <ScrollView
//           style={styles.container}
//           contentContainerStyle={styles.contentContainer}
//           showsVerticalScrollIndicator={false}
//         >
//           <View style={styles.formContainer}>
//             <Text style={styles.formTitle}>Delivery Information</Text>
//             <Text style={styles.deliveryNote}>
//               Orders will be delivered within the next business day.
//             </Text>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>Personal Information</Text>
//               {[
//                 { field: "firstName", label: "First Name *", Icon: User },
//                 { field: "lastName", label: "Last Name *", Icon: User },
//                 { field: "email", label: "Email *", Icon: Mail },
//                 { field: "phone", label: "Phone Number *", Icon: Phone },
//               ].map(({ field, label, Icon }) => (
//                 <View key={field} style={styles.formField}>
//                   <View style={styles.inputLabelContainer}>
//                     <Icon size={16} color="#4b5563" />
//                     <Text style={styles.inputLabel}>{label}</Text>
//                   </View>
//                   <TextInput
//                     style={[
//                       styles.input,
//                       formErrors[field] && styles.inputError,
//                     ]}
//                     value={formData[field]}
//                     onChangeText={(text) =>
//                       setFormData((prev) => ({
//                         ...prev,
//                         [field]:
//                           field === "phone" ? text.replace(/[^\d]/g, "") : text,
//                       }))
//                     }
//                     placeholder={`Enter your ${field}`}
//                     keyboardType={
//                       field === "email"
//                         ? "email-address"
//                         : field === "phone"
//                         ? "phone-pad"
//                         : "default"
//                     }
//                     autoCapitalize={field === "email" ? "none" : "words"}
//                     maxLength={field === "phone" ? 15 : undefined}
//                   />
//                   {formErrors[field] && (
//                     <Text style={styles.errorText}>{formErrors[field]}</Text>
//                   )}
//                   {field === "phone" && !formErrors.phone && (
//                     <Text style={styles.helperText}>
//                       Enter your Kuwait mobile number (minimum 8 digits)
//                     </Text>
//                   )}
//                 </View>
//               ))}
//             </View>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>Delivery Address</Text>
//               {[
//                 { field: "state", label: "State *" },
//                 { field: "city", label: "City *" },
//                 {
//                   field: "address",
//                   label: "Delivery Address *",
//                   multiline: true,
//                 },
//               ].map(({ field, label, multiline }) => (
//                 <View key={field} style={styles.formField}>
//                   <View style={styles.inputLabelContainer}>
//                     <MapPin size={16} color="#4b5563" />
//                     <Text style={styles.inputLabel}>{label}</Text>
//                   </View>
//                   <TextInput
//                     style={[
//                       styles.input,
//                       formErrors[field] && styles.inputError,
//                     ]}
//                     value={formData[field]}
//                     onChangeText={(text) =>
//                       setFormData((prev) => ({ ...prev, [field]: text }))
//                     }
//                     placeholder={`Enter your ${field}`}
//                     multiline={multiline}
//                     numberOfLines={multiline ? 3 : 1}
//                   />
//                   {formErrors[field] && (
//                     <Text style={styles.errorText}>{formErrors[field]}</Text>
//                   )}
//                 </View>
//               ))}
//             </View>
//           </View>

//           <View style={styles.card}>
//             <View style={styles.cardTitleContainer}>
//               <Text style={styles.cardTitle}>Order Summary</Text>
//               <Text style={styles.itemCount}>{items.length} items</Text>
//             </View>
//             {items.map((item) => (
//               <View key={item.documentId} style={styles.itemRow}>
//                 <View style={styles.itemDetails}>
//                   <Text style={styles.itemName} numberOfLines={1}>
//                     {item.name}
//                   </Text>
//                   <Text style={styles.itemQuantity}>Qty: {item.quantity}</Text>
//                 </View>
//                 <Text style={styles.itemPrice}>
//                   {((item.salesPrice || item.price) * item.quantity).toFixed(2)}{" "}
//                   KWD
//                 </Text>
//               </View>
//             ))}

//             <View style={styles.summaryContainer}>
//               <OrderSummaryRow
//                 label="Subtotal"
//                 value={`${subtotal.toFixed(2)} KWD`}
//               />
//               {appliedCoupon && (
//                 <OrderSummaryRow
//                   label={`Discount (${appliedCoupon.code})`}
//                   value={`- ${discount.toFixed(2)} KWD`}
//                   isDiscount
//                 />
//               )}
//               <View style={styles.shippingFeeRow}>
//                 <Text style={styles.summaryLabel}>Shipping Fee</Text>
//                 <View style={styles.shippingFeeValueContainer}>
//                   {isLoadingShippingFee ? (
//                     <ActivityIndicator size="small" color="#10B981" />
//                   ) : shippingFeeError ? (
//                     <Text style={styles.errorValue}>Error loading fee</Text>
//                   ) : (
//                     <Text style={styles.summaryValue}>{`${shippingFee.toFixed(
//                       2
//                     )} KWD`}</Text>
//                   )}
//                 </View>
//               </View>
//               <View style={styles.divider} />
//               <OrderSummaryRow
//                 label="Total Amount"
//                 value={`${formatAmount(finalTotal)} KWD`}
//                 isTotal
//                 isLoading={isLoadingShippingFee}
//               />
//             </View>
//           </View>

//           <View style={styles.securityCard}>
//             <View style={styles.securityHeader}>
//               <Lock size={20} color="#10B981" />
//               <Text style={styles.securityTitle}>Secure Payment</Text>
//             </View>
//             <Text style={styles.securityText}>
//               • SSL encrypted payment processing • Verified by Bookeey Payment
//               Gateway • Your payment details are protected
//             </Text>
//           </View>

//           <TouchableOpacity
//             style={[
//               styles.payButton,
//               (isProcessing || isLoadingShippingFee) &&
//                 styles.payButtonDisabled,
//             ]}
//             onPress={handlePayment}
//             disabled={isProcessing || isLoadingShippingFee}
//           >
//             {isProcessing ? (
//               <ActivityIndicator color="white" size="small" />
//             ) : (
//               <View style={styles.payButtonContent}>
//                 <CreditCard size={20} color="white" />
//                 <Text style={styles.payButtonText}>
//                   Pay {formatAmount(finalTotal)} KWD
//                 </Text>
//               </View>
//             )}
//           </TouchableOpacity>
//           {paymentError && <Text style={styles.errorText}>{paymentError}</Text>}
//         </ScrollView>

//         <Modal
//           visible={showWebView}
//           animationType="slide"
//           onRequestClose={handleBackPress}
//         >
//           <SafeAreaView style={styles.modalContainer}>
//             <View style={styles.webViewHeader}>
//               <TouchableOpacity
//                 onPress={handleBackPress}
//                 style={styles.webViewCloseButton}
//                 hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//               >
//                 <ArrowLeft color="#E53935" size={24} />
//               </TouchableOpacity>
//               <View style={styles.webViewTitleContainer}>
//                 <Lock size={16} color="#10B981" />
//                 <Text style={styles.webViewTitle}>Secure Payment</Text>
//               </View>
//             </View>
//             {isWebViewLoading && <PaymentLoadingOverlay />}
//             {paymentUrl && (
//               <WebView
//                 source={{ uri: paymentUrl }}
//                 onNavigationStateChange={(navState) => {
//                   if (navState.url.startsWith(SURL)) handlePaymentSuccess();
//                   else if (navState.url.startsWith(FURL))
//                     handlePaymentFailure();
//                 }}
//                 onLoadStart={() => setIsWebViewLoading(true)}
//                 onLoadEnd={() => setIsWebViewLoading(false)}
//                 onError={(syntheticEvent) =>
//                   handlePaymentError(syntheticEvent.nativeEvent.description)
//                 }
//                 onHttpError={() => handlePaymentError("Connection error")}
//                 style={styles.webView}
//                 incognito={true}
//                 cacheEnabled={false}
//                 domStorageEnabled={true}
//                 javaScriptEnabled={true}
//                 startInLoadingState={true}
//               />
//             )}
//           </SafeAreaView>
//         </Modal>

//         <PaymentSuccessModal
//           visible={showSuccessModal}
//           onClose={() => {
//             setShowSuccessModal(false);
//             router.push("/(root)/Cart");
//           }}
//         />

//         <Modal
//           visible={showFailureModal}
//           transparent={true}
//           animationType="fade"
//           onRequestClose={() => setShowFailureModal(false)}
//         >
//           <View style={styles.modalBackground}>
//             <View style={[styles.modalContent, styles.failureModal]}>
//               <XCircle size={48} color="#E53935" />
//               <Text style={styles.modalTitle}>Payment Failed</Text>
//               <Text style={styles.modalText}>
//                 {paymentError ||
//                   "Please try again or use a different payment method."}
//               </Text>
//               <TouchableOpacity
//                 style={styles.modalButton}
//                 onPress={() => setShowFailureModal(false)}
//               >
//                 <Text style={styles.modalButtonText}>Try Again</Text>
//               </TouchableOpacity>
//             </View>
//           </View>
//         </Modal>
//       </KeyboardAvoidingView>
//       <Toast />
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: { flex: 1, backgroundColor: "#f9fafb" },
//   container: { flex: 1 },
//   contentContainer: { padding: 16, paddingBottom: 100 },
//   header: {
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     paddingVertical: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f0f0f0",
//     backgroundColor: "#f9fafb",
//   },
//   backButton: { padding: 4 },
//   headerTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#1f2937",
//     marginLeft: 16,
//   },
//   formContainer: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   section: { marginBottom: 24 },
//   sectionTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#e5e7eb",
//     paddingBottom: 4,
//   },
//   formTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 12,
//   },
//   formField: { marginBottom: 16 },
//   inputLabelContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 6,
//     marginBottom: 4,
//   },
//   inputLabel: { fontSize: 14, fontFamily: "Cairo-SemiBold", color: "#4b5563" },
//   input: {
//     borderWidth: 1,
//     borderColor: "#e5e7eb",
//     borderRadius: 8,
//     padding: 12,
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#1f2937",
//     backgroundColor: "#fafafa",
//   },
//   inputError: { borderColor: "#ef4444" },
//   errorText: {
//     color: "#ef4444",
//     fontSize: 12,
//     fontFamily: "Cairo",
//     marginTop: 4,
//   },
//   helperText: {
//     fontSize: 12,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//     marginTop: 4,
//   },
//   deliveryNote: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#10B981",
//     marginBottom: 16,
//     textAlign: "center",
//     backgroundColor: "#f0fdf4",
//     padding: 8,
//     borderRadius: 8,
//   },
//   card: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   cardTitleContainer: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 16,
//   },
//   cardTitle: { fontSize: 18, fontFamily: "Cairo-SemiBold", color: "#1f2937" },
//   itemCount: { fontSize: 14, fontFamily: "Cairo", color: "#6b7280" },
//   itemRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 12,
//     paddingBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f1f5f9",
//   },
//   itemDetails: { flex: 1, paddingRight: 8 },
//   itemName: {
//     fontSize: 15,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//     marginBottom: 4,
//   },
//   itemQuantity: { fontSize: 13, fontFamily: "Cairo", color: "#6b7280" },
//   itemPrice: { fontSize: 15, fontFamily: "Cairo-Bold", color: "#374151" },
//   summaryContainer: {
//     marginTop: 16,
//     paddingTop: 16,
//     borderTopWidth: 1,
//     borderTopColor: "#e5e7eb",
//   },
//   divider: { height: 1, backgroundColor: "#e5e7eb", marginVertical: 12 },
//   securityCard: {
//     backgroundColor: "#f0fdf4",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 24,
//     borderWidth: 1,
//     borderColor: "#86efac",
//   },
//   securityHeader: {
//     flexDirection: "row",
//     alignItems: "center",
//     marginBottom: 12,
//     gap: 8,
//   },
//   securityTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#047857",
//   },
//   securityText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4B5563",
//     lineHeight: 22,
//   },
//   payButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 12,
//     padding: 18,
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 12,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//   },
//   payButtonDisabled: { opacity: 0.6 },
//   payButtonContent: { flexDirection: "row", alignItems: "center", gap: 10 },
//   payButtonText: { color: "white", fontSize: 16, fontFamily: "Cairo-Bold" },
//   modalBackground: {
//     flex: 1,
//     backgroundColor: "rgba(0, 0, 0, 0.5)",
//     justifyContent: "center",
//     alignItems: "center",
//   },
//   modalContainer: { flex: 1, backgroundColor: "#fff" },
//   modalContent: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "80%",
//     maxWidth: 300,
//   },
//   successModalContent: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "90%",
//     maxWidth: 350,
//   },
//   lottieAnimation: { width: 200, height: 200 },
//   failureModal: { borderColor: "#E53935", borderWidth: 2 },
//   modalTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   modalText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   modalButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 8,
//     paddingVertical: 12,
//     paddingHorizontal: 24,
//     marginTop: 24,
//   },
//   modalButtonText: { color: "white", fontSize: 16, fontFamily: "Cairo-Bold" },
//   webView: { flex: 1 },
//   webViewHeader: {
//     height: 56,
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     borderBottomWidth: 1,
//     borderBottomColor: "#E5E7EB",
//     backgroundColor: "#f9fafb",
//   },
//   webViewCloseButton: { padding: 8 },
//   webViewTitleContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 8,
//     flex: 1,
//     justifyContent: "center",
//     marginRight: 40,
//   },
//   webViewTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   loadingOverlay: {
//     position: "absolute",
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//     backgroundColor: "rgba(255,255,255,0.95)",
//     justifyContent: "center",
//     alignItems: "center",
//     zIndex: 1000,
//   },
//   loadingCard: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//     width: "80%",
//     maxWidth: 300,
//   },
//   loadingTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   loadingSubtext: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   errorValue: { fontSize: 14, fontFamily: "Cairo", color: "#DC2626" },
//   shippingFeeRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginVertical: 4,
//   },
//   shippingFeeValueContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     justifyContent: "flex-end",
//   },
//   summaryLabel: { fontSize: 14, fontFamily: "Cairo", color: "#4b5563" },
//   summaryValue: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
// });

/**********************************************/

// import React, { useState, useCallback, useEffect, useRef } from "react";
// import {
//   View,
//   Text,
//   ScrollView,
//   Alert,
//   ActivityIndicator,
//   StyleSheet,
//   Platform,
//   TouchableOpacity,
//   SafeAreaView,
//   BackHandler,
//   Modal,
//   StatusBar,
//   TextInput,
//   KeyboardAvoidingView,
// } from "react-native";
// import { router, useNavigation } from "expo-router";
// import { WebView } from "react-native-webview";
// import { useFocusEffect } from "@react-navigation/native";
// import {
//   Shield,
//   CreditCard,
//   ArrowLeft,
//   Lock,
//   ChevronLeft,
//   XCircle,
//   User,
//   Phone,
//   Mail,
//   MapPin,
// } from "lucide-react-native";
// import Toast from "react-native-toast-message";
// import NetInfo from "@react-native-community/netinfo";
// import * as SecureStore from "expo-secure-store";
// import useCartStore from "../../store/cartStore";
// import { OrderSummaryRow } from "../Components/OrderSummary";
// import useShippingFee from "../hooks/useShippingFee";
// import { useSafeAreaInsets } from "react-native-safe-area-context";
// import CryptoJS from "crypto-js";
// import LottieView from "lottie-react-native";
// import { useUserContext } from "../contexts/UserContext";

// // Environment Configuration
// const IS_TEST_ENV = process.env.EXPO_PUBLIC_IS_TEST_ENV === "true";
// const PAYMENT_API_URL = IS_TEST_ENV
//   ? process.env.EXPO_PUBLIC_PAYMENT_API_URL_SANDBOX
//   : process.env.EXPO_PUBLIC_PAYMENT_API_URL_PRODUCTION;
// const MERCH_UID = IS_TEST_ENV ? "mer2400018" : "mer20000227";
// const SECRET_KEY = IS_TEST_ENV ? "0623475" : "4207734";
// const SUB_MERCH_UID = IS_TEST_ENV ? "mer2400018" : "subm2000067";
// const SURL = IS_TEST_ENV
//   ? "https://ca9a-37-39-181-176.ngrok-free.app/api/payments/success"
//   : "https://your-production-domain.com/api/payments/success"; // Replace with production URL
// const FURL = IS_TEST_ENV
//   ? "https://664b-37-39-176-72.ngrok-free.app/api/payments/failure"
//   : "https://your-production-domain.com/api/payments/failure"; // Replace with production URL
// const FORM_DATA_KEY =
//   process.env.EXPO_PUBLIC_FORM_DATA_KEY || "user_checkout_info";
// const REQUEST_TIMEOUT =
//   Number(process.env.EXPO_PUBLIC_REQUEST_TIMEOUT) || 30000;

// const PaymentSuccessModal = ({ visible, onClose }) => {
//   const animationRef = useRef(null);

//   useEffect(() => {
//     if (visible && animationRef.current) animationRef.current.play();
//   }, [visible]);

//   return (
//     <Modal
//       visible={visible}
//       transparent={true}
//       animationType="fade"
//       onRequestClose={onClose}
//     >
//       <View style={styles.modalBackground}>
//         <View style={styles.successModalContent}>
//           <LottieView
//             ref={animationRef}
//             source={require("../../assets/lotties/payment-success.json")}
//             style={styles.lottieAnimation}
//             loop={false}
//             onAnimationFinish={onClose}
//           />
//           <Text style={styles.modalTitle}>Payment Successful!</Text>
//           <Text style={styles.modalText}>
//             Thank you for your purchase. Redirecting to cart...
//           </Text>
//         </View>
//       </View>
//     </Modal>
//   );
// };

// const PaymentLoadingOverlay = () => (
//   <View style={styles.loadingOverlay}>
//     <View style={styles.loadingCard}>
//       <ActivityIndicator size="large" color="#10B981" />
//       <Text style={styles.loadingTitle}>Processing Payment</Text>
//       <Text style={styles.loadingSubtext}>Please don't close this window</Text>
//     </View>
//   </View>
// );

// const REQUIRED_FIELDS = [
//   "firstName",
//   "lastName",
//   "phone",
//   "email",
//   "state",
//   "city",
//   "address",
// ];
// const PHONE_REGEX = /^\d{8,}$/;
// const EMAIL_REGEX = /\S+@\S+\.\S+/;

// const saveFormData = async (data) => {
//   try {
//     await SecureStore.setItemAsync(FORM_DATA_KEY, JSON.stringify(data));
//   } catch (error) {
//     console.error("Error saving form data:", error);
//   }
// };

// const loadFormData = async () => {
//   try {
//     const savedData = await SecureStore.getItemAsync(FORM_DATA_KEY);
//     return savedData ? JSON.parse(savedData) : null;
//   } catch (error) {
//     console.error("Error loading form data:", error);
//     return null;
//   }
// };

// export default function CheckoutPage() {
//   const insets = useSafeAreaInsets();
//   const navigation = useNavigation();
//   const { items, total, discountedTotal, appliedCoupon, clearCart } =
//     useCartStore();
//   const {
//     shippingFee,
//     loading: isLoadingShippingFee,
//     error: shippingFeeError,
//   } = useShippingFee();
//   const { userData } = useUserContext();

//   const [formData, setFormData] = useState({
//     firstName: "",
//     lastName: "",
//     phone: "",
//     email: "",
//     state: "",
//     city: "",
//     address: "",
//   });
//   const [formErrors, setFormErrors] = useState({});
//   const [isProcessing, setIsProcessing] = useState(false);
//   const [paymentError, setPaymentError] = useState(null);
//   const [showWebView, setShowWebView] = useState(false);
//   const [paymentUrl, setPaymentUrl] = useState(null);
//   const [isWebViewLoading, setIsWebViewLoading] = useState(true);
//   const [showSuccessModal, setShowSuccessModal] = useState(false);
//   const [showFailureModal, setShowFailureModal] = useState(false);
//   const [isOrderCreated, setIsOrderCreated] = useState(false); // Prevent duplicate orders

//   useEffect(() => {
//     const loadSavedData = async () => {
//       const savedData = await loadFormData();
//       if (savedData) setFormData(savedData);
//       if (userData && !userData.isGuestMode) {
//         setFormData((prev) => ({
//           ...prev,
//           firstName: userData.firstName || "",
//           lastName: userData.lastName || "",
//           email: userData.email || "",
//           phone: userData.phone || "",
//         }));
//       }
//     };
//     loadSavedData();
//   }, [userData]);

//   useEffect(() => {
//     if (items.length === 0) router.replace("/(root)/Cart");
//   }, [items.length]);

//   const validateForm = () => {
//     const errors = {};
//     let isValid = true;

//     REQUIRED_FIELDS.forEach((field) => {
//       if (!formData[field].trim()) {
//         errors[field] = `${
//           field.charAt(0).toUpperCase() + field.slice(1)
//         } is required`;
//         isValid = false;
//       }
//     });

//     if (formData.email && !EMAIL_REGEX.test(formData.email)) {
//       errors.email = "Invalid email address";
//       isValid = false;
//     }

//     const cleanPhone = formData.phone.replace(/[^\d]/g, "");
//     if (formData.phone && !PHONE_REGEX.test(cleanPhone)) {
//       errors.phone = "Phone number must be at least 8 digits";
//       isValid = false;
//     }

//     setFormErrors(errors);
//     if (!isValid) {
//       Toast.show({
//         type: "error",
//         text1: "Form Validation Error",
//         text2: "Please fill in all required fields correctly",
//         position: "top",
//       });
//     }
//     return isValid;
//   };

//   const handleBackPress = useCallback(() => {
//     if (showWebView) {
//       Alert.alert(
//         "Cancel Payment?",
//         "Are you sure you want to cancel? This payment will not be processed.",
//         [
//           { text: "Continue Payment", style: "cancel" },
//           {
//             text: "Cancel Payment",
//             style: "destructive",
//             onPress: () => {
//               setShowWebView(false);
//               setPaymentUrl(null);
//               setShowFailureModal(true);
//             },
//           },
//         ]
//       );
//       return true;
//     }
//     router.push("/(root)/Cart");
//     return true;
//   }, [showWebView]);

//   useEffect(() => {
//     const backHandler = BackHandler.addEventListener(
//       "hardwareBackPress",
//       handleBackPress
//     );
//     return () => backHandler.remove();
//   }, [handleBackPress]);

//   useFocusEffect(
//     useCallback(() => {
//       navigation.setOptions({
//         gestureEnabled: !showWebView,
//         headerShown: false,
//       });
//     }, [showWebView])
//   );

//   const handlePaymentSuccess = async () => {
//     if (isOrderCreated) {
//       console.log("Order already created, skipping duplicate creation.");
//       return;
//     }
//     setIsOrderCreated(true);
//     console.log("Starting order creation process...");

//     try {
//       const orderId = `TX${new Date()
//         .toISOString()
//         .replace(/[^0-9]/g, "")
//         .slice(0, 14)}${Math.random().toString(36).slice(2, 6)}`;
//       const subtotal = total;
//       const discountAmount = appliedCoupon
//         ? appliedCoupon.type === "percentage"
//           ? (total * appliedCoupon.amount) / 100
//           : appliedCoupon.amount
//         : 0;
//       const orderTotal = (discountedTotal || total) + shippingFee;

//       const orderData = {
//         data: {
//           orderId,
//           OrderStatus: "Pending",
//           subtotal: Number(subtotal.toFixed(2)),
//           discountAmount: Number(discountAmount.toFixed(2)),
//           shippingFee: Number(shippingFee.toFixed(2)),
//           OrderTotal: Number(orderTotal.toFixed(2)),
//           OrderDetails: JSON.stringify(items),
//           shippingInfo: JSON.stringify({
//             state: formData.state,
//             city: formData.city,
//             address: formData.address,
//             phone: formData.phone,
//           }),
//           paymentStatus: "success",
//           paymentId: orderId,
//           isGuestOrder: userData?.isGuestMode || !userData,
//           guestInfo:
//             userData?.isGuestMode || !userData
//               ? JSON.stringify({
//                   firstName: formData.firstName,
//                   lastName: formData.lastName,
//                   email: formData.email,
//                   phone: formData.phone,
//                 })
//               : null,
//           auth: userData && !userData.isGuestMode ? userData.strapiId : null,
//         },
//       };

//       console.log("Order Data to Strapi:", JSON.stringify(orderData, null, 2));

//       const response = await fetch(
//         `${process.env.EXPO_PUBLIC_STRAPI_API_URL}/api/orders`,
//         {
//           method: "POST",
//           headers: {
//             "Content-Type": "application/json",
//             Authorization: `Bearer ${process.env.EXPO_PUBLIC_STRAPI_API_TOKEN_USER}`,
//             ...(IS_TEST_ENV && { "ngrok-skip-browser-warning": "true" }),
//           },
//           body: JSON.stringify(orderData),
//         }
//       );

//       if (!response.ok) {
//         const errorText = await response.text();
//         throw new Error(`Failed to create order in Strapi: ${errorText}`);
//       }

//       const responseData = await response.json();
//       console.log("Strapi Response:", JSON.stringify(responseData, null, 2));

//       await saveFormData(formData);
//       clearCart();
//       setShowWebView(false);
//       setPaymentUrl(null);
//       Toast.show({
//         type: "success",
//         text1: "Payment Successful",
//         text2: "Thank you for your purchase!",
//         position: "top",
//       });
//       setShowSuccessModal(true);
//       setTimeout(() => {
//         setShowSuccessModal(false);
//         router.push("/(root)/Cart");
//       }, 3000);
//     } catch (error) {
//       console.error("Error in payment success:", error);
//       setPaymentError("Failed to record order. Contact support.");
//       handlePaymentFailure();
//     }
//   };

//   const handlePaymentFailure = () => {
//     setShowWebView(false);
//     setPaymentUrl(null);
//     setShowFailureModal(true);
//   };

//   const handlePaymentError = (errorMessage) => {
//     setPaymentError(errorMessage);
//     setShowFailureModal(true);
//   };

//   const formatAmount = (amount) => Number(amount.toFixed(2)).toString();

//   const subtotal = total;
//   const discount = appliedCoupon
//     ? appliedCoupon.type === "percentage"
//       ? (total * appliedCoupon.amount) / 100
//       : appliedCoupon.amount
//     : 0;
//   const finalTotal = (discountedTotal || total) + shippingFee;

//   const handlePayment = async () => {
//     if (isProcessing || !validateForm()) return;

//     try {
//       const netInfo = await NetInfo.fetch();
//       if (!netInfo.isConnected)
//         throw new Error("No internet connection detected");

//       setIsProcessing(true);
//       setPaymentError(null);

//       const currentDate = new Date()
//         .toISOString()
//         .replace(/[^0-9]/g, "")
//         .slice(0, 14);
//       const randomSuffix = Math.random().toString(36).slice(2, 6);
//       const orderId = `TX${currentDate}${randomSuffix}`;
//       const fullName = `${formData.firstName} ${formData.lastName}`;
//       const cleanPhone = formData.phone.replace(/[^\d]/g, "");
//       const txnHDR = `${Date.now()}${Math.floor(Math.random() * 10000)}`;
//       const formattedAmount = formatAmount(finalTotal);

//       const sequence = `${MERCH_UID}|${orderId}|${SURL}|${FURL}|${formattedAmount}|GEN|${SECRET_KEY}|${txnHDR}`;
//       const hashMac = CryptoJS.SHA512(sequence).toString(CryptoJS.enc.Hex);

//       const payload = {
//         DBRqst: "PY_ECom",
//         Do_Appinfo: {
//           APPTyp: "MOB",
//           OS: Platform.OS === "ios" ? "iOS" : "Android",
//           DevcType: "",
//           APPID: "PG",
//           IPAddrs: "",
//           HsCode: "",
//           Country: "KW",
//           AppVer: "1.0",
//           UsrSessID: "",
//           MdlID: "Pay_Req",
//           APIVer: "2.1",
//         },
//         Do_PyrDtl: {
//           Pyr_MPhone: cleanPhone,
//           Pyr_Name: fullName,
//           ISDNCD: "965",
//         },
//         Do_MerchDtl: {
//           BKY_PRDENUM: "ECom",
//           MerchUID: MERCH_UID,
//           SURL: SURL,
//           FURL: FURL,
//         },
//         Do_TxnHdr: {
//           BKY_Txn_UID: "",
//           Merch_Txn_UID: orderId,
//           PayFor: "ECom",
//           PayMethod: "knet",
//           Txn_HDR: txnHDR,
//           hashMac: hashMac,
//         },
//         Do_TxnDtl: [{ SubMerchUID: SUB_MERCH_UID, Txn_AMT: formattedAmount }],
//       };

//       const headers = {
//         "Content-Type": "application/json",
//         Accept: "application/json",
//         ...(IS_TEST_ENV && { "ngrok-skip-browser-warning": "true" }),
//       };
//       const controller = new AbortController();
//       const timeoutId = setTimeout(() => controller.abort(), REQUEST_TIMEOUT);

//       console.log("Payment Payload:", JSON.stringify(payload, null, 2));

//       const response = await fetch(PAYMENT_API_URL, {
//         method: "POST",
//         headers,
//         body: JSON.stringify(payload),
//         signal: controller.signal,
//       });
//       clearTimeout(timeoutId);

//       if (!response.ok) {
//         const errorText = await response.text();
//         throw new Error(
//           `Payment service error: ${response.status} - ${errorText}`
//         );
//       }

//       const data = await response.json();
//       console.log("Payment Response:", JSON.stringify(data, null, 2));

//       if (data.ErrorMessage && data.ErrorMessage !== "Success")
//         throw new Error(`API Error: ${data.ErrorMessage}`);

//       const paymentUrl = data?.PayUrl;
//       if (!paymentUrl || !paymentUrl.startsWith("https://"))
//         throw new Error("Invalid or insecure payment URL received");

//       setPaymentUrl(paymentUrl);
//       setShowWebView(true);
//     } catch (error) {
//       let errorMessage = "Payment initiation failed";
//       if (error.name === "AbortError")
//         errorMessage = "Request timed out. Please try again.";
//       else if (error.message) errorMessage = error.message;
//       console.error("Payment Error:", error);
//       setPaymentError(errorMessage);
//       handlePaymentError(errorMessage);
//     } finally {
//       setIsProcessing(false);
//     }
//   };

//   if (items.length === 0) return null;

//   return (
//     <SafeAreaView style={[styles.safeArea, { paddingTop: insets.top }]}>
//       <KeyboardAvoidingView
//         behavior={Platform.OS === "ios" ? "padding" : "height"}
//         style={styles.container}
//       >
//         <StatusBar barStyle="dark-content" backgroundColor="#f9fafb" />
//         <View style={styles.header}>
//           <TouchableOpacity
//             onPress={handleBackPress}
//             style={styles.backButton}
//             hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//           >
//             <ChevronLeft color="#E53935" size={28} />
//           </TouchableOpacity>
//           <Text style={styles.headerTitle}>Secure Checkout</Text>
//         </View>

//         <ScrollView
//           style={styles.container}
//           contentContainerStyle={styles.contentContainer}
//           showsVerticalScrollIndicator={false}
//         >
//           <View style={styles.formContainer}>
//             <Text style={styles.formTitle}>Delivery Information</Text>
//             <Text style={styles.deliveryNote}>
//               Orders will be delivered within the next business day.
//             </Text>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>Personal Information</Text>
//               {[
//                 { field: "firstName", label: "First Name *", Icon: User },
//                 { field: "lastName", label: "Last Name *", Icon: User },
//                 { field: "email", label: "Email *", Icon: Mail },
//                 { field: "phone", label: "Phone Number *", Icon: Phone },
//               ].map(({ field, label, Icon }) => (
//                 <View key={field} style={styles.formField}>
//                   <View style={styles.inputLabelContainer}>
//                     <Icon size={16} color="#4b5563" />
//                     <Text style={styles.inputLabel}>{label}</Text>
//                   </View>
//                   <TextInput
//                     style={[
//                       styles.input,
//                       formErrors[field] && styles.inputError,
//                     ]}
//                     value={formData[field]}
//                     onChangeText={(text) =>
//                       setFormData((prev) => ({
//                         ...prev,
//                         [field]:
//                           field === "phone" ? text.replace(/[^\d]/g, "") : text,
//                       }))
//                     }
//                     placeholder={`Enter your ${field}`}
//                     keyboardType={
//                       field === "email"
//                         ? "email-address"
//                         : field === "phone"
//                         ? "phone-pad"
//                         : "default"
//                     }
//                     autoCapitalize={field === "email" ? "none" : "words"}
//                     maxLength={field === "phone" ? 15 : undefined}
//                   />
//                   {formErrors[field] && (
//                     <Text style={styles.errorText}>{formErrors[field]}</Text>
//                   )}
//                   {field === "phone" && !formErrors.phone && (
//                     <Text style={styles.helperText}>
//                       Enter your Kuwait mobile number (minimum 8 digits)
//                     </Text>
//                   )}
//                 </View>
//               ))}
//             </View>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>Delivery Address</Text>
//               {[
//                 { field: "state", label: "State *" },
//                 { field: "city", label: "City *" },
//                 {
//                   field: "address",
//                   label: "Delivery Address *",
//                   multiline: true,
//                 },
//               ].map(({ field, label, multiline }) => (
//                 <View key={field} style={styles.formField}>
//                   <View style={styles.inputLabelContainer}>
//                     <MapPin size={16} color="#4b5563" />
//                     <Text style={styles.inputLabel}>{label}</Text>
//                   </View>
//                   <TextInput
//                     style={[
//                       styles.input,
//                       formErrors[field] && styles.inputError,
//                     ]}
//                     value={formData[field]}
//                     onChangeText={(text) =>
//                       setFormData((prev) => ({ ...prev, [field]: text }))
//                     }
//                     placeholder={`Enter your ${field}`}
//                     multiline={multiline}
//                     numberOfLines={multiline ? 3 : 1}
//                   />
//                   {formErrors[field] && (
//                     <Text style={styles.errorText}>{formErrors[field]}</Text>
//                   )}
//                 </View>
//               ))}
//             </View>
//           </View>

//           <View style={styles.card}>
//             <View style={styles.cardTitleContainer}>
//               <Text style={styles.cardTitle}>Order Summary</Text>
//               <Text style={styles.itemCount}>{items.length} items</Text>
//             </View>
//             {items.map((item) => (
//               <View key={item.documentId} style={styles.itemRow}>
//                 <View style={styles.itemDetails}>
//                   <Text style={styles.itemName} numberOfLines={1}>
//                     {item.name}
//                   </Text>
//                   <Text style={styles.itemQuantity}>Qty: {item.quantity}</Text>
//                 </View>
//                 <Text style={styles.itemPrice}>
//                   {((item.salesPrice || item.price) * item.quantity).toFixed(2)}{" "}
//                   KWD
//                 </Text>
//               </View>
//             ))}

//             <View style={styles.summaryContainer}>
//               <OrderSummaryRow
//                 label="Subtotal"
//                 value={`${subtotal.toFixed(2)} KWD`}
//               />
//               {appliedCoupon && (
//                 <OrderSummaryRow
//                   label={`Discount (${appliedCoupon.code})`}
//                   value={`- ${discount.toFixed(2)} KWD`}
//                   isDiscount
//                 />
//               )}
//               <View style={styles.shippingFeeRow}>
//                 <Text style={styles.summaryLabel}>Shipping Fee</Text>
//                 <View style={styles.shippingFeeValueContainer}>
//                   {isLoadingShippingFee ? (
//                     <ActivityIndicator size="small" color="#10B981" />
//                   ) : shippingFeeError ? (
//                     <Text style={styles.errorValue}>Error loading fee</Text>
//                   ) : (
//                     <Text style={styles.summaryValue}>{`${shippingFee.toFixed(
//                       2
//                     )} KWD`}</Text>
//                   )}
//                 </View>
//               </View>
//               <View style={styles.divider} />
//               <OrderSummaryRow
//                 label="Total Amount"
//                 value={`${formatAmount(finalTotal)} KWD`}
//                 isTotal
//                 isLoading={isLoadingShippingFee}
//               />
//             </View>
//           </View>

//           <View style={styles.securityCard}>
//             <View style={styles.securityHeader}>
//               <Lock size={20} color="#10B981" />
//               <Text style={styles.securityTitle}>Secure Payment</Text>
//             </View>
//             <Text style={styles.securityText}>
//               • SSL encrypted payment processing • Verified by Bookeey Payment
//               Gateway • Your payment details are protected
//             </Text>
//           </View>

//           <TouchableOpacity
//             style={[
//               styles.payButton,
//               (isProcessing || isLoadingShippingFee) &&
//                 styles.payButtonDisabled,
//             ]}
//             onPress={handlePayment}
//             disabled={isProcessing || isLoadingShippingFee}
//           >
//             {isProcessing ? (
//               <ActivityIndicator color="white" size="small" />
//             ) : (
//               <View style={styles.payButtonContent}>
//                 <CreditCard size={20} color="white" />
//                 <Text style={styles.payButtonText}>
//                   Pay {formatAmount(finalTotal)} KWD
//                 </Text>
//               </View>
//             )}
//           </TouchableOpacity>
//           {paymentError && <Text style={styles.errorText}>{paymentError}</Text>}
//         </ScrollView>

//         <Modal
//           visible={showWebView}
//           animationType="slide"
//           onRequestClose={handleBackPress}
//         >
//           <SafeAreaView style={styles.modalContainer}>
//             <View style={styles.webViewHeader}>
//               <TouchableOpacity
//                 onPress={handleBackPress}
//                 style={styles.webViewCloseButton}
//                 hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//               >
//                 <ArrowLeft color="#E53935" size={24} />
//               </TouchableOpacity>
//               <View style={styles.webViewTitleContainer}>
//                 <Lock size={16} color="#10B981" />
//                 <Text style={styles.webViewTitle}>Secure Payment</Text>
//               </View>
//             </View>
//             {isWebViewLoading && <PaymentLoadingOverlay />}
//             {paymentUrl && (
//               <WebView
//                 source={{ uri: paymentUrl }}
//                 onNavigationStateChange={(navState) => {
//                   console.log("Navigation State:", navState.url);
//                   if (navState.url.includes(SURL) && !navState.loading) {
//                     handlePaymentSuccess();
//                   } else if (navState.url.includes(FURL) && !navState.loading) {
//                     handlePaymentFailure();
//                   }
//                 }}
//                 onLoadStart={() => setIsWebViewLoading(true)}
//                 onLoadEnd={() => setIsWebViewLoading(false)}
//                 onError={(syntheticEvent) =>
//                   handlePaymentError(syntheticEvent.nativeEvent.description)
//                 }
//                 onHttpError={() => handlePaymentError("Connection error")}
//                 style={styles.webView}
//                 incognito={true}
//                 cacheEnabled={false}
//                 domStorageEnabled={true}
//                 javaScriptEnabled={true}
//                 startInLoadingState={true}
//               />
//             )}
//           </SafeAreaView>
//         </Modal>

//         <PaymentSuccessModal
//           visible={showSuccessModal}
//           onClose={() => {
//             setShowSuccessModal(false);
//             router.push("/(root)/Cart");
//           }}
//         />

//         <Modal
//           visible={showFailureModal}
//           transparent={true}
//           animationType="fade"
//           onRequestClose={() => setShowFailureModal(false)}
//         >
//           <View style={styles.modalBackground}>
//             <View style={[styles.modalContent, styles.failureModal]}>
//               <XCircle size={48} color="#E53935" />
//               <Text style={styles.modalTitle}>Payment Failed</Text>
//               <Text style={styles.modalText}>
//                 {paymentError ||
//                   "Please try again or use a different payment method."}
//               </Text>
//               <TouchableOpacity
//                 style={styles.modalButton}
//                 onPress={() => setShowFailureModal(false)}
//               >
//                 <Text style={styles.modalButtonText}>Try Again</Text>
//               </TouchableOpacity>
//             </View>
//           </View>
//         </Modal>
//       </KeyboardAvoidingView>
//       <Toast />
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: { flex: 1, backgroundColor: "#f9fafb" },
//   container: { flex: 1 },
//   contentContainer: { padding: 16, paddingBottom: 100 },
//   header: {
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     paddingVertical: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f0f0f0",
//     backgroundColor: "#f9fafb",
//   },
//   backButton: { padding: 4 },
//   headerTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#1f2937",
//     marginLeft: 16,
//   },
//   formContainer: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   section: { marginBottom: 24 },
//   sectionTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#e5e7eb",
//     paddingBottom: 4,
//   },
//   formTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 12,
//   },
//   formField: { marginBottom: 16 },
//   inputLabelContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 6,
//     marginBottom: 4,
//   },
//   inputLabel: { fontSize: 14, fontFamily: "Cairo-SemiBold", color: "#4b5563" },
//   input: {
//     borderWidth: 1,
//     borderColor: "#e5e7eb",
//     borderRadius: 8,
//     padding: 12,
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#1f2937",
//     backgroundColor: "#fafafa",
//   },
//   inputError: { borderColor: "#ef4444" },
//   errorText: {
//     color: "#ef4444",
//     fontSize: 12,
//     fontFamily: "Cairo",
//     marginTop: 4,
//   },
//   helperText: {
//     fontSize: 12,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//     marginTop: 4,
//   },
//   deliveryNote: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#10B981",
//     marginBottom: 16,
//     textAlign: "center",
//     backgroundColor: "#f0fdf4",
//     padding: 8,
//     borderRadius: 8,
//   },
//   card: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   cardTitleContainer: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 16,
//   },
//   cardTitle: { fontSize: 18, fontFamily: "Cairo-SemiBold", color: "#1f2937" },
//   itemCount: { fontSize: 14, fontFamily: "Cairo", color: "#6b7280" },
//   itemRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 12,
//     paddingBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f1f5f9",
//   },
//   itemDetails: { flex: 1, paddingRight: 8 },
//   itemName: {
//     fontSize: 15,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//     marginBottom: 4,
//   },
//   itemQuantity: { fontSize: 13, fontFamily: "Cairo", color: "#6b7280" },
//   itemPrice: { fontSize: 15, fontFamily: "Cairo-Bold", color: "#374151" },
//   summaryContainer: {
//     marginTop: 16,
//     paddingTop: 16,
//     borderTopWidth: 1,
//     borderTopColor: "#e5e7eb",
//   },
//   divider: { height: 1, backgroundColor: "#e5e7eb", marginVertical: 12 },
//   securityCard: {
//     backgroundColor: "#f0fdf4",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 24,
//     borderWidth: 1,
//     borderColor: "#86efac",
//   },
//   securityHeader: {
//     flexDirection: "row",
//     alignItems: "center",
//     marginBottom: 12,
//     gap: 8,
//   },
//   securityTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#047857",
//   },
//   securityText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4B5563",
//     lineHeight: 22,
//   },
//   payButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 12,
//     padding: 18,
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 12,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//   },
//   payButtonDisabled: { opacity: 0.6 },
//   payButtonContent: { flexDirection: "row", alignItems: "center", gap: 10 },
//   payButtonText: { color: "white", fontSize: 16, fontFamily: "Cairo-Bold" },
//   modalBackground: {
//     flex: 1,
//     backgroundColor: "rgba(0, 0, 0, 0.5)",
//     justifyContent: "center",
//     alignItems: "center",
//   },
//   modalContainer: { flex: 1, backgroundColor: "#fff" },
//   modalContent: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "80%",
//     maxWidth: 300,
//   },
//   successModalContent: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "90%",
//     maxWidth: 350,
//   },
//   lottieAnimation: { width: 200, height: 200 },
//   failureModal: { borderColor: "#E53935", borderWidth: 2 },
//   modalTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   modalText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   modalButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 8,
//     paddingVertical: 12,
//     paddingHorizontal: 24,
//     marginTop: 24,
//   },
//   modalButtonText: { color: "white", fontSize: 16, fontFamily: "Cairo-Bold" },
//   webView: { flex: 1 },
//   webViewHeader: {
//     height: 56,
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     borderBottomWidth: 1,
//     borderBottomColor: "#E5E7EB",
//     backgroundColor: "#f9fafb",
//   },
//   webViewCloseButton: { padding: 8 },
//   webViewTitleContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 8,
//     flex: 1,
//     justifyContent: "center",
//     marginRight: 40,
//   },
//   webViewTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   loadingOverlay: {
//     position: "absolute",
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//     backgroundColor: "rgba(255,255,255,0.95)",
//     justifyContent: "center",
//     alignItems: "center",
//     zIndex: 1000,
//   },
//   loadingCard: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//     width: "80%",
//     maxWidth: 300,
//   },
//   loadingTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   loadingSubtext: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   errorValue: { fontSize: 14, fontFamily: "Cairo", color: "#DC2626" },
//   shippingFeeRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginVertical: 4,
//   },
//   shippingFeeValueContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     justifyContent: "flex-end",
//   },
//   summaryLabel: { fontSize: 14, fontFamily: "Cairo", color: "#4b5563" },
//   summaryValue: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
// });

/****************************************** */

// import React, { useState, useCallback, useEffect, useRef } from "react";
// import {
//   View,
//   Text,
//   ScrollView,
//   Alert,
//   ActivityIndicator,
//   StyleSheet,
//   Platform,
//   TouchableOpacity,
//   SafeAreaView,
//   BackHandler,
//   Modal,
//   StatusBar,
//   TextInput,
//   KeyboardAvoidingView,
// } from "react-native";
// import { router, useNavigation } from "expo-router";
// import { WebView } from "react-native-webview";
// import { useFocusEffect } from "@react-navigation/native";
// import {
//   Shield,
//   CreditCard,
//   ArrowLeft,
//   Lock,
//   ChevronLeft,
//   XCircle,
//   User,
//   Phone,
//   Mail,
//   MapPin,
// } from "lucide-react-native";
// import Toast from "react-native-toast-message";
// import NetInfo from "@react-native-community/netinfo";
// import * as SecureStore from "expo-secure-store";
// import useCartStore from "../../store/cartStore";
// import { OrderSummaryRow } from "../Components/OrderSummary";
// import useShippingFee from "../hooks/useShippingFee";
// import { useSafeAreaInsets } from "react-native-safe-area-context";
// import CryptoJS from "crypto-js";
// import LottieView from "lottie-react-native";
// import { useUserContext } from "../contexts/UserContext";

// // Environment Configuration
// const IS_PRODUCTION = process.env.EXPO_PUBLIC_ENV === "production";
// const PAYMENT_API_URL = IS_PRODUCTION
//   ? process.env.EXPO_PUBLIC_PAYMENT_API_URL_PRODUCTION
//   : process.env.EXPO_PUBLIC_PAYMENT_API_URL_SANDBOX;
// const MERCH_UID = IS_PRODUCTION
//   ? process.env.EXPO_PUBLIC_BOOKEEY_MERCHANT_ID_PROD
//   : process.env.EXPO_PUBLIC_BOOKEEY_MERCHANT_ID_TEST;
// const SECRET_KEY = IS_PRODUCTION
//   ? process.env.EXPO_PUBLIC_BOOKEEY_SECRET_KEY_PROD
//   : process.env.EXPO_PUBLIC_BOOKEEY_SECRET_KEY_TEST;
// const SUB_MERCH_UID = IS_PRODUCTION
//   ? process.env.EXPO_PUBLIC_BOOKEEY_SUBMERCHANT_ID_PROD
//   : process.env.EXPO_PUBLIC_BOOKEEY_SUBMERCHANT_ID_TEST;
// const SURL = IS_PRODUCTION
//   ? process.env.EXPO_PUBLIC_SUCCESS_URL_PROD
//   : process.env.EXPO_PUBLIC_SUCCESS_URL_TEST;
// const FURL = IS_PRODUCTION
//   ? process.env.EXPO_PUBLIC_FAILURE_URL_PROD
//   : process.env.EXPO_PUBLIC_FAILURE_URL_TEST;
// const FORM_DATA_KEY =
//   process.env.EXPO_PUBLIC_FORM_DATA_KEY || "user_checkout_info";
// const REQUEST_TIMEOUT =
//   Number(process.env.EXPO_PUBLIC_REQUEST_TIMEOUT) || 30000;

// const PaymentSuccessModal = ({ visible, onClose }) => {
//   const animationRef = useRef(null);

//   useEffect(() => {
//     if (visible && animationRef.current) animationRef.current.play();
//   }, [visible]);

//   return (
//     <Modal
//       visible={visible}
//       transparent={true}
//       animationType="fade"
//       onRequestClose={onClose}
//     >
//       <View style={styles.modalBackground}>
//         <View style={styles.successModalContent}>
//           <LottieView
//             ref={animationRef}
//             source={require("../../assets/lotties/payment-success.json")}
//             style={styles.lottieAnimation}
//             loop={false}
//             onAnimationFinish={onClose}
//           />
//           <Text style={styles.modalTitle}>Payment Successful!</Text>
//           <Text style={styles.modalText}>
//             Thank you for your purchase. Redirecting to cart...
//           </Text>
//         </View>
//       </View>
//     </Modal>
//   );
// };

// const PaymentLoadingOverlay = () => (
//   <View style={styles.loadingOverlay}>
//     <View style={styles.loadingCard}>
//       <ActivityIndicator size="large" color="#10B981" />
//       <Text style={styles.loadingTitle}>Processing Payment</Text>
//       <Text style={styles.loadingSubtext}>Please don't close this window</Text>
//     </View>
//   </View>
// );

// const REQUIRED_FIELDS = [
//   "firstName",
//   "lastName",
//   "phone",
//   "email",
//   "state",
//   "city",
//   "address",
// ];
// const PHONE_REGEX = /^\d{8,}$/;
// const EMAIL_REGEX = /\S+@\S+\.\S+/;

// const saveFormData = async (data) => {
//   try {
//     await SecureStore.setItemAsync(FORM_DATA_KEY, JSON.stringify(data));
//   } catch (error) {
//     console.error("Error saving form data:", error);
//   }
// };

// const loadFormData = async () => {
//   try {
//     const savedData = await SecureStore.getItemAsync(FORM_DATA_KEY);
//     return savedData ? JSON.parse(savedData) : null;
//   } catch (error) {
//     console.error("Error loading form data:", error);
//     return null;
//   }
// };

// export default function CheckoutPage() {
//   const insets = useSafeAreaInsets();
//   const navigation = useNavigation();
//   const { items, total, discountedTotal, appliedCoupon, clearCart } =
//     useCartStore();
//   const {
//     shippingFee,
//     loading: isLoadingShippingFee,
//     error: shippingFeeError,
//   } = useShippingFee();
//   const { userData } = useUserContext();

//   const [formData, setFormData] = useState({
//     firstName: "",
//     lastName: "",
//     phone: "",
//     email: "",
//     state: "",
//     city: "",
//     address: "",
//   });
//   const [formErrors, setFormErrors] = useState({});
//   const [isProcessing, setIsProcessing] = useState(false);
//   const [paymentError, setPaymentError] = useState(null);
//   const [showWebView, setShowWebView] = useState(false);
//   const [paymentUrl, setPaymentUrl] = useState(null);
//   const [isWebViewLoading, setIsWebViewLoading] = useState(true);
//   const [showSuccessModal, setShowSuccessModal] = useState(false);
//   const [showFailureModal, setShowFailureModal] = useState(false);
//   const [isOrderCreated, setIsOrderCreated] = useState(false);

//   useEffect(() => {
//     const loadSavedData = async () => {
//       const savedData = await loadFormData();
//       if (savedData) setFormData(savedData);
//       if (userData && !userData.isGuestMode) {
//         setFormData((prev) => ({
//           ...prev,
//           firstName: userData.firstName || "",
//           lastName: userData.lastName || "",
//           email: userData.email || "",
//           phone: userData.phone || "",
//         }));
//       }
//     };
//     loadSavedData();
//   }, [userData]);

//   useEffect(() => {
//     if (items.length === 0) router.replace("/(root)/Cart");
//   }, [items.length]);

//   const validateForm = () => {
//     const errors = {};
//     let isValid = true;

//     REQUIRED_FIELDS.forEach((field) => {
//       if (!formData[field].trim()) {
//         errors[field] = `${
//           field.charAt(0).toUpperCase() + field.slice(1)
//         } is required`;
//         isValid = false;
//       }
//     });

//     if (formData.email && !EMAIL_REGEX.test(formData.email)) {
//       errors.email = "Invalid email address";
//       isValid = false;
//     }

//     const cleanPhone = formData.phone.replace(/[^\d]/g, "");
//     if (formData.phone && !PHONE_REGEX.test(cleanPhone)) {
//       errors.phone = "Phone number must be at least 8 digits";
//       isValid = false;
//     }

//     setFormErrors(errors);
//     if (!isValid) {
//       Toast.show({
//         type: "error",
//         text1: "Form Validation Error",
//         text2: "Please fill in all required fields correctly",
//         position: "top",
//       });
//     }
//     return isValid;
//   };

//   const handleBackPress = useCallback(() => {
//     if (showWebView) {
//       Alert.alert(
//         "Cancel Payment?",
//         "Are you sure you want to cancel? This payment will not be processed.",
//         [
//           { text: "Continue Payment", style: "cancel" },
//           {
//             text: "Cancel Payment",
//             style: "destructive",
//             onPress: () => {
//               setShowWebView(false);
//               setPaymentUrl(null);
//               setShowFailureModal(true);
//             },
//           },
//         ]
//       );
//       return true;
//     }
//     router.push("/(root)/Cart");
//     return true;
//   }, [showWebView]);

//   useEffect(() => {
//     const backHandler = BackHandler.addEventListener(
//       "hardwareBackPress",
//       handleBackPress
//     );
//     return () => backHandler.remove();
//   }, [handleBackPress]);

//   useFocusEffect(
//     useCallback(() => {
//       navigation.setOptions({
//         gestureEnabled: !showWebView,
//         headerShown: false,
//       });
//     }, [showWebView])
//   );

//   const handlePaymentSuccess = async () => {
//     if (isOrderCreated) {
//       console.log("Order already created, skipping duplicate creation.");
//       return;
//     }
//     setIsOrderCreated(true);
//     console.log("Starting order creation process...");

//     try {
//       const orderId = `TX${new Date()
//         .toISOString()
//         .replace(/[^0-9]/g, "")
//         .slice(0, 14)}${Math.random().toString(36).slice(2, 6)}`;
//       const subtotal = total;
//       const discountAmount = appliedCoupon
//         ? appliedCoupon.type === "percentage"
//           ? (total * appliedCoupon.amount) / 100
//           : appliedCoupon.amount
//         : 0;
//       const orderTotal = (discountedTotal || total) + shippingFee;

//       const orderData = {
//         data: {
//           orderId,
//           OrderStatus: "Pending",
//           subtotal: Number(subtotal.toFixed(2)),
//           discountAmount: Number(discountAmount.toFixed(2)),
//           shippingFee: Number(shippingFee.toFixed(2)),
//           OrderTotal: Number(orderTotal.toFixed(2)),
//           OrderDetails: JSON.stringify(items),
//           shippingInfo: JSON.stringify({
//             state: formData.state,
//             city: formData.city,
//             address: formData.address,
//             phone: formData.phone,
//           }),
//           paymentStatus: "success",
//           paymentId: orderId,
//           isGuestOrder: userData?.isGuestMode || !userData,
//           guestInfo:
//             userData?.isGuestMode || !userData
//               ? JSON.stringify({
//                   firstName: formData.firstName,
//                   lastName: formData.lastName,
//                   email: formData.email,
//                   phone: formData.phone,
//                 })
//               : null,
//           auth: userData && !userData.isGuestMode ? userData.strapiId : null,
//         },
//       };

//       console.log("Order Data to Strapi:", JSON.stringify(orderData, null, 2));

//       const response = await fetch(
//         `${process.env.EXPO_PUBLIC_STRAPI_API_URL}/api/orders`,
//         {
//           method: "POST",
//           headers: {
//             "Content-Type": "application/json",
//             Authorization: `Bearer ${process.env.EXPO_PUBLIC_STRAPI_API_TOKEN_USER}`,
//           },
//           body: JSON.stringify(orderData),
//         }
//       );

//       if (!response.ok) {
//         const errorText = await response.text();
//         throw new Error(`Failed to create order in Strapi: ${errorText}`);
//       }

//       const responseData = await response.json();
//       console.log("Strapi Response:", JSON.stringify(responseData, null, 2));

//       await saveFormData(formData);
//       clearCart();
//       setShowWebView(false);
//       setPaymentUrl(null);
//       Toast.show({
//         type: "success",
//         text1: "Payment Successful",
//         text2: "Thank you for your purchase!",
//         position: "top",
//       });
//       setShowSuccessModal(true);
//       setTimeout(() => {
//         setShowSuccessModal(false);
//         router.push("/(root)/Cart");
//       }, 3000);
//     } catch (error) {
//       console.error("Error in payment success:", error);
//       setPaymentError("Failed to record order. Contact support.");
//       handlePaymentFailure();
//     }
//   };

//   const handlePaymentFailure = () => {
//     setShowWebView(false);
//     setPaymentUrl(null);
//     setShowFailureModal(true);
//   };

//   const handlePaymentError = (errorMessage) => {
//     setPaymentError(errorMessage);
//     setShowFailureModal(true);
//   };

//   const formatAmount = (amount) => Number(amount.toFixed(2)).toString();

//   const subtotal = total;
//   const discount = appliedCoupon
//     ? appliedCoupon.type === "percentage"
//       ? (total * appliedCoupon.amount) / 100
//       : appliedCoupon.amount
//     : 0;
//   const finalTotal = (discountedTotal || total) + shippingFee;

//   const handlePayment = async () => {
//     if (isProcessing || !validateForm()) return;

//     try {
//       const netInfo = await NetInfo.fetch();
//       if (!netInfo.isConnected)
//         throw new Error("No internet connection detected");

//       setIsProcessing(true);
//       setPaymentError(null);

//       const currentDate = new Date()
//         .toISOString()
//         .replace(/[^0-9]/g, "")
//         .slice(0, 14);
//       const randomSuffix = Math.random().toString(36).slice(2, 6);
//       const orderId = `TX${currentDate}${randomSuffix}`;
//       const fullName = `${formData.firstName} ${formData.lastName}`;
//       const cleanPhone = formData.phone.replace(/[^\d]/g, "");
//       const txnHDR = `${Date.now()}${Math.floor(Math.random() * 10000)}`;
//       const formattedAmount = formatAmount(finalTotal);

//       const sequence = `${MERCH_UID}|${orderId}|${SURL}|${FURL}|${formattedAmount}|GEN|${SECRET_KEY}|${txnHDR}`;
//       const hashMac = CryptoJS.SHA512(sequence).toString(CryptoJS.enc.Hex);

//       const payload = {
//         DBRqst: "PY_ECom",
//         Do_Appinfo: {
//           APPTyp: "MOB",
//           OS: Platform.OS === "ios" ? "iOS" : "Android",
//           DevcType: "",
//           APPID: "PG",
//           IPAddrs: "",
//           HsCode: "",
//           Country: "KW",
//           AppVer: "1.0",
//           UsrSessID: "",
//           MdlID: "Pay_Req",
//           APIVer: "2.1",
//         },
//         Do_PyrDtl: {
//           Pyr_MPhone: cleanPhone,
//           Pyr_Name: fullName,
//           ISDNCD: "965",
//         },
//         Do_MerchDtl: {
//           BKY_PRDENUM: "ECom",
//           MerchUID: MERCH_UID,
//           SURL: SURL,
//           FURL: FURL,
//         },
//         Do_TxnHdr: {
//           BKY_Txn_UID: "",
//           Merch_Txn_UID: orderId,
//           PayFor: "ECom",
//           PayMethod: "knet",
//           Txn_HDR: txnHDR,
//           hashMac: hashMac,
//         },
//         Do_TxnDtl: [{ SubMerchUID: SUB_MERCH_UID, Txn_AMT: formattedAmount }],
//       };

//       const headers = {
//         "Content-Type": "application/json",
//         Accept: "application/json",
//       };
//       const controller = new AbortController();
//       const timeoutId = setTimeout(() => controller.abort(), REQUEST_TIMEOUT);

//       console.log("Payment Payload:", JSON.stringify(payload, null, 2));

//       const response = await fetch(PAYMENT_API_URL, {
//         method: "POST",
//         headers,
//         body: JSON.stringify(payload),
//         signal: controller.signal,
//       });
//       clearTimeout(timeoutId);

//       if (!response.ok) {
//         const errorText = await response.text();
//         throw new Error(
//           `Payment service error: ${response.status} - ${errorText}`
//         );
//       }

//       const data = await response.json();
//       console.log("Payment Response:", JSON.stringify(data, null, 2));

//       if (data.ErrorMessage && data.ErrorMessage !== "Success")
//         throw new Error(`API Error: ${data.ErrorMessage}`);

//       const paymentUrl = data?.PayUrl;
//       if (!paymentUrl || !paymentUrl.startsWith("https://"))
//         throw new Error("Invalid or insecure payment URL received");

//       setPaymentUrl(paymentUrl);
//       setShowWebView(true);
//     } catch (error) {
//       let errorMessage = "Payment initiation failed";
//       if (error.name === "AbortError")
//         errorMessage = "Request timed out. Please try again.";
//       else if (error.message) errorMessage = error.message;
//       console.error("Payment Error:", error);
//       setPaymentError(errorMessage);
//       handlePaymentError(errorMessage);
//     } finally {
//       setIsProcessing(false);
//     }
//   };

//   if (items.length === 0) return null;

//   return (
//     <SafeAreaView style={[styles.safeArea, { paddingTop: insets.top }]}>
//       <KeyboardAvoidingView
//         behavior={Platform.OS === "ios" ? "padding" : "height"}
//         style={styles.container}
//       >
//         <StatusBar barStyle="dark-content" backgroundColor="#f9fafb" />
//         <View style={styles.header}>
//           <TouchableOpacity
//             onPress={handleBackPress}
//             style={styles.backButton}
//             hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//           >
//             <ChevronLeft color="#E53935" size={28} />
//           </TouchableOpacity>
//           <Text style={styles.headerTitle}>Secure Checkout</Text>
//         </View>

//         <ScrollView
//           style={styles.container}
//           contentContainerStyle={styles.contentContainer}
//           showsVerticalScrollIndicator={false}
//         >
//           <View style={styles.formContainer}>
//             <Text style={styles.formTitle}>Delivery Information</Text>
//             <Text style={styles.deliveryNote}>
//               Orders will be delivered within the next business day.
//             </Text>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>Personal Information</Text>
//               {[
//                 { field: "firstName", label: "First Name *", Icon: User },
//                 { field: "lastName", label: "Last Name *", Icon: User },
//                 { field: "email", label: "Email *", Icon: Mail },
//                 { field: "phone", label: "Phone Number *", Icon: Phone },
//               ].map(({ field, label, Icon }) => (
//                 <View key={field} style={styles.formField}>
//                   <View style={styles.inputLabelContainer}>
//                     <Icon size={16} color="#4b5563" />
//                     <Text style={styles.inputLabel}>{label}</Text>
//                   </View>
//                   <TextInput
//                     style={[
//                       styles.input,
//                       formErrors[field] && styles.inputError,
//                     ]}
//                     value={formData[field]}
//                     onChangeText={(text) =>
//                       setFormData((prev) => ({
//                         ...prev,
//                         [field]:
//                           field === "phone" ? text.replace(/[^\d]/g, "") : text,
//                       }))
//                     }
//                     placeholder={`Enter your ${field}`}
//                     keyboardType={
//                       field === "email"
//                         ? "email-address"
//                         : field === "phone"
//                         ? "phone-pad"
//                         : "default"
//                     }
//                     autoCapitalize={field === "email" ? "none" : "words"}
//                     maxLength={field === "phone" ? 15 : undefined}
//                   />
//                   {formErrors[field] && (
//                     <Text style={styles.errorText}>{formErrors[field]}</Text>
//                   )}
//                   {field === "phone" && !formErrors.phone && (
//                     <Text style={styles.helperText}>
//                       Enter your Kuwait mobile number (minimum 8 digits)
//                     </Text>
//                   )}
//                 </View>
//               ))}
//             </View>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>Delivery Address</Text>
//               {[
//                 { field: "state", label: "State *" },
//                 { field: "city", label: "City *" },
//                 {
//                   field: "address",
//                   label: "Delivery Address *",
//                   multiline: true,
//                 },
//               ].map(({ field, label, multiline }) => (
//                 <View key={field} style={styles.formField}>
//                   <View style={styles.inputLabelContainer}>
//                     <MapPin size={16} color="#4b5563" />
//                     <Text style={styles.inputLabel}>{label}</Text>
//                   </View>
//                   <TextInput
//                     style={[
//                       styles.input,
//                       formErrors[field] && styles.inputError,
//                     ]}
//                     value={formData[field]}
//                     onChangeText={(text) =>
//                       setFormData((prev) => ({ ...prev, [field]: text }))
//                     }
//                     placeholder={`Enter your ${field}`}
//                     multiline={multiline}
//                     numberOfLines={multiline ? 3 : 1}
//                   />
//                   {formErrors[field] && (
//                     <Text style={styles.errorText}>{formErrors[field]}</Text>
//                   )}
//                 </View>
//               ))}
//             </View>
//           </View>

//           <View style={styles.card}>
//             <View style={styles.cardTitleContainer}>
//               <Text style={styles.cardTitle}>Order Summary</Text>
//               <Text style={styles.itemCount}>{items.length} items</Text>
//             </View>
//             {items.map((item) => (
//               <View key={item.documentId} style={styles.itemRow}>
//                 <View style={styles.itemDetails}>
//                   <Text style={styles.itemName} numberOfLines={1}>
//                     {item.name}
//                   </Text>
//                   <Text style={styles.itemQuantity}>Qty: {item.quantity}</Text>
//                 </View>
//                 <Text style={styles.itemPrice}>
//                   {((item.salesPrice || item.price) * item.quantity).toFixed(2)}{" "}
//                   KWD
//                 </Text>
//               </View>
//             ))}

//             <View style={styles.summaryContainer}>
//               <OrderSummaryRow
//                 label="Subtotal"
//                 value={`${subtotal.toFixed(2)} KWD`}
//               />
//               {appliedCoupon && (
//                 <OrderSummaryRow
//                   label={`Discount (${appliedCoupon.code})`}
//                   value={`- ${discount.toFixed(2)} KWD`}
//                   isDiscount
//                 />
//               )}
//               <View style={styles.shippingFeeRow}>
//                 <Text style={styles.summaryLabel}>Shipping Fee</Text>
//                 <View style={styles.shippingFeeValueContainer}>
//                   {isLoadingShippingFee ? (
//                     <ActivityIndicator size="small" color="#10B981" />
//                   ) : shippingFeeError ? (
//                     <Text style={styles.errorValue}>Error loading fee</Text>
//                   ) : (
//                     <Text style={styles.summaryValue}>{`${shippingFee.toFixed(
//                       2
//                     )} KWD`}</Text>
//                   )}
//                 </View>
//               </View>
//               <View style={styles.divider} />
//               <OrderSummaryRow
//                 label="Total Amount"
//                 value={`${formatAmount(finalTotal)} KWD`}
//                 isTotal
//                 isLoading={isLoadingShippingFee}
//               />
//             </View>
//           </View>

//           <View style={styles.securityCard}>
//             <View style={styles.securityHeader}>
//               <Lock size={20} color="#10B981" />
//               <Text style={styles.securityTitle}>Secure Payment</Text>
//             </View>
//             <Text style={styles.securityText}>
//               • SSL encrypted payment processing • Verified by Bookeey Payment
//               Gateway • Your payment details are protected
//             </Text>
//           </View>

//           <TouchableOpacity
//             style={[
//               styles.payButton,
//               (isProcessing || isLoadingShippingFee) &&
//                 styles.payButtonDisabled,
//             ]}
//             onPress={handlePayment}
//             disabled={isProcessing || isLoadingShippingFee}
//           >
//             {isProcessing ? (
//               <ActivityIndicator color="white" size="small" />
//             ) : (
//               <View style={styles.payButtonContent}>
//                 <CreditCard size={20} color="white" />
//                 <Text style={styles.payButtonText}>
//                   Pay {formatAmount(finalTotal)} KWD
//                 </Text>
//               </View>
//             )}
//           </TouchableOpacity>
//           {paymentError && <Text style={styles.errorText}>{paymentError}</Text>}
//         </ScrollView>

//         <Modal
//           visible={showWebView}
//           animationType="slide"
//           onRequestClose={handleBackPress}
//         >
//           <SafeAreaView style={styles.modalContainer}>
//             <View style={styles.webViewHeader}>
//               <TouchableOpacity
//                 onPress={handleBackPress}
//                 style={styles.webViewCloseButton}
//                 hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//               >
//                 <ArrowLeft color="#E53935" size={24} />
//               </TouchableOpacity>
//               <View style={styles.webViewTitleContainer}>
//                 <Lock size={16} color="#10B981" />
//                 <Text style={styles.webViewTitle}>Secure Payment</Text>
//               </View>
//             </View>
//             {isWebViewLoading && <PaymentLoadingOverlay />}
//             {paymentUrl && (
//               <WebView
//                 source={{ uri: paymentUrl }}
//                 onNavigationStateChange={(navState) => {
//                   console.log("Navigation State:", navState.url);
//                   if (navState.url.includes(SURL) && !navState.loading) {
//                     handlePaymentSuccess();
//                   } else if (navState.url.includes(FURL) && !navState.loading) {
//                     handlePaymentFailure();
//                   }
//                 }}
//                 onLoadStart={() => setIsWebViewLoading(true)}
//                 onLoadEnd={() => setIsWebViewLoading(false)}
//                 onError={(syntheticEvent) =>
//                   handlePaymentError(syntheticEvent.nativeEvent.description)
//                 }
//                 onHttpError={() => handlePaymentError("Connection error")}
//                 style={styles.webView}
//                 incognito={true}
//                 cacheEnabled={false}
//                 domStorageEnabled={true}
//                 javaScriptEnabled={true}
//                 startInLoadingState={true}
//               />
//             )}
//           </SafeAreaView>
//         </Modal>

//         <PaymentSuccessModal
//           visible={showSuccessModal}
//           onClose={() => {
//             setShowSuccessModal(false);
//             router.push("/(root)/Cart");
//           }}
//         />

//         <Modal
//           visible={showFailureModal}
//           transparent={true}
//           animationType="fade"
//           onRequestClose={() => setShowFailureModal(false)}
//         >
//           <View style={styles.modalBackground}>
//             <View style={[styles.modalContent, styles.failureModal]}>
//               <XCircle size={48} color="#E53935" />
//               <Text style={styles.modalTitle}>Payment Failed</Text>
//               <Text style={styles.modalText}>
//                 {paymentError ||
//                   "Please try again or use a different payment method."}
//               </Text>
//               <TouchableOpacity
//                 style={styles.modalButton}
//                 onPress={() => setShowFailureModal(false)}
//               >
//                 <Text style={styles.modalButtonText}>Try Again</Text>
//               </TouchableOpacity>
//             </View>
//           </View>
//         </Modal>
//       </KeyboardAvoidingView>
//       <Toast />
//     </SafeAreaView>
//   );
// }

// // Styles remain unchanged
// const styles = StyleSheet.create({
//   safeArea: { flex: 1, backgroundColor: "#f9fafb" },
//   container: { flex: 1 },
//   contentContainer: { padding: 16, paddingBottom: 100 },
//   header: {
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     paddingVertical: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f0f0f0",
//     backgroundColor: "#f9fafb",
//   },
//   backButton: { padding: 4 },
//   headerTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#1f2937",
//     marginLeft: 16,
//   },
//   formContainer: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   section: { marginBottom: 24 },
//   sectionTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#e5e7eb",
//     paddingBottom: 4,
//   },
//   formTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 12,
//   },
//   formField: { marginBottom: 16 },
//   inputLabelContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 6,
//     marginBottom: 4,
//   },
//   inputLabel: { fontSize: 14, fontFamily: "Cairo-SemiBold", color: "#4b5563" },
//   input: {
//     borderWidth: 1,
//     borderColor: "#e5e7eb",
//     borderRadius: 8,
//     padding: 12,
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#1f2937",
//     backgroundColor: "#fafafa",
//   },
//   inputError: { borderColor: "#ef4444" },
//   errorText: {
//     color: "#ef4444",
//     fontSize: 12,
//     fontFamily: "Cairo",
//     marginTop: 4,
//   },
//   helperText: {
//     fontSize: 12,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//     marginTop: 4,
//   },
//   deliveryNote: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#10B981",
//     marginBottom: 16,
//     textAlign: "center",
//     backgroundColor: "#f0fdf4",
//     padding: 8,
//     borderRadius: 8,
//   },
//   card: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   cardTitleContainer: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 16,
//   },
//   cardTitle: { fontSize: 18, fontFamily: "Cairo-SemiBold", color: "#1f2937" },
//   itemCount: { fontSize: 14, fontFamily: "Cairo", color: "#6b7280" },
//   itemRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 12,
//     paddingBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f1f5f9",
//   },
//   itemDetails: { flex: 1, paddingRight: 8 },
//   itemName: {
//     fontSize: 15,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//     marginBottom: 4,
//   },
//   itemQuantity: { fontSize: 13, fontFamily: "Cairo", color: "#6b7280" },
//   itemPrice: { fontSize: 15, fontFamily: "Cairo-Bold", color: "#374151" },
//   summaryContainer: {
//     marginTop: 16,
//     paddingTop: 16,
//     borderTopWidth: 1,
//     borderTopColor: "#e5e7eb",
//   },
//   divider: { height: 1, backgroundColor: "#e5e7eb", marginVertical: 12 },
//   securityCard: {
//     backgroundColor: "#f0fdf4",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 24,
//     borderWidth: 1,
//     borderColor: "#86efac",
//   },
//   securityHeader: {
//     flexDirection: "row",
//     alignItems: "center",
//     marginBottom: 12,
//     gap: 8,
//   },
//   securityTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#047857",
//   },
//   securityText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4B5563",
//     lineHeight: 22,
//   },
//   payButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 12,
//     padding: 18,
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 12,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//   },
//   payButtonDisabled: { opacity: 0.6 },
//   payButtonContent: { flexDirection: "row", alignItems: "center", gap: 10 },
//   payButtonText: { color: "white", fontSize: 16, fontFamily: "Cairo-Bold" },
//   modalBackground: {
//     flex: 1,
//     backgroundColor: "rgba(0, 0, 0, 0.5)",
//     justifyContent: "center",
//     alignItems: "center",
//   },
//   modalContainer: { flex: 1, backgroundColor: "#fff" },
//   modalContent: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "80%",
//     maxWidth: 300,
//   },
//   successModalContent: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "90%",
//     maxWidth: 350,
//   },
//   lottieAnimation: { width: 200, height: 200 },
//   failureModal: { borderColor: "#E53935", borderWidth: 2 },
//   modalTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   modalText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   modalButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 8,
//     paddingVertical: 12,
//     paddingHorizontal: 24,
//     marginTop: 24,
//   },
//   modalButtonText: { color: "white", fontSize: 16, fontFamily: "Cairo-Bold" },
//   webView: { flex: 1 },
//   webViewHeader: {
//     height: 56,
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     borderBottomWidth: 1,
//     borderBottomColor: "#E5E7EB",
//     backgroundColor: "#f9fafb",
//   },
//   webViewCloseButton: { padding: 8 },
//   webViewTitleContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 8,
//     flex: 1,
//     justifyContent: "center",
//     marginRight: 40,
//   },
//   webViewTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   loadingOverlay: {
//     position: "absolute",
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//     backgroundColor: "rgba(255,255,255,0.95)",
//     justifyContent: "center",
//     alignItems: "center",
//     zIndex: 1000,
//   },
//   loadingCard: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//     width: "80%",
//     maxWidth: 300,
//   },
//   loadingTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   loadingSubtext: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   errorValue: { fontSize: 14, fontFamily: "Cairo", color: "#DC2626" },
//   shippingFeeRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginVertical: 4,
//   },
//   shippingFeeValueContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     justifyContent: "flex-end",
//   },
//   summaryLabel: { fontSize: 14, fontFamily: "Cairo", color: "#4b5563" },
//   summaryValue: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
// });

/*************************************/

// import React, { useState, useEffect, useRef, useCallback } from "react";
// import {
//   View,
//   Text,
//   ScrollView,
//   Alert,
//   ActivityIndicator,
//   StyleSheet,
//   Platform,
//   TouchableOpacity,
//   SafeAreaView,
//   Modal,
//   StatusBar,
//   TextInput,
//   KeyboardAvoidingView,
// } from "react-native";
// import { router, useNavigation } from "expo-router";
// import { WebView } from "react-native-webview";
// import { useFocusEffect } from "@react-navigation/native";
// import {
//   Shield,
//   CreditCard,
//   ArrowLeft,
//   Lock,
//   ChevronLeft,
//   XCircle,
//   User,
//   Phone,
//   Mail,
//   MapPin,
// } from "lucide-react-native";
// import Toast from "react-native-toast-message";
// import NetInfo from "@react-native-community/netinfo";
// import * as SecureStore from "expo-secure-store";
// import useCartStore from "../../store/cartStore";
// import { OrderSummaryRow } from "../Components/OrderSummary";
// import useShippingFee from "../hooks/useShippingFee";
// import { useSafeAreaInsets } from "react-native-safe-area-context";
// import LottieView from "lottie-react-native";
// import { useUserContext } from "../contexts/UserContext";
// import publicIP from "react-native-public-ip";

// // Environment Configuration
// const IS_PRODUCTION = process.env.EXPO_PUBLIC_ENV === "production";
// const STRAPI_API_URL = IS_PRODUCTION
//   ? process.env.EXPO_PUBLIC_STRAPI_API_URL_PROD
//   : "https://38b5-37-39-178-119.ngrok-free.app";
// const SURL = IS_PRODUCTION
//   ? process.env.EXPO_PUBLIC_SUCCESS_URL_PROD
//   : "https://38b5-37-39-178-119.ngrok-free.app/api/payments/success";
// const FURL = IS_PRODUCTION
//   ? process.env.EXPO_PUBLIC_FAILURE_URL_PROD
//   : "https://38b5-37-39-178-119.ngrok-free.app/api/payments/failure";
// const FORM_DATA_KEY =
//   process.env.EXPO_PUBLIC_FORM_DATA_KEY || "user_checkout_info";
// const REQUEST_TIMEOUT =
//   Number(process.env.EXPO_PUBLIC_REQUEST_TIMEOUT) || 30000;

// const PaymentSuccessModal = ({ visible, onClose, transactionId }) => {
//   const animationRef = useRef(null);

//   useEffect(() => {
//     if (visible && animationRef.current) animationRef.current.play();
//   }, [visible]);

//   return (
//     <Modal
//       visible={visible}
//       transparent={true}
//       animationType="fade"
//       onRequestClose={onClose}
//     >
//       <View style={styles.modalBackground}>
//         <View style={styles.successModalContent}>
//           <LottieView
//             ref={animationRef}
//             source={require("../../assets/lotties/payment-success.json")}
//             style={styles.lottieAnimation}
//             loop={false}
//             onAnimationFinish={onClose}
//           />
//           <Text style={styles.modalTitle}>Payment Successful!</Text>
//           <Text style={styles.modalText}>
//             Thank you for your purchase. Transaction ID: {transactionId}
//           </Text>
//           <TouchableOpacity style={styles.modalButton} onPress={onClose}>
//             <Text style={styles.modalButtonText}>Back to Cart</Text>
//           </TouchableOpacity>
//         </View>
//       </View>
//     </Modal>
//   );
// };

// const PaymentFailureModal = ({
//   visible,
//   onClose,
//   errorMessage,
//   transactionId,
// }) => (
//   <Modal
//     visible={visible}
//     transparent={true}
//     animationType="fade"
//     onRequestClose={onClose}
//   >
//     <View style={styles.modalBackground}>
//       <View style={[styles.modalContent, styles.failureModal]}>
//         <XCircle size={48} color="#E53935" />
//         <Text style={styles.modalTitle}>Payment Failed</Text>
//         <Text style={styles.modalText}>
//           {errorMessage || "An error occurred during payment."}
//           {transactionId && `\nTransaction ID: ${transactionId}`}
//         </Text>
//         <TouchableOpacity style={styles.modalButton} onPress={onClose}>
//           <Text style={styles.modalButtonText}>Try Again</Text>
//         </TouchableOpacity>
//       </View>
//     </View>
//   </Modal>
// );

// const PaymentLoadingOverlay = () => (
//   <View style={styles.loadingOverlay}>
//     <View style={styles.loadingCard}>
//       <ActivityIndicator size="large" color="#10B981" />
//       <Text style={styles.loadingTitle}>Processing Payment</Text>
//       <Text style={styles.loadingSubtext}>Please don't close this window</Text>
//     </View>
//   </View>
// );

// const REQUIRED_FIELDS = [
//   "firstName",
//   "lastName",
//   "phone",
//   "email",
//   "state",
//   "city",
//   "address",
// ];
// const PHONE_REGEX = /^\d{8,}$/;
// const EMAIL_REGEX = /\S+@\S+\.\S+/;

// const saveFormData = async (data) => {
//   try {
//     await SecureStore.setItemAsync(FORM_DATA_KEY, JSON.stringify(data));
//   } catch (error) {
//     console.error("Error saving form data:", error);
//   }
// };

// const loadFormData = async () => {
//   try {
//     const savedData = await SecureStore.getItemAsync(FORM_DATA_KEY);
//     return savedData ? JSON.parse(savedData) : null;
//   } catch (error) {
//     console.error("Error loading form data:", error);
//     return null;
//   }
// };

// export default function CheckoutPage() {
//   const insets = useSafeAreaInsets();
//   const navigation = useNavigation();
//   const { items, total, discountedTotal, appliedCoupon, clearCart } =
//     useCartStore();
//   const {
//     shippingFee,
//     loading: isLoadingShippingFee,
//     error: shippingFeeError,
//   } = useShippingFee();
//   const { userData } = useUserContext();

//   const [formData, setFormData] = useState({
//     firstName: "",
//     lastName: "",
//     phone: "",
//     email: "",
//     state: "",
//     city: "",
//     address: "",
//   });
//   const [formErrors, setFormErrors] = useState({});
//   const [isProcessing, setIsProcessing] = useState(false);
//   const [paymentError, setPaymentError] = useState(null);
//   const [showWebView, setShowWebView] = useState(false);
//   const [paymentUrl, setPaymentUrl] = useState(null);
//   const [isWebViewLoading, setIsWebViewLoading] = useState(true);
//   const [showSuccessModal, setShowSuccessModal] = useState(false);
//   const [showFailureModal, setShowFailureModal] = useState(false);
//   const [transactionId, setTransactionId] = useState(null);
//   const [isOrderCreated, setIsOrderCreated] = useState(false);
//   const [ipAddress, setIpAddress] = useState("");

//   useEffect(() => {
//     const loadSavedData = async () => {
//       const savedData = await loadFormData();
//       if (savedData) setFormData(savedData);
//       if (userData && !userData.isGuestMode) {
//         setFormData((prev) => ({
//           ...prev,
//           firstName: userData.firstName || "",
//           lastName: userData.lastName || "",
//           email: userData.email || "",
//           phone: userData.phone || "",
//         }));
//       }
//     };
//     loadSavedData();
//   }, [userData]);

//   useEffect(() => {
//     if (items.length === 0) router.replace("/(root)/Cart");
//   }, [items.length]);

//   useEffect(() => {
//     const fetchIp = async () => {
//       try {
//         const ip = await publicIP();
//         setIpAddress(ip || "192.168.8.125"); // Fallback to local IP if public IP fails
//       } catch (error) {
//         console.error("Error fetching IP:", error);
//         setIpAddress("192.168.8.125"); // Use your local IP as fallback
//       }
//     };
//     fetchIp();
//   }, []);

//   const validateForm = () => {
//     const errors = {};
//     let isValid = true;

//     REQUIRED_FIELDS.forEach((field) => {
//       if (!formData[field].trim()) {
//         errors[field] = `${
//           field.charAt(0).toUpperCase() + field.slice(1)
//         } is required`;
//         isValid = false;
//       }
//     });

//     if (formData.email && !EMAIL_REGEX.test(formData.email)) {
//       errors.email = "Invalid email address";
//       isValid = false;
//     }

//     const cleanPhone = formData.phone.replace(/[^\d]/g, "");
//     if (formData.phone && !PHONE_REGEX.test(cleanPhone)) {
//       errors.phone = "Phone number must be at least 8 digits";
//       isValid = false;
//     }

//     setFormErrors(errors);
//     if (!isValid) {
//       Toast.show({
//         type: "error",
//         text1: "Form Validation Error",
//         text2: "Please fill in all required fields correctly",
//         position: "top",
//       });
//     }
//     return isValid;
//   };

//   const handleBackPress = useCallback(() => {
//     if (showWebView) {
//       Alert.alert(
//         "Cancel Payment?",
//         "Are you sure you want to cancel? This payment will not be processed.",
//         [
//           { text: "Continue Payment", style: "cancel" },
//           {
//             text: "Cancel Payment",
//             style: "destructive",
//             onPress: () => {
//               setShowWebView(false);
//               setPaymentUrl(null);
//               setShowFailureModal(true);
//             },
//           },
//         ]
//       );
//       return true;
//     }
//     router.push("/(root)/Cart");
//     return true;
//   }, [showWebView]);

//   useEffect(() => {
//     const backHandler = BackHandler.addEventListener(
//       "hardwareBackPress",
//       handleBackPress
//     );
//     return () => backHandler.remove();
//   }, [handleBackPress]);

//   useFocusEffect(
//     useCallback(() => {
//       navigation.setOptions({
//         gestureEnabled: !showWebView,
//         headerShown: false,
//       });
//     }, [showWebView])
//   );

//   const handlePaymentSuccess = async (txnId) => {
//     if (isOrderCreated) return;
//     setIsOrderCreated(true);
//     setTransactionId(txnId);

//     try {
//       const orderId = `TX${new Date()
//         .toISOString()
//         .replace(/[^0-9]/g, "")
//         .slice(0, 14)}${Math.random().toString(36).slice(2, 6)}`;
//       const subtotal = total;
//       const discountAmount = appliedCoupon
//         ? appliedCoupon.type === "percentage"
//           ? (total * appliedCoupon.amount) / 100
//           : appliedCoupon.amount
//         : 0;
//       const orderTotal = (discountedTotal || total) + shippingFee;

//       const orderData = {
//         data: {
//           orderId,
//           OrderStatus: "Pending",
//           subtotal: Number(subtotal.toFixed(2)),
//           discountAmount: Number(discountAmount.toFixed(2)),
//           shippingFee: Number(shippingFee.toFixed(2)),
//           OrderTotal: Number(orderTotal.toFixed(2)),
//           OrderDetails: JSON.stringify(items),
//           shippingInfo: JSON.stringify({
//             state: formData.state,
//             city: formData.city,
//             address: formData.address,
//             phone: formData.phone,
//           }),
//           paymentStatus: "success",
//           paymentId: orderId,
//           isGuestOrder: userData?.isGuestMode || !userData,
//           guestInfo:
//             userData?.isGuestMode || !userData
//               ? JSON.stringify({
//                   firstName: formData.firstName,
//                   lastName: formData.lastName,
//                   email: formData.email,
//                   phone: formData.phone,
//                 })
//               : null,
//           auth: userData && !userData.isGuestMode ? userData.strapiId : null,
//         },
//       };

//       const response = await fetch(`${STRAPI_API_URL}/api/orders`, {
//         method: "POST",
//         headers: {
//           "Content-Type": "application/json",
//           Authorization: `Bearer ${process.env.EXPO_PUBLIC_STRAPI_API_TOKEN_USER}`,
//         },
//         body: JSON.stringify(orderData),
//       });

//       if (!response.ok) {
//         const errorText = await response.text();
//         throw new Error(`Failed to create order in Strapi: ${errorText}`);
//       }

//       await saveFormData(formData);
//       clearCart();
//       setShowWebView(false);
//       setPaymentUrl(null);
//       Toast.show({
//         type: "success",
//         text1: "Payment Successful",
//         text2: "Thank you for your purchase!",
//         position: "top",
//       });
//       setShowSuccessModal(true);
//     } catch (error) {
//       console.error("Error in payment success:", error);
//       setPaymentError("Failed to record order. Contact support.");
//       handlePaymentFailure("Order recording failed", txnId);
//     }
//   };

//   const handlePaymentFailure = (errorMessage, txnId) => {
//     setShowWebView(false);
//     setPaymentUrl(null);
//     setTransactionId(txnId);
//     setPaymentError(errorMessage || "Payment failed. Please try again.");
//     setShowFailureModal(true);
//   };

//   const handlePaymentError = (errorMessage) => {
//     setPaymentError(errorMessage);
//     setShowFailureModal(true);
//   };

//   const formatAmount = (amount) => Number(amount.toFixed(2)).toString();

//   const subtotal = total;
//   const discount = appliedCoupon
//     ? appliedCoupon.type === "percentage"
//       ? (total * appliedCoupon.amount) / 100
//       : appliedCoupon.amount
//     : 0;
//   const finalTotal = (discountedTotal || total) + shippingFee;

//   const handlePayment = async () => {
//     if (isProcessing || !validateForm()) return;

//     try {
//       const netInfo = await NetInfo.fetch();
//       if (!netInfo.isConnected)
//         throw new Error("No internet connection detected");

//       setIsProcessing(true);
//       setPaymentError(null);

//       const customerInfo = {
//         name: `${formData.firstName} ${formData.lastName}`,
//         phone: formData.phone,
//         platform: Platform.OS,
//       };

//       const response = await fetch(`${STRAPI_API_URL}/api/payments/initiate`, {
//         method: "POST",
//         headers: { "Content-Type": "application/json" },
//         body: JSON.stringify({
//           amount: finalTotal,
//           customerInfo,
//           ipAddress,
//         }),
//         timeout: REQUEST_TIMEOUT,
//       });

//       if (!response.ok) {
//         const errorText = await response.text();
//         throw new Error(
//           `Payment initiation error: ${response.status} - ${errorText}`
//         );
//       }

//       const data = await response.json();
//       const paymentUrl = data.paymentUrl;

//       if (!paymentUrl || !paymentUrl.startsWith("https://"))
//         throw new Error("Invalid or insecure payment URL received");

//       setPaymentUrl(paymentUrl);
//       setShowWebView(true);

//       // Periodic status check after 60 seconds
//       setTimeout(() => {
//         if (showWebView) checkPaymentStatus(data.merchantTxnId);
//       }, 60000);
//     } catch (error) {
//       let errorMessage = "Payment initiation failed";
//       if (error.name === "AbortError")
//         errorMessage = "Request timed out. Please try again.";
//       else if (error.message) errorMessage = error.message;
//       console.error("Payment Error:", error);
//       setPaymentError(errorMessage);
//       handlePaymentError(errorMessage);
//     } finally {
//       setIsProcessing(false);
//     }
//   };

//   const checkPaymentStatus = async (merchantTxnId) => {
//     try {
//       const response = await fetch(
//         `${STRAPI_API_URL}/api/payments/verify/${merchantTxnId}`
//       );
//       const data = await response.json();
//       if (data.finalStatus === "success") {
//         handlePaymentSuccess(data.txnId);
//       } else if (
//         data.finalStatus === "failed" ||
//         data.finalStatus === "cancelled"
//       ) {
//         handlePaymentFailure(data.errorMessage || "Payment failed", data.txnId);
//       }
//     } catch (error) {
//       console.error("Error checking payment status:", error);
//       handlePaymentFailure("Status check failed", null);
//     }
//   };

//   if (items.length === 0) return null;

//   return (
//     <SafeAreaView style={[styles.safeArea, { paddingTop: insets.top }]}>
//       <KeyboardAvoidingView
//         behavior={Platform.OS === "ios" ? "padding" : "height"}
//         style={styles.container}
//       >
//         <StatusBar barStyle="dark-content" backgroundColor="#f9fafb" />
//         <View style={styles.header}>
//           <TouchableOpacity
//             onPress={handleBackPress}
//             style={styles.backButton}
//             hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//           >
//             <ChevronLeft color="#E53935" size={28} />
//           </TouchableOpacity>
//           <Text style={styles.headerTitle}>Secure Checkout</Text>
//         </View>

//         <ScrollView
//           style={styles.container}
//           contentContainerStyle={styles.contentContainer}
//           showsVerticalScrollIndicator={false}
//         >
//           <View style={styles.formContainer}>
//             <Text style={styles.formTitle}>Delivery Information</Text>
//             <Text style={styles.deliveryNote}>
//               Orders will be delivered within the next business day.
//             </Text>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>Personal Information</Text>
//               {[
//                 { field: "firstName", label: "First Name *", Icon: User },
//                 { field: "lastName", label: "Last Name *", Icon: User },
//                 { field: "email", label: "Email *", Icon: Mail },
//                 { field: "phone", label: "Phone Number *", Icon: Phone },
//               ].map(({ field, label, Icon }) => (
//                 <View key={field} style={styles.formField}>
//                   <View style={styles.inputLabelContainer}>
//                     <Icon size={16} color="#4b5563" />
//                     <Text style={styles.inputLabel}>{label}</Text>
//                   </View>
//                   <TextInput
//                     style={[
//                       styles.input,
//                       formErrors[field] && styles.inputError,
//                     ]}
//                     value={formData[field]}
//                     onChangeText={(text) =>
//                       setFormData((prev) => ({
//                         ...prev,
//                         [field]:
//                           field === "phone" ? text.replace(/[^\d]/g, "") : text,
//                       }))
//                     }
//                     placeholder={`Enter your ${field}`}
//                     keyboardType={
//                       field === "email"
//                         ? "email-address"
//                         : field === "phone"
//                         ? "phone-pad"
//                         : "default"
//                     }
//                     autoCapitalize={field === "email" ? "none" : "words"}
//                     maxLength={field === "phone" ? 15 : undefined}
//                   />
//                   {formErrors[field] && (
//                     <Text style={styles.errorText}>{formErrors[field]}</Text>
//                   )}
//                   {field === "phone" && !formErrors.phone && (
//                     <Text style={styles.helperText}>
//                       Enter your Kuwait mobile number (minimum 8 digits)
//                     </Text>
//                   )}
//                 </View>
//               ))}
//             </View>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>Delivery Address</Text>
//               {[
//                 { field: "state", label: "State *" },
//                 { field: "city", label: "City *" },
//                 {
//                   field: "address",
//                   label: "Delivery Address *",
//                   multiline: true,
//                 },
//               ].map(({ field, label, multiline }) => (
//                 <View key={field} style={styles.formField}>
//                   <View style={styles.inputLabelContainer}>
//                     <MapPin size={16} color="#4b5563" />
//                     <Text style={styles.inputLabel}>{label}</Text>
//                   </View>
//                   <TextInput
//                     style={[
//                       styles.input,
//                       formErrors[field] && styles.inputError,
//                     ]}
//                     value={formData[field]}
//                     onChangeText={(text) =>
//                       setFormData((prev) => ({ ...prev, [field]: text }))
//                     }
//                     placeholder={`Enter your ${field}`}
//                     multiline={multiline}
//                     numberOfLines={multiline ? 3 : 1}
//                   />
//                   {formErrors[field] && (
//                     <Text style={styles.errorText}>{formErrors[field]}</Text>
//                   )}
//                 </View>
//               ))}
//             </View>
//           </View>

//           <View style={styles.card}>
//             <View style={styles.cardTitleContainer}>
//               <Text style={styles.cardTitle}>Order Summary</Text>
//               <Text style={styles.itemCount}>{items.length} items</Text>
//             </View>
//             {items.map((item) => (
//               <View key={item.documentId} style={styles.itemRow}>
//                 <View style={styles.itemDetails}>
//                   <Text style={styles.itemName} numberOfLines={1}>
//                     {item.name}
//                   </Text>
//                   <Text style={styles.itemQuantity}>Qty: {item.quantity}</Text>
//                 </View>
//                 <Text style={styles.itemPrice}>
//                   {((item.salesPrice || item.price) * item.quantity).toFixed(2)}{" "}
//                   KWD
//                 </Text>
//               </View>
//             ))}

//             <View style={styles.summaryContainer}>
//               <OrderSummaryRow
//                 label="Subtotal"
//                 value={`${subtotal.toFixed(2)} KWD`}
//               />
//               {appliedCoupon && (
//                 <OrderSummaryRow
//                   label={`Discount (${appliedCoupon.code})`}
//                   value={`- ${discount.toFixed(2)} KWD`}
//                   isDiscount
//                 />
//               )}
//               <View style={styles.shippingFeeRow}>
//                 <Text style={styles.summaryLabel}>Shipping Fee</Text>
//                 <View style={styles.shippingFeeValueContainer}>
//                   {isLoadingShippingFee ? (
//                     <ActivityIndicator size="small" color="#10B981" />
//                   ) : shippingFeeError ? (
//                     <Text style={styles.errorValue}>Error loading fee</Text>
//                   ) : (
//                     <Text style={styles.summaryValue}>{`${shippingFee.toFixed(
//                       2
//                     )} KWD`}</Text>
//                   )}
//                 </View>
//               </View>
//               <View style={styles.divider} />
//               <OrderSummaryRow
//                 label="Total Amount"
//                 value={`${formatAmount(finalTotal)} KWD`}
//                 isTotal
//                 isLoading={isLoadingShippingFee}
//               />
//             </View>
//           </View>

//           <View style={styles.securityCard}>
//             <View style={styles.securityHeader}>
//               <Lock size={20} color="#10B981" />
//               <Text style={styles.securityTitle}>Secure Payment</Text>
//             </View>
//             <Text style={styles.securityText}>
//               • SSL encrypted payment processing • Verified by Bookeey Payment
//               Gateway • Your payment details are protected
//             </Text>
//           </View>

//           <TouchableOpacity
//             style={[
//               styles.payButton,
//               (isProcessing || isLoadingShippingFee) &&
//                 styles.payButtonDisabled,
//             ]}
//             onPress={handlePayment}
//             disabled={isProcessing || isLoadingShippingFee}
//           >
//             {isProcessing ? (
//               <ActivityIndicator color="white" size="small" />
//             ) : (
//               <View style={styles.payButtonContent}>
//                 <CreditCard size={20} color="white" />
//                 <Text style={styles.payButtonText}>
//                   Pay {formatAmount(finalTotal)} KWD
//                 </Text>
//               </View>
//             )}
//           </TouchableOpacity>
//           {paymentError && <Text style={styles.errorText}>{paymentError}</Text>}
//         </ScrollView>

//         <Modal
//           visible={showWebView}
//           animationType="slide"
//           onRequestClose={handleBackPress}
//         >
//           <SafeAreaView style={styles.modalContainer}>
//             <View style={styles.webViewHeader}>
//               <TouchableOpacity
//                 onPress={handleBackPress}
//                 style={styles.webViewCloseButton}
//                 hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//               >
//                 <ArrowLeft color="#E53935" size={24} />
//               </TouchableOpacity>
//               <View style={styles.webViewTitleContainer}>
//                 <Lock size={16} color="#10B981" />
//                 <Text style={styles.webViewTitle}>Secure Payment</Text>
//               </View>
//             </View>
//             {isWebViewLoading && <PaymentLoadingOverlay />}
//             {paymentUrl && (
//               <WebView
//                 source={{ uri: paymentUrl }}
//                 onNavigationStateChange={(navState) => {
//                   if (navState.url.includes(SURL) && !navState.loading) {
//                     const params = new URLSearchParams(
//                       navState.url.split("?")[1]
//                     );
//                     const txnId = params.get("txnId");
//                     handlePaymentSuccess(txnId);
//                   } else if (navState.url.includes(FURL) && !navState.loading) {
//                     const params = new URLSearchParams(
//                       navState.url.split("?")[1]
//                     );
//                     const errorMessage = params.get("errorMessage");
//                     const txnId = params.get("txnId");
//                     handlePaymentFailure(errorMessage, txnId);
//                   }
//                 }}
//                 onLoadStart={() => setIsWebViewLoading(true)}
//                 onLoadEnd={() => setIsWebViewLoading(false)}
//                 onError={(syntheticEvent) =>
//                   handlePaymentError(syntheticEvent.nativeEvent.description)
//                 }
//                 onHttpError={() => handlePaymentError("Connection error")}
//                 style={styles.webView}
//                 incognito={true}
//                 cacheEnabled={false}
//                 domStorageEnabled={true}
//                 javaScriptEnabled={true}
//                 startInLoadingState={true}
//               />
//             )}
//           </SafeAreaView>
//         </Modal>

//         <PaymentSuccessModal
//           visible={showSuccessModal}
//           onClose={() => {
//             setShowSuccessModal(false);
//             router.push("/(root)/Cart");
//           }}
//           transactionId={transactionId}
//         />
//         <PaymentFailureModal
//           visible={showFailureModal}
//           onClose={() => setShowFailureModal(false)}
//           errorMessage={paymentError}
//           transactionId={transactionId}
//         />
//       </KeyboardAvoidingView>
//       <Toast />
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: { flex: 1, backgroundColor: "#f9fafb" },
//   container: { flex: 1 },
//   contentContainer: { padding: 16, paddingBottom: 100 },
//   header: {
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     paddingVertical: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f0f0f0",
//     backgroundColor: "#f9fafb",
//   },
//   backButton: { padding: 4 },
//   headerTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#1f2937",
//     marginLeft: 16,
//   },
//   formContainer: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   section: { marginBottom: 24 },
//   sectionTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#e5e7eb",
//     paddingBottom: 4,
//   },
//   formTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 12,
//   },
//   formField: { marginBottom: 16 },
//   inputLabelContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 6,
//     marginBottom: 4,
//   },
//   inputLabel: { fontSize: 14, fontFamily: "Cairo-SemiBold", color: "#4b5563" },
//   input: {
//     borderWidth: 1,
//     borderColor: "#e5e7eb",
//     borderRadius: 8,
//     padding: 12,
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#1f2937",
//     backgroundColor: "#fafafa",
//   },
//   inputError: { borderColor: "#ef4444" },
//   errorText: {
//     color: "#ef4444",
//     fontSize: 12,
//     fontFamily: "Cairo",
//     marginTop: 4,
//   },
//   helperText: {
//     fontSize: 12,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//     marginTop: 4,
//   },
//   deliveryNote: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#10B981",
//     marginBottom: 16,
//     textAlign: "center",
//     backgroundColor: "#f0fdf4",
//     padding: 8,
//     borderRadius: 8,
//   },
//   card: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   cardTitleContainer: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 16,
//   },
//   cardTitle: { fontSize: 18, fontFamily: "Cairo-SemiBold", color: "#1f2937" },
//   itemCount: { fontSize: 14, fontFamily: "Cairo", color: "#6b7280" },
//   itemRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 12,
//     paddingBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f1f5f9",
//   },
//   itemDetails: { flex: 1, paddingRight: 8 },
//   itemName: {
//     fontSize: 15,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//     marginBottom: 4,
//   },
//   itemQuantity: { fontSize: 13, fontFamily: "Cairo", color: "#6b7280" },
//   itemPrice: { fontSize: 15, fontFamily: "Cairo-Bold", color: "#374151" },
//   summaryContainer: {
//     marginTop: 16,
//     paddingTop: 16,
//     borderTopWidth: 1,
//     borderTopColor: "#e5e7eb",
//   },
//   divider: { height: 1, backgroundColor: "#e5e7eb", marginVertical: 12 },
//   securityCard: {
//     backgroundColor: "#f0fdf4",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 24,
//     borderWidth: 1,
//     borderColor: "#86efac",
//   },
//   securityHeader: {
//     flexDirection: "row",
//     alignItems: "center",
//     marginBottom: 12,
//     gap: 8,
//   },
//   securityTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#047857",
//   },
//   securityText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4B5563",
//     lineHeight: 22,
//   },
//   payButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 12,
//     padding: 18,
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 12,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//   },
//   payButtonDisabled: { opacity: 0.6 },
//   payButtonContent: { flexDirection: "row", alignItems: "center", gap: 10 },
//   payButtonText: { color: "white", fontSize: 16, fontFamily: "Cairo-Bold" },
//   modalBackground: {
//     flex: 1,
//     backgroundColor: "rgba(0, 0, 0, 0.5)",
//     justifyContent: "center",
//     alignItems: "center",
//   },
//   modalContainer: { flex: 1, backgroundColor: "#fff" },
//   modalContent: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "80%",
//     maxWidth: 300,
//   },
//   successModalContent: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "90%",
//     maxWidth: 350,
//   },
//   lottieAnimation: { width: 200, height: 200 },
//   failureModal: { borderColor: "#E53935", borderWidth: 2 },
//   modalTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   modalText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   modalButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 8,
//     paddingVertical: 12,
//     paddingHorizontal: 24,
//     marginTop: 24,
//   },
//   modalButtonText: { color: "white", fontSize: 16, fontFamily: "Cairo-Bold" },
//   webView: { flex: 1 },
//   webViewHeader: {
//     height: 56,
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     borderBottomWidth: 1,
//     borderBottomColor: "#E5E7EB",
//     backgroundColor: "#f9fafb",
//   },
//   webViewCloseButton: { padding: 8 },
//   webViewTitleContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 8,
//     flex: 1,
//     justifyContent: "center",
//     marginRight: 40,
//   },
//   webViewTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   loadingOverlay: {
//     position: "absolute",
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//     backgroundColor: "rgba(255,255,255,0.95)",
//     justifyContent: "center",
//     alignItems: "center",
//     zIndex: 1000,
//   },
//   loadingCard: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//     width: "80%",
//     maxWidth: 300,
//   },
//   loadingTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   loadingSubtext: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   errorValue: { fontSize: 14, fontFamily: "Cairo", color: "#DC2626" },
//   shippingFeeRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginVertical: 4,
//   },
//   shippingFeeValueContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     justifyContent: "flex-end",
//   },
//   summaryLabel: { fontSize: 14, fontFamily: "Cairo", color: "#4b5563" },
//   summaryValue: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
// });

/****************************************/

// import React, { useState, useEffect, useRef, useCallback } from "react";
// import {
//   View,
//   Text,
//   ScrollView,
//   Alert,
//   ActivityIndicator,
//   StyleSheet,
//   Platform,
//   TouchableOpacity,
//   SafeAreaView,
//   Modal,
//   StatusBar,
//   TextInput,
//   KeyboardAvoidingView,
//   BackHandler,
// } from "react-native";
// import { router, useNavigation } from "expo-router";
// import { WebView } from "react-native-webview";
// import { useFocusEffect } from "@react-navigation/native";
// import {
//   Shield,
//   CreditCard,
//   ArrowLeft,
//   Lock,
//   ChevronLeft,
//   XCircle,
//   User,
//   Phone,
//   Mail,
//   MapPin,
// } from "lucide-react-native";
// import Toast from "react-native-toast-message";
// import NetInfo from "@react-native-community/netinfo";
// import * as SecureStore from "expo-secure-store";
// import useCartStore from "../../store/cartStore";
// import { OrderSummaryRow } from "../Components/OrderSummary";
// import useShippingFee from "../hooks/useShippingFee";
// import { useSafeAreaInsets } from "react-native-safe-area-context";
// import LottieView from "lottie-react-native";
// import { useUserContext } from "../contexts/UserContext";
// import publicIP from "react-native-public-ip";

// const IS_PRODUCTION = process.env.EXPO_PUBLIC_ENV === "production";
// const STRAPI_API_URL = IS_PRODUCTION
//   ? process.env.EXPO_PUBLIC_STRAPI_API_URL_PROD
//   : "https://38b5-37-39-178-119.ngrok-free.app";
// const SURL = IS_PRODUCTION
//   ? process.env.EXPO_PUBLIC_SUCCESS_URL_PROD
//   : "https://38b5-37-39-178-119.ngrok-free.app/api/payments/success";
// const FURL = IS_PRODUCTION
//   ? process.env.EXPO_PUBLIC_FAILURE_URL_PROD
//   : "https://38b5-37-39-178-119.ngrok-free.app/api/payments/failure";
// const FORM_DATA_KEY =
//   process.env.EXPO_PUBLIC_FORM_DATA_KEY || "user_checkout_info";
// const REQUEST_TIMEOUT =
//   Number(process.env.EXPO_PUBLIC_REQUEST_TIMEOUT) || 30000;

// const PaymentSuccessModal: React.FC<{
//   visible: boolean;
//   onClose: () => void;
//   transactionId: string | null;
// }> = ({ visible, onClose, transactionId }) => {
//   const animationRef = useRef<LottieView>(null);

//   useEffect(() => {
//     if (visible && animationRef.current) animationRef.current.play();
//   }, [visible]);

//   return (
//     <Modal
//       visible={visible}
//       transparent={true}
//       animationType="fade"
//       onRequestClose={onClose}
//     >
//       <View style={styles.modalBackground}>
//         <View style={styles.successModalContent}>
//           <LottieView
//             ref={animationRef}
//             source={require("../../assets/lotties/payment-success.json")}
//             style={styles.lottieAnimation}
//             loop={false}
//             onAnimationFinish={onClose}
//           />
//           <Text style={styles.modalTitle}>Payment Successful!</Text>
//           <Text style={styles.modalText}>
//             Thank you for your purchase. Transaction ID: {transactionId}
//           </Text>
//           <TouchableOpacity style={styles.modalButton} onPress={onClose}>
//             <Text style={styles.modalButtonText}>Back to Cart</Text>
//           </TouchableOpacity>
//         </View>
//       </View>
//     </Modal>
//   );
// };

// const PaymentFailureModal: React.FC<{
//   visible: boolean;
//   onClose: () => void;
//   errorMessage: string | null;
//   transactionId: string | null;
// }> = ({ visible, onClose, errorMessage, transactionId }) => (
//   <Modal
//     visible={visible}
//     transparent={true}
//     animationType="fade"
//     onRequestClose={onClose}
//   >
//     <View style={styles.modalBackground}>
//       <View style={[styles.modalContent, styles.failureModal]}>
//         <XCircle size={48} color="#E53935" />
//         <Text style={styles.modalTitle}>Payment Failed</Text>
//         <Text style={styles.modalText}>
//           {errorMessage || "An error occurred during payment."}
//           {transactionId && `\nTransaction ID: ${transactionId}`}
//         </Text>
//         <TouchableOpacity style={styles.modalButton} onPress={onClose}>
//           <Text style={styles.modalButtonText}>Try Again</Text>
//         </TouchableOpacity>
//       </View>
//     </View>
//   </Modal>
// );

// const PaymentLoadingOverlay: React.FC = () => (
//   <View style={styles.loadingOverlay}>
//     <View style={styles.loadingCard}>
//       <ActivityIndicator size="large" color="#10B981" />
//       <Text style={styles.loadingTitle}>Processing Payment</Text>
//       <Text style={styles.loadingSubtext}>Please don't close this window</Text>
//     </View>
//   </View>
// );

// const REQUIRED_FIELDS = [
//   "firstName",
//   "lastName",
//   "phone",
//   "email",
//   "state",
//   "city",
//   "address",
// ];
// const PHONE_REGEX = /^\d{8,}$/;
// const EMAIL_REGEX = /\S+@\S+\.\S+/;

// const saveFormData = async (data: any) => {
//   await SecureStore.setItemAsync(FORM_DATA_KEY, JSON.stringify(data));
// };

// const loadFormData = async () => {
//   const savedData = await SecureStore.getItemAsync(FORM_DATA_KEY);
//   return savedData ? JSON.parse(savedData) : null;
// };

// export default function CheckoutPage() {
//   const insets = useSafeAreaInsets();
//   const navigation = useNavigation();
//   const { items, total, discountedTotal, appliedCoupon, clearCart } =
//     useCartStore();
//   const {
//     shippingFee,
//     loading: isLoadingShippingFee,
//     error: shippingFeeError,
//   } = useShippingFee();
//   const { userData } = useUserContext();

//   const [formData, setFormData] = useState({
//     firstName: "",
//     lastName: "",
//     phone: "",
//     email: "",
//     state: "",
//     city: "",
//     address: "",
//   });
//   const [formErrors, setFormErrors] = useState<Record<string, string>>({});
//   const [isProcessing, setIsProcessing] = useState(false);
//   const [paymentError, setPaymentError] = useState<string | null>(null);
//   const [showWebView, setShowWebView] = useState(false);
//   const [paymentUrl, setPaymentUrl] = useState<string | null>(null);
//   const [isWebViewLoading, setIsWebViewLoading] = useState(true);
//   const [showSuccessModal, setShowSuccessModal] = useState(false);
//   const [showFailureModal, setShowFailureModal] = useState(false);
//   const [transactionId, setTransactionId] = useState<string | null>(null);
//   const [isOrderCreated, setIsOrderCreated] = useState(false);
//   const [ipAddress, setIpAddress] = useState("");

//   useEffect(() => {
//     const loadSavedData = async () => {
//       const savedData = await loadFormData();
//       if (savedData) setFormData(savedData);
//       if (userData && !userData.isGuestMode) {
//         setFormData((prev) => ({
//           ...prev,
//           firstName: userData.firstName || "",
//           lastName: userData.lastName || "",
//           email: userData.email || "",
//           phone: userData.phone || "",
//         }));
//       }
//     };
//     loadSavedData();
//   }, [userData]);

//   useEffect(() => {
//     if (items.length === 0) router.replace("/(root)/Cart");
//   }, [items.length]);

//   useEffect(() => {
//     const fetchIp = async () => {
//       const ip = await publicIP();
//       setIpAddress(ip || "192.168.8.125");
//     };
//     fetchIp();
//   }, []);

//   const validateForm = () => {
//     const errors: Record<string, string> = {};
//     let isValid = true;

//     REQUIRED_FIELDS.forEach((field) => {
//       if (!formData[field as keyof typeof formData].trim()) {
//         errors[field] = `${
//           field.charAt(0).toUpperCase() + field.slice(1)
//         } is required`;
//         isValid = false;
//       }
//     });

//     if (formData.email && !EMAIL_REGEX.test(formData.email)) {
//       errors.email = "Invalid email address";
//       isValid = false;
//     }

//     const cleanPhone = formData.phone.replace(/[^\d]/g, "");
//     if (formData.phone && !PHONE_REGEX.test(cleanPhone)) {
//       errors.phone = "Phone number must be at least 8 digits";
//       isValid = false;
//     }

//     setFormErrors(errors);
//     if (!isValid) {
//       Toast.show({
//         type: "error",
//         text1: "Form Validation Error",
//         text2: "Please fill in all required fields correctly",
//         position: "top",
//       });
//     }
//     return isValid;
//   };

//   const handleBackPress = useCallback(() => {
//     if (showWebView) {
//       Alert.alert(
//         "Cancel Payment?",
//         "Are you sure you want to cancel? This payment will not be processed.",
//         [
//           { text: "Continue Payment", style: "cancel" },
//           {
//             text: "Cancel Payment",
//             style: "destructive",
//             onPress: () => {
//               setShowWebView(false);
//               setPaymentUrl(null);
//               setShowFailureModal(true);
//             },
//           },
//         ]
//       );
//       return true;
//     }
//     router.push("/(root)/Cart");
//     return true;
//   }, [showWebView]);

//   useEffect(() => {
//     const backHandler = BackHandler.addEventListener(
//       "hardwareBackPress",
//       handleBackPress
//     );
//     return () => backHandler.remove();
//   }, [handleBackPress]);

//   useFocusEffect(
//     useCallback(() => {
//       navigation.setOptions({
//         gestureEnabled: !showWebView,
//         headerShown: false,
//       });
//     }, [showWebView])
//   );

//   const handlePaymentSuccess = async (txnId: string) => {
//     if (isOrderCreated) return;
//     setIsOrderCreated(true);
//     setTransactionId(txnId);

//     const orderId = `TX${new Date()
//       .toISOString()
//       .replace(/[^0-9]/g, "")
//       .slice(0, 14)}${Math.random().toString(36).slice(2, 6)}`;
//     const subtotal = total;
//     const discountAmount = appliedCoupon
//       ? appliedCoupon.type === "percentage"
//         ? (total * appliedCoupon.amount) / 100
//         : appliedCoupon.amount
//       : 0;
//     const orderTotal = (discountedTotal || total) + shippingFee;

//     const orderData = {
//       data: {
//         orderId,
//         OrderStatus: "Pending",
//         subtotal: Number(subtotal.toFixed(2)),
//         discountAmount: Number(discountAmount.toFixed(2)),
//         shippingFee: Number(shippingFee.toFixed(2)),
//         OrderTotal: Number(orderTotal.toFixed(2)),
//         OrderDetails: JSON.stringify(items),
//         shippingInfo: JSON.stringify({
//           state: formData.state,
//           city: formData.city,
//           address: formData.address,
//           phone: formData.phone,
//         }),
//         paymentStatus: "success",
//         paymentId: orderId,
//         isGuestOrder: userData?.isGuestMode || !userData,
//         guestInfo:
//           userData?.isGuestMode || !userData
//             ? JSON.stringify({
//                 firstName: formData.firstName,
//                 lastName: formData.lastName,
//                 email: formData.email,
//                 phone: formData.phone,
//               })
//             : null,
//         auth: userData && !userData.isGuestMode ? userData.strapiId : null,
//       },
//     };

//     const response = await fetch(`${STRAPI_API_URL}/api/orders`, {
//       method: "POST",
//       headers: {
//         "Content-Type": "application/json",
//         Authorization: `Bearer ${process.env.EXPO_PUBLIC_STRAPI_API_TOKEN_USER}`,
//       },
//       body: JSON.stringify(orderData),
//     });

//     if (!response.ok) {
//       const errorText = await response.text();
//       throw new Error(`Failed to create order in Strapi: ${errorText}`);
//     }

//     await saveFormData(formData);
//     clearCart();
//     setShowWebView(false);
//     setPaymentUrl(null);
//     Toast.show({
//       type: "success",
//       text1: "Payment Successful",
//       text2: "Thank you for your purchase!",
//       position: "top",
//     });
//     setShowSuccessModal(true);
//   };

//   const handlePaymentFailure = (
//     errorMessage: string | null,
//     txnId: string | null
//   ) => {
//     setShowWebView(false);
//     setPaymentUrl(null);
//     setTransactionId(txnId);
//     setPaymentError(errorMessage || "Payment failed. Please try again.");
//     setShowFailureModal(true);
//   };

//   const handlePaymentError = (errorMessage: string) => {
//     setPaymentError(errorMessage);
//     setShowFailureModal(true);
//   };

//   const formatAmount = (amount: number) => Number(amount.toFixed(2)).toString();

//   const subtotal = total;
//   const discount = appliedCoupon
//     ? appliedCoupon.type === "percentage"
//       ? (total * appliedCoupon.amount) / 100
//       : appliedCoupon.amount
//     : 0;
//   const finalTotal = (discountedTotal || total) + shippingFee;

//   const handlePayment = async () => {
//     if (isProcessing || !validateForm()) return;

//     try {
//       const netInfo = await NetInfo.fetch();
//       if (!netInfo.isConnected)
//         throw new Error("No internet connection detected");

//       setIsProcessing(true);
//       setPaymentError(null);

//       const customerInfo = {
//         name: `${formData.firstName} ${formData.lastName}`,
//         phone: formData.phone,
//         platform: Platform.OS,
//       };

//       const controller = new AbortController();
//       const timeoutId = setTimeout(() => controller.abort(), REQUEST_TIMEOUT);

//       const response = await fetch(`${STRAPI_API_URL}/api/payments/initiate`, {
//         method: "POST",
//         headers: { "Content-Type": "application/json" },
//         body: JSON.stringify({
//           amount: finalTotal,
//           customerInfo,
//           ipAddress,
//         }),
//         signal: controller.signal,
//       });

//       clearTimeout(timeoutId);

//       if (!response.ok) {
//         const errorText = await response.text();
//         throw new Error(
//           `Payment initiation error: ${response.status} - ${errorText}`
//         );
//       }

//       const data = await response.json();
//       const paymentUrl = data.paymentUrl;

//       if (!paymentUrl || !paymentUrl.startsWith("https://"))
//         throw new Error("Invalid or insecure payment URL received");

//       setPaymentUrl(paymentUrl);
//       setShowWebView(true);

//       setTimeout(() => {
//         if (showWebView) checkPaymentStatus(data.merchantTxnId);
//       }, 60000);
//     } catch (error: any) {
//       let errorMessage = "Payment initiation failed";
//       if (error.name === "AbortError")
//         errorMessage = "Request timed out. Please try again.";
//       else if (error.message) errorMessage = error.message;
//       console.error("Payment Error:", error);
//       setPaymentError(errorMessage);
//       handlePaymentError(errorMessage);
//     } finally {
//       setIsProcessing(false);
//     }
//   };

//   const checkPaymentStatus = async (merchantTxnId: string) => {
//     const response = await fetch(
//       `${STRAPI_API_URL}/api/payments/verify/${merchantTxnId}`
//     );
//     const data = await response.json();
//     if (data.finalStatus === "success") {
//       handlePaymentSuccess(data.txnId);
//     } else if (
//       data.finalStatus === "failed" ||
//       data.finalStatus === "cancelled"
//     ) {
//       handlePaymentFailure(data.errorMessage || "Payment failed", data.txnId);
//     }
//   };

//   if (items.length === 0) return null;

//   return (
//     <SafeAreaView style={[styles.safeArea, { paddingTop: insets.top }]}>
//       <KeyboardAvoidingView
//         behavior={Platform.OS === "ios" ? "padding" : "height"}
//         style={styles.container}
//       >
//         <StatusBar barStyle="dark-content" backgroundColor="#f9fafb" />
//         <View style={styles.header}>
//           <TouchableOpacity
//             onPress={handleBackPress}
//             style={styles.backButton}
//             hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//           >
//             <ChevronLeft color="#E53935" size={28} />
//           </TouchableOpacity>
//           <Text style={styles.headerTitle}>Secure Checkout</Text>
//         </View>

//         <ScrollView
//           style={styles.container}
//           contentContainerStyle={styles.contentContainer}
//           showsVerticalScrollIndicator={false}
//         >
//           <View style={styles.formContainer}>
//             <Text style={styles.formTitle}>Delivery Information</Text>
//             <Text style={styles.deliveryNote}>
//               Orders will be delivered within the next business day.
//             </Text>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>Personal Information</Text>
//               {[
//                 { field: "firstName", label: "First Name *", Icon: User },
//                 { field: "lastName", label: "Last Name *", Icon: User },
//                 { field: "email", label: "Email *", Icon: Mail },
//                 { field: "phone", label: "Phone Number *", Icon: Phone },
//               ].map(({ field, label, Icon }) => (
//                 <View key={field} style={styles.formField}>
//                   <View style={styles.inputLabelContainer}>
//                     <Icon size={16} color="#4b5563" />
//                     <Text style={styles.inputLabel}>{label}</Text>
//                   </View>
//                   <TextInput
//                     style={[
//                       styles.input,
//                       formErrors[field] && styles.inputError,
//                     ]}
//                     value={formData[field as keyof typeof formData]}
//                     onChangeText={(text) =>
//                       setFormData((prev) => ({
//                         ...prev,
//                         [field]:
//                           field === "phone" ? text.replace(/[^\d]/g, "") : text,
//                       }))
//                     }
//                     placeholder={`Enter your ${field}`}
//                     keyboardType={
//                       field === "email"
//                         ? "email-address"
//                         : field === "phone"
//                         ? "phone-pad"
//                         : "default"
//                     }
//                     autoCapitalize={field === "email" ? "none" : "words"}
//                     maxLength={field === "phone" ? 15 : undefined}
//                   />
//                   {formErrors[field] && (
//                     <Text style={styles.errorText}>{formErrors[field]}</Text>
//                   )}
//                   {field === "phone" && !formErrors.phone && (
//                     <Text style={styles.helperText}>
//                       Enter your Kuwait mobile number (minimum 8 digits)
//                     </Text>
//                   )}
//                 </View>
//               ))}
//             </View>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>Delivery Address</Text>
//               {[
//                 { field: "state", label: "State *" },
//                 { field: "city", label: "City *" },
//                 {
//                   field: "address",
//                   label: "Delivery Address *",
//                   multiline: true,
//                 },
//               ].map(({ field, label, multiline }) => (
//                 <View key={field} style={styles.formField}>
//                   <View style={styles.inputLabelContainer}>
//                     <MapPin size={16} color="#4b5563" />
//                     <Text style={styles.inputLabel}>{label}</Text>
//                   </View>
//                   <TextInput
//                     style={[
//                       styles.input,
//                       formErrors[field] && styles.inputError,
//                     ]}
//                     value={formData[field as keyof typeof formData]}
//                     onChangeText={(text) =>
//                       setFormData((prev) => ({ ...prev, [field]: text }))
//                     }
//                     placeholder={`Enter your ${field}`}
//                     multiline={multiline}
//                     numberOfLines={multiline ? 3 : 1}
//                   />
//                   {formErrors[field] && (
//                     <Text style={styles.errorText}>{formErrors[field]}</Text>
//                   )}
//                 </View>
//               ))}
//             </View>
//           </View>

//           <View style={styles.card}>
//             <View style={styles.cardTitleContainer}>
//               <Text style={styles.cardTitle}>Order Summary</Text>
//               <Text style={styles.itemCount}>{items.length} items</Text>
//             </View>
//             {items.map((item) => (
//               <View key={item.documentId} style={styles.itemRow}>
//                 <View style={styles.itemDetails}>
//                   <Text style={styles.itemName} numberOfLines={1}>
//                     {item.name}
//                   </Text>
//                   <Text style={styles.itemQuantity}>Qty: {item.quantity}</Text>
//                 </View>
//                 <Text style={styles.itemPrice}>
//                   {((item.salesPrice || item.price) * item.quantity).toFixed(2)}{" "}
//                   KWD
//                 </Text>
//               </View>
//             ))}

//             <View style={styles.summaryContainer}>
//               <OrderSummaryRow
//                 label="Subtotal"
//                 value={`${subtotal.toFixed(2)} KWD`}
//               />
//               {appliedCoupon && (
//                 <OrderSummaryRow
//                   label={`Discount (${appliedCoupon.code})`}
//                   value={`- ${discount.toFixed(2)} KWD`}
//                   isDiscount
//                 />
//               )}
//               <View style={styles.shippingFeeRow}>
//                 <Text style={styles.summaryLabel}>Shipping Fee</Text>
//                 <View style={styles.shippingFeeValueContainer}>
//                   {isLoadingShippingFee ? (
//                     <ActivityIndicator size="small" color="#10B981" />
//                   ) : shippingFeeError ? (
//                     <Text style={styles.errorValue}>Error loading fee</Text>
//                   ) : (
//                     <Text style={styles.summaryValue}>{`${shippingFee.toFixed(
//                       2
//                     )} KWD`}</Text>
//                   )}
//                 </View>
//               </View>
//               <View style={styles.divider} />
//               <OrderSummaryRow
//                 label="Total Amount"
//                 value={`${formatAmount(finalTotal)} KWD`}
//                 isTotal
//                 isLoading={isLoadingShippingFee}
//               />
//             </View>
//           </View>

//           <View style={styles.securityCard}>
//             <View style={styles.securityHeader}>
//               <Lock size={20} color="#10B981" />
//               <Text style={styles.securityTitle}>Secure Payment</Text>
//             </View>
//             <Text style={styles.securityText}>
//               • SSL encrypted payment processing • Verified by Bookeey Payment
//               Gateway • Your payment details are protected
//             </Text>
//           </View>

//           <TouchableOpacity
//             style={[
//               styles.payButton,
//               (isProcessing || isLoadingShippingFee) &&
//                 styles.payButtonDisabled,
//             ]}
//             onPress={handlePayment}
//             disabled={isProcessing || isLoadingShippingFee}
//           >
//             {isProcessing ? (
//               <ActivityIndicator color="white" size="small" />
//             ) : (
//               <View style={styles.payButtonContent}>
//                 <CreditCard size={20} color="white" />
//                 <Text style={styles.payButtonText}>
//                   Pay {formatAmount(finalTotal)} KWD
//                 </Text>
//               </View>
//             )}
//           </TouchableOpacity>
//           {paymentError && <Text style={styles.errorText}>{paymentError}</Text>}
//         </ScrollView>

//         <Modal
//           visible={showWebView}
//           animationType="slide"
//           onRequestClose={handleBackPress}
//         >
//           <SafeAreaView style={styles.modalContainer}>
//             <View style={styles.webViewHeader}>
//               <TouchableOpacity
//                 onPress={handleBackPress}
//                 style={styles.webViewCloseButton}
//                 hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//               >
//                 <ArrowLeft color="#E53935" size={24} />
//               </TouchableOpacity>
//               <View style={styles.webViewTitleContainer}>
//                 <Lock size={16} color="#10B981" />
//                 <Text style={styles.webViewTitle}>Secure Payment</Text>
//               </View>
//             </View>
//             {isWebViewLoading && <PaymentLoadingOverlay />}
//             {paymentUrl && (
//               <WebView
//                 source={{ uri: paymentUrl }}
//                 onNavigationStateChange={(navState) => {
//                   if (navState.url.includes(SURL) && !navState.loading) {
//                     const params = new URLSearchParams(
//                       navState.url.split("?")[1]
//                     );
//                     const txnId = params.get("txnId");
//                     handlePaymentSuccess(txnId!);
//                   } else if (navState.url.includes(FURL) && !navState.loading) {
//                     const params = new URLSearchParams(
//                       navState.url.split("?")[1]
//                     );
//                     const errorMessage = params.get("errorMessage");
//                     const txnId = params.get("txnId");
//                     handlePaymentFailure(errorMessage, txnId);
//                   }
//                 }}
//                 onLoadStart={() => setIsWebViewLoading(true)}
//                 onLoadEnd={() => setIsWebViewLoading(false)}
//                 onError={(syntheticEvent) =>
//                   handlePaymentError(syntheticEvent.nativeEvent.description)
//                 }
//                 onHttpError={() => handlePaymentError("Connection error")}
//                 style={styles.webView}
//                 incognito={true}
//                 cacheEnabled={false}
//                 domStorageEnabled={true}
//                 javaScriptEnabled={true}
//                 startInLoadingState={true}
//               />
//             )}
//           </SafeAreaView>
//         </Modal>

//         <PaymentSuccessModal
//           visible={showSuccessModal}
//           onClose={() => {
//             setShowSuccessModal(false);
//             router.push("/(root)/Cart");
//           }}
//           transactionId={transactionId}
//         />
//         <PaymentFailureModal
//           visible={showFailureModal}
//           onClose={() => setShowFailureModal(false)}
//           errorMessage={paymentError}
//           transactionId={transactionId}
//         />
//       </KeyboardAvoidingView>
//       <Toast />
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: { flex: 1, backgroundColor: "#f9fafb" },
//   container: { flex: 1 },
//   contentContainer: { padding: 16, paddingBottom: 100 },
//   header: {
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     paddingVertical: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f0f0f0",
//     backgroundColor: "#f9fafb",
//   },
//   backButton: { padding: 4 },
//   headerTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#1f2937",
//     marginLeft: 16,
//   },
//   formContainer: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   section: { marginBottom: 24 },
//   sectionTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#e5e7eb",
//     paddingBottom: 4,
//   },
//   formTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 12,
//   },
//   formField: { marginBottom: 16 },
//   inputLabelContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 6,
//     marginBottom: 4,
//   },
//   inputLabel: { fontSize: 14, fontFamily: "Cairo-SemiBold", color: "#4b5563" },
//   input: {
//     borderWidth: 1,
//     borderColor: "#e5e7eb",
//     borderRadius: 8,
//     padding: 12,
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#1f2937",
//     backgroundColor: "#fafafa",
//   },
//   inputError: { borderColor: "#ef4444" },
//   errorText: {
//     color: "#ef4444",
//     fontSize: 12,
//     fontFamily: "Cairo",
//     marginTop: 4,
//   },
//   helperText: {
//     fontSize: 12,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//     marginTop: 4,
//   },
//   deliveryNote: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#10B981",
//     marginBottom: 16,
//     textAlign: "center",
//     backgroundColor: "#f0fdf4",
//     padding: 8,
//     borderRadius: 8,
//   },
//   card: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   cardTitleContainer: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 16,
//   },
//   cardTitle: { fontSize: 18, fontFamily: "Cairo-SemiBold", color: "#1f2937" },
//   itemCount: { fontSize: 14, fontFamily: "Cairo", color: "#6b7280" },
//   itemRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 12,
//     paddingBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f1f5f9",
//   },
//   itemDetails: { flex: 1, paddingRight: 8 },
//   itemName: {
//     fontSize: 15,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//     marginBottom: 4,
//   },
//   itemQuantity: { fontSize: 13, fontFamily: "Cairo", color: "#6b7280" },
//   itemPrice: { fontSize: 15, fontFamily: "Cairo-Bold", color: "#374151" },
//   summaryContainer: {
//     marginTop: 16,
//     paddingTop: 16,
//     borderTopWidth: 1,
//     borderTopColor: "#e5e7eb",
//   },
//   divider: { height: 1, backgroundColor: "#e5e7eb", marginVertical: 12 },
//   securityCard: {
//     backgroundColor: "#f0fdf4",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 24,
//     borderWidth: 1,
//     borderColor: "#86efac",
//   },
//   securityHeader: {
//     flexDirection: "row",
//     alignItems: "center",
//     marginBottom: 12,
//     gap: 8,
//   },
//   securityTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#047857",
//   },
//   securityText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4B5563",
//     lineHeight: 22,
//   },
//   payButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 12,
//     padding: 18,
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 12,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//   },
//   payButtonDisabled: { opacity: 0.6 },
//   payButtonContent: { flexDirection: "row", alignItems: "center", gap: 10 },
//   payButtonText: { color: "white", fontSize: 16, fontFamily: "Cairo-Bold" },
//   modalBackground: {
//     flex: 1,
//     backgroundColor: "rgba(0, 0, 0, 0.5)",
//     justifyContent: "center",
//     alignItems: "center",
//   },
//   modalContainer: { flex: 1, backgroundColor: "#fff" },
//   modalContent: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "80%",
//     maxWidth: 300,
//   },
//   successModalContent: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "90%",
//     maxWidth: 350,
//   },
//   lottieAnimation: { width: 200, height: 200 },
//   failureModal: { borderColor: "#E53935", borderWidth: 2 },
//   modalTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   modalText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   modalButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 8,
//     paddingVertical: 12,
//     paddingHorizontal: 24,
//     marginTop: 24,
//   },
//   modalButtonText: { color: "white", fontSize: 16, fontFamily: "Cairo-Bold" },
//   webView: { flex: 1 },
//   webViewHeader: {
//     height: 56,
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     borderBottomWidth: 1,
//     borderBottomColor: "#E5E7EB",
//     backgroundColor: "#f9fafb",
//   },
//   webViewCloseButton: { padding: 8 },
//   webViewTitleContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 8,
//     flex: 1,
//     justifyContent: "center",
//     marginRight: 40,
//   },
//   webViewTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   loadingOverlay: {
//     position: "absolute",
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//     backgroundColor: "rgba(255,255,255,0.95)",
//     justifyContent: "center",
//     alignItems: "center",
//     zIndex: 1000,
//   },
//   loadingCard: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//     width: "80%",
//     maxWidth: 300,
//   },
//   loadingTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   loadingSubtext: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   errorValue: { fontSize: 14, fontFamily: "Cairo", color: "#DC2626" },
//   shippingFeeRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginVertical: 4,
//   },
//   shippingFeeValueContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     justifyContent: "flex-end",
//   },
//   summaryLabel: { fontSize: 14, fontFamily: "Cairo", color: "#4b5563" },
//   summaryValue: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
// });

/************************************ */

// import React, { useState, useEffect, useRef, useCallback } from "react";
// import {
//   View,
//   Text,
//   ScrollView,
//   Alert,
//   ActivityIndicator,
//   StyleSheet,
//   Platform,
//   TouchableOpacity,
//   SafeAreaView,
//   Modal,
//   StatusBar,
//   TextInput,
//   KeyboardAvoidingView,
//   BackHandler,
// } from "react-native";
// import { router, useNavigation } from "expo-router";
// import { WebView } from "react-native-webview";
// import { useFocusEffect } from "@react-navigation/native";
// import {
//   Shield,
//   CreditCard,
//   ArrowLeft,
//   Lock,
//   ChevronLeft,
//   XCircle,
//   User,
//   Phone,
//   Mail,
//   MapPin,
// } from "lucide-react-native";
// import Toast from "react-native-toast-message";
// import NetInfo from "@react-native-community/netinfo";
// import * as SecureStore from "expo-secure-store";
// import useCartStore from "../../store/cartStore";
// import { OrderSummaryRow } from "../Components/OrderSummary";
// import useShippingFee from "../hooks/useShippingFee";
// import { useSafeAreaInsets } from "react-native-safe-area-context";
// import LottieView from "lottie-react-native";
// import { useUserContext } from "../contexts/UserContext";
// import publicIP from "react-native-public-ip";

// const IS_PRODUCTION = process.env.EXPO_PUBLIC_ENV === "production";
// const STRAPI_API_URL = IS_PRODUCTION
//   ? process.env.EXPO_PUBLIC_STRAPI_API_URL_PROD
//   : "https://38b5-37-39-178-119.ngrok-free.app";
// const SURL = IS_PRODUCTION
//   ? process.env.EXPO_PUBLIC_SUCCESS_URL_PROD
//   : "https://38b5-37-39-178-119.ngrok-free.app/api/payments/success";
// const FURL = IS_PRODUCTION
//   ? process.env.EXPO_PUBLIC_FAILURE_URL_PROD
//   : "https://38b5-37-39-178-119.ngrok-free.app/api/payments/failure";
// const FORM_DATA_KEY =
//   process.env.EXPO_PUBLIC_FORM_DATA_KEY || "user_checkout_info";
// const REQUEST_TIMEOUT =
//   Number(process.env.EXPO_PUBLIC_REQUEST_TIMEOUT) || 30000;

// const PaymentSuccessModal: React.FC<{
//   visible: boolean;
//   onClose: () => void;
//   transactionId: string | null;
// }> = ({ visible, onClose }) => {
//   const animationRef = useRef<LottieView>(null);

//   useEffect(() => {
//     if (visible && animationRef.current) animationRef.current.play();
//   }, [visible]);

//   return (
//     <Modal
//       visible={visible}
//       transparent={true}
//       animationType="fade"
//       onRequestClose={onClose}
//     >
//       <View style={styles.modalBackground}>
//         <View style={styles.successModalContent}>
//           <LottieView
//             ref={animationRef}
//             source={require("../../assets/lotties/payment-success.json")}
//             style={styles.lottieAnimation}
//             loop={false}
//             onAnimationFinish={onClose}
//           />
//         </View>
//       </View>
//     </Modal>
//   );
// };

// const PaymentFailureModal: React.FC<{
//   visible: boolean;
//   onClose: () => void;
//   errorMessage: string | null;
//   transactionId: string | null;
// }> = ({ visible, onClose, errorMessage, transactionId }) => (
//   <Modal
//     visible={visible}
//     transparent={true}
//     animationType="fade"
//     onRequestClose={onClose}
//   >
//     <View style={styles.modalBackground}>
//       <View style={[styles.modalContent, styles.failureModal]}>
//         <XCircle size={48} color="#E53935" />
//         <Text style={styles.modalTitle}>Payment Failed</Text>
//         <Text style={styles.modalText}>
//           {errorMessage || "An error occurred during payment."}
//           {transactionId && `\nTransaction ID: ${transactionId}`}
//         </Text>
//         <TouchableOpacity style={styles.modalButton} onPress={onClose}>
//           <Text style={styles.modalButtonText}>Try Again</Text>
//         </TouchableOpacity>
//       </View>
//     </View>
//   </Modal>
// );

// const PaymentLoadingOverlay: React.FC = () => (
//   <View style={styles.loadingOverlay}>
//     <View style={styles.loadingCard}>
//       <ActivityIndicator size="large" color="#10B981" />
//       <Text style={styles.loadingTitle}>Processing Payment</Text>
//       <Text style={styles.loadingSubtext}>Please don't close this window</Text>
//     </View>
//   </View>
// );

// const REQUIRED_FIELDS = [
//   "firstName",
//   "lastName",
//   "phone",
//   "email",
//   "state",
//   "city",
//   "address",
// ];
// const PHONE_REGEX = /^\d{8,}$/;
// const EMAIL_REGEX = /\S+@\S+\.\S+/;

// const saveFormData = async (data: any) => {
//   await SecureStore.setItemAsync(FORM_DATA_KEY, JSON.stringify(data));
// };

// const loadFormData = async () => {
//   const savedData = await SecureStore.getItemAsync(FORM_DATA_KEY);
//   return savedData ? JSON.parse(savedData) : null;
// };

// export default function CheckoutPage() {
//   const insets = useSafeAreaInsets();
//   const navigation = useNavigation();
//   const { items, total, discountedTotal, appliedCoupon, clearCart } =
//     useCartStore();
//   const {
//     shippingFee,
//     loading: isLoadingShippingFee,
//     error: shippingFeeError,
//   } = useShippingFee();
//   const { userData } = useUserContext();

//   const [formData, setFormData] = useState({
//     firstName: "",
//     lastName: "",
//     phone: "",
//     email: "",
//     state: "",
//     city: "",
//     address: "",
//   });
//   const [formErrors, setFormErrors] = useState<Record<string, string>>({});
//   const [isProcessing, setIsProcessing] = useState(false);
//   const [paymentError, setPaymentError] = useState<string | null>(null);
//   const [showWebView, setShowWebView] = useState(false);
//   const [paymentUrl, setPaymentUrl] = useState<string | null>(null);
//   const [isWebViewLoading, setIsWebViewLoading] = useState(true);
//   const [showSuccessModal, setShowSuccessModal] = useState(false);
//   const [showFailureModal, setShowFailureModal] = useState(false);
//   const [transactionId, setTransactionId] = useState<string | null>(null);
//   const [isOrderCreated, setIsOrderCreated] = useState(false);
//   const [ipAddress, setIpAddress] = useState("");

//   useEffect(() => {
//     const loadSavedData = async () => {
//       const savedData = await loadFormData();
//       if (savedData) setFormData(savedData);
//       if (userData && !userData.isGuestMode) {
//         setFormData((prev) => ({
//           ...prev,
//           firstName: userData.firstName || "",
//           lastName: userData.lastName || "",
//           email: userData.email || "",
//           phone: userData.phone || "",
//         }));
//       }
//     };
//     loadSavedData();
//   }, [userData]);

//   useEffect(() => {
//     if (items.length === 0) router.replace("/(root)/Cart");
//   }, [items.length]);

//   useEffect(() => {
//     const fetchIp = async () => {
//       const ip = await publicIP();
//       setIpAddress(ip || "192.168.8.125");
//     };
//     fetchIp();
//   }, []);

//   const validateForm = () => {
//     const errors: Record<string, string> = {};
//     let isValid = true;

//     REQUIRED_FIELDS.forEach((field) => {
//       if (!formData[field as keyof typeof formData].trim()) {
//         errors[field] = `${
//           field.charAt(0).toUpperCase() + field.slice(1)
//         } is required`;
//         isValid = false;
//       }
//     });

//     if (formData.email && !EMAIL_REGEX.test(formData.email)) {
//       errors.email = "Invalid email address";
//       isValid = false;
//     }

//     const cleanPhone = formData.phone.replace(/[^\d]/g, "");
//     if (formData.phone && !PHONE_REGEX.test(cleanPhone)) {
//       errors.phone = "Phone number must be at least 8 digits";
//       isValid = false;
//     }

//     setFormErrors(errors);
//     if (!isValid) {
//       Toast.show({
//         type: "error",
//         text1: "Form Validation Error",
//         text2: "Please fill in all required fields correctly",
//         position: "top",
//       });
//     }
//     return isValid;
//   };

//   const handleBackPress = useCallback(() => {
//     if (showWebView) {
//       Alert.alert(
//         "Cancel Payment?",
//         "Are you sure you want to cancel? This payment will not be processed.",
//         [
//           { text: "Continue Payment", style: "cancel" },
//           {
//             text: "Cancel Payment",
//             style: "destructive",
//             onPress: () => {
//               setShowWebView(false);
//               setPaymentUrl(null);
//               setShowFailureModal(true);
//             },
//           },
//         ]
//       );
//       return true;
//     }
//     router.push("/(root)/Cart");
//     return true;
//   }, [showWebView]);

//   useEffect(() => {
//     const backHandler = BackHandler.addEventListener(
//       "hardwareBackPress",
//       handleBackPress
//     );
//     return () => backHandler.remove();
//   }, [handleBackPress]);

//   useFocusEffect(
//     useCallback(() => {
//       navigation.setOptions({
//         gestureEnabled: !showWebView,
//         headerShown: false,
//       });
//     }, [showWebView])
//   );

//   const handlePaymentSuccess = async (txnId: string) => {
//     if (isOrderCreated) return;
//     setIsOrderCreated(true);
//     setTransactionId(txnId);

//     const orderId = `TX${new Date()
//       .toISOString()
//       .replace(/[^0-9]/g, "")
//       .slice(0, 14)}${Math.random().toString(36).slice(2, 6)}`;
//     const subtotal = total;
//     const discountAmount = appliedCoupon
//       ? appliedCoupon.type === "percentage"
//         ? (total * appliedCoupon.amount) / 100
//         : appliedCoupon.amount
//       : 0;
//     const orderTotal = (discountedTotal || total) + shippingFee;

//     const orderData = {
//       data: {
//         orderId,
//         OrderStatus: "Pending",
//         subtotal: Number(subtotal.toFixed(2)),
//         discountAmount: Number(discountAmount.toFixed(2)),
//         shippingFee: Number(shippingFee.toFixed(2)),
//         OrderTotal: Number(orderTotal.toFixed(2)),
//         OrderDetails: JSON.stringify(items),
//         shippingInfo: JSON.stringify({
//           state: formData.state,
//           city: formData.city,
//           address: formData.address,
//           phone: formData.phone,
//         }),
//         paymentStatus: "success",
//         paymentId: orderId,
//         isGuestOrder: userData?.isGuestMode || !userData,
//         guestInfo:
//           userData?.isGuestMode || !userData
//             ? JSON.stringify({
//                 firstName: formData.firstName,
//                 lastName: formData.lastName,
//                 email: formData.email,
//                 phone: formData.phone,
//               })
//             : null,
//         auth: userData && !userData.isGuestMode ? userData.strapiId : null,
//       },
//     };

//     const response = await fetch(`${STRAPI_API_URL}/api/orders`, {
//       method: "POST",
//       headers: {
//         "Content-Type": "application/json",
//         Authorization: `Bearer ${process.env.EXPO_PUBLIC_STRAPI_API_TOKEN_USER}`,
//       },
//       body: JSON.stringify(orderData),
//     });

//     if (!response.ok) {
//       const errorText = await response.text();
//       throw new Error(`Failed to create order in Strapi: ${errorText}`);
//     }

//     await saveFormData(formData);
//     clearCart();
//     setShowWebView(false);
//     setPaymentUrl(null);
//     Toast.show({
//       type: "success",
//       text1: "Payment Successful",
//       text2: "Thank you for your purchase!",
//       position: "top",
//     });
//     setShowSuccessModal(true);
//   };

//   const handlePaymentFailure = (
//     errorMessage: string | null,
//     txnId: string | null
//   ) => {
//     setShowWebView(false);
//     setPaymentUrl(null);
//     setTransactionId(txnId);
//     setPaymentError(errorMessage || "Payment failed. Please try again.");
//     setShowFailureModal(true);
//   };

//   const handlePaymentError = (errorMessage: string) => {
//     setPaymentError(errorMessage);
//     setShowFailureModal(true);
//   };

//   const formatAmount = (amount: number) => Number(amount.toFixed(2)).toString();

//   const subtotal = total;
//   const discount = appliedCoupon
//     ? appliedCoupon.type === "percentage"
//       ? (total * appliedCoupon.amount) / 100
//       : appliedCoupon.amount
//     : 0;
//   const finalTotal = (discountedTotal || total) + shippingFee;

//   const handlePayment = async () => {
//     if (isProcessing || !validateForm()) return;

//     try {
//       const netInfo = await NetInfo.fetch();
//       if (!netInfo.isConnected)
//         throw new Error("No internet connection detected");

//       setIsProcessing(true);
//       setPaymentError(null);

//       const customerInfo = {
//         name: `${formData.firstName} ${formData.lastName}`,
//         phone: formData.phone,
//         platform: Platform.OS,
//       };

//       const controller = new AbortController();
//       const timeoutId = setTimeout(() => controller.abort(), REQUEST_TIMEOUT);

//       const response = await fetch(`${STRAPI_API_URL}/api/payments/initiate`, {
//         method: "POST",
//         headers: { "Content-Type": "application/json" },
//         body: JSON.stringify({
//           amount: finalTotal,
//           customerInfo,
//           ipAddress,
//         }),
//         signal: controller.signal,
//       });

//       clearTimeout(timeoutId);

//       if (!response.ok) {
//         const errorText = await response.text();
//         throw new Error(
//           `Payment initiation error: ${response.status} - ${errorText}`
//         );
//       }

//       const data = await response.json();
//       const paymentUrl = data.paymentUrl;

//       if (!paymentUrl || !paymentUrl.startsWith("https://"))
//         throw new Error("Invalid or insecure payment URL received");

//       setPaymentUrl(paymentUrl);
//       setShowWebView(true);

//       setTimeout(() => {
//         if (showWebView) checkPaymentStatus(data.merchantTxnId);
//       }, 60000);
//     } catch (error: any) {
//       let errorMessage = "Payment initiation failed";
//       if (error.name === "AbortError")
//         errorMessage = "Request timed out. Please try again.";
//       else if (error.message) errorMessage = error.message;
//       console.error("Payment Error:", error);
//       setPaymentError(errorMessage);
//       handlePaymentError(errorMessage);
//     } finally {
//       setIsProcessing(false);
//     }
//   };

//   const checkPaymentStatus = async (merchantTxnId: string) => {
//     const response = await fetch(
//       `${STRAPI_API_URL}/api/payments/verify/${merchantTxnId}`
//     );
//     const data = await response.json();
//     if (data.finalStatus === "success") {
//       handlePaymentSuccess(data.txnId);
//     } else if (
//       data.finalStatus === "failed" ||
//       data.finalStatus === "cancelled"
//     ) {
//       handlePaymentFailure(data.errorMessage || "Payment failed", data.txnId);
//     }
//   };

//   if (items.length === 0) return null;

//   return (
//     <SafeAreaView style={[styles.safeArea, { paddingTop: insets.top }]}>
//       <KeyboardAvoidingView
//         behavior={Platform.OS === "ios" ? "padding" : "height"}
//         style={styles.container}
//       >
//         <StatusBar barStyle="dark-content" backgroundColor="#f9fafb" />
//         <View style={styles.header}>
//           <TouchableOpacity
//             onPress={handleBackPress}
//             style={styles.backButton}
//             hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//           >
//             <ChevronLeft color="#E53935" size={28} />
//           </TouchableOpacity>
//           <Text style={styles.headerTitle}>Secure Checkout</Text>
//         </View>

//         <ScrollView
//           style={styles.container}
//           contentContainerStyle={styles.contentContainer}
//           showsVerticalScrollIndicator={false}
//         >
//           <View style={styles.formContainer}>
//             <Text style={styles.formTitle}>Delivery Information</Text>
//             <Text style={styles.deliveryNote}>
//               Orders will be delivered within the next business day.
//             </Text>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>Personal Information</Text>
//               {[
//                 { field: "firstName", label: "First Name *", Icon: User },
//                 { field: "lastName", label: "Last Name *", Icon: User },
//                 { field: "email", label: "Email *", Icon: Mail },
//                 { field: "phone", label: "Phone Number *", Icon: Phone },
//               ].map(({ field, label, Icon }) => (
//                 <View key={field} style={styles.formField}>
//                   <View style={styles.inputLabelContainer}>
//                     <Icon size={16} color="#4b5563" />
//                     <Text style={styles.inputLabel}>{label}</Text>
//                   </View>
//                   <TextInput
//                     style={[
//                       styles.input,
//                       formErrors[field] && styles.inputError,
//                     ]}
//                     value={formData[field as keyof typeof formData]}
//                     onChangeText={(text) =>
//                       setFormData((prev) => ({
//                         ...prev,
//                         [field]:
//                           field === "phone" ? text.replace(/[^\d]/g, "") : text,
//                       }))
//                     }
//                     placeholder={`Enter your ${field}`}
//                     keyboardType={
//                       field === "email"
//                         ? "email-address"
//                         : field === "phone"
//                         ? "phone-pad"
//                         : "default"
//                     }
//                     autoCapitalize={field === "email" ? "none" : "words"}
//                     maxLength={field === "phone" ? 15 : undefined}
//                   />
//                   {formErrors[field] && (
//                     <Text style={styles.errorText}>{formErrors[field]}</Text>
//                   )}
//                   {field === "phone" && !formErrors.phone && (
//                     <Text style={styles.helperText}>
//                       Enter your Kuwait mobile number (minimum 8 digits)
//                     </Text>
//                   )}
//                 </View>
//               ))}
//             </View>

//             <View style={styles.section}>
//               <Text style={styles.sectionTitle}>Delivery Address</Text>
//               {[
//                 { field: "state", label: "State *" },
//                 { field: "city", label: "City *" },
//                 {
//                   field: "address",
//                   label: "Delivery Address *",
//                   multiline: true,
//                 },
//               ].map(({ field, label, multiline }) => (
//                 <View key={field} style={styles.formField}>
//                   <View style={styles.inputLabelContainer}>
//                     <MapPin size={16} color="#4b5563" />
//                     <Text style={styles.inputLabel}>{label}</Text>
//                   </View>
//                   <TextInput
//                     style={[
//                       styles.input,
//                       formErrors[field] && styles.inputError,
//                     ]}
//                     value={formData[field as keyof typeof formData]}
//                     onChangeText={(text) =>
//                       setFormData((prev) => ({ ...prev, [field]: text }))
//                     }
//                     placeholder={`Enter your ${field}`}
//                     multiline={multiline}
//                     numberOfLines={multiline ? 3 : 1}
//                   />
//                   {formErrors[field] && (
//                     <Text style={styles.errorText}>{formErrors[field]}</Text>
//                   )}
//                 </View>
//               ))}
//             </View>
//           </View>

//           <View style={styles.card}>
//             <View style={styles.cardTitleContainer}>
//               <Text style={styles.cardTitle}>Order Summary</Text>
//               <Text style={styles.itemCount}>{items.length} items</Text>
//             </View>
//             {items.map((item) => (
//               <View key={item.documentId} style={styles.itemRow}>
//                 <View style={styles.itemDetails}>
//                   <Text style={styles.itemName} numberOfLines={1}>
//                     {item.name}
//                   </Text>
//                   <Text style={styles.itemQuantity}>Qty: {item.quantity}</Text>
//                 </View>
//                 <Text style={styles.itemPrice}>
//                   {((item.salesPrice || item.price) * item.quantity).toFixed(2)}{" "}
//                   KWD
//                 </Text>
//               </View>
//             ))}

//             <View style={styles.summaryContainer}>
//               <OrderSummaryRow
//                 label="Subtotal"
//                 value={`${subtotal.toFixed(2)} KWD`}
//               />
//               {appliedCoupon && (
//                 <OrderSummaryRow
//                   label={`Discount (${appliedCoupon.code})`}
//                   value={`- ${discount.toFixed(2)} KWD`}
//                   isDiscount
//                 />
//               )}
//               <View style={styles.shippingFeeRow}>
//                 <Text style={styles.summaryLabel}>Shipping Fee</Text>
//                 <View style={styles.shippingFeeValueContainer}>
//                   {isLoadingShippingFee ? (
//                     <ActivityIndicator size="small" color="#10B981" />
//                   ) : shippingFeeError ? (
//                     <Text style={styles.errorValue}>Error loading fee</Text>
//                   ) : (
//                     <Text style={styles.summaryValue}>{`${shippingFee.toFixed(
//                       2
//                     )} KWD`}</Text>
//                   )}
//                 </View>
//               </View>
//               <View style={styles.divider} />
//               <OrderSummaryRow
//                 label="Total Amount"
//                 value={`${formatAmount(finalTotal)} KWD`}
//                 isTotal
//                 isLoading={isLoadingShippingFee}
//               />
//             </View>
//           </View>

//           <View style={styles.securityCard}>
//             <View style={styles.securityHeader}>
//               <Lock size={20} color="#10B981" />
//               <Text style={styles.securityTitle}>Secure Payment</Text>
//             </View>
//             <Text style={styles.securityText}>
//               • SSL encrypted payment processing • Verified by Bookeey Payment
//               Gateway • Your payment details are protected
//             </Text>
//           </View>

//           <TouchableOpacity
//             style={[
//               styles.payButton,
//               (isProcessing || isLoadingShippingFee) &&
//                 styles.payButtonDisabled,
//             ]}
//             onPress={handlePayment}
//             disabled={isProcessing || isLoadingShippingFee}
//           >
//             {isProcessing ? (
//               <ActivityIndicator color="white" size="small" />
//             ) : (
//               <View style={styles.payButtonContent}>
//                 <CreditCard size={20} color="white" />
//                 <Text style={styles.payButtonText}>
//                   Pay {formatAmount(finalTotal)} KWD
//                 </Text>
//               </View>
//             )}
//           </TouchableOpacity>
//           {paymentError && <Text style={styles.errorText}>{paymentError}</Text>}
//         </ScrollView>

//         <Modal
//           visible={showWebView}
//           animationType="slide"
//           onRequestClose={handleBackPress}
//         >
//           <SafeAreaView style={styles.modalContainer}>
//             <View style={styles.webViewHeader}>
//               <TouchableOpacity
//                 onPress={handleBackPress}
//                 style={styles.webViewCloseButton}
//                 hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
//               >
//                 <ArrowLeft color="#E53935" size={24} />
//               </TouchableOpacity>
//               <View style={styles.webViewTitleContainer}>
//                 <Lock size={16} color="#10B981" />
//                 <Text style={styles.webViewTitle}>Secure Payment</Text>
//               </View>
//             </View>
//             {isWebViewLoading && <PaymentLoadingOverlay />}
//             {paymentUrl && (
//               <WebView
//                 source={{ uri: paymentUrl }}
//                 onNavigationStateChange={(navState) => {
//                   if (navState.url.includes(SURL) && !navState.loading) {
//                     const params = new URLSearchParams(
//                       navState.url.split("?")[1]
//                     );
//                     const txnId = params.get("txnId");
//                     handlePaymentSuccess(txnId!);
//                   } else if (navState.url.includes(FURL) && !navState.loading) {
//                     const params = new URLSearchParams(
//                       navState.url.split("?")[1]
//                     );
//                     const errorMessage = params.get("errorMessage");
//                     const txnId = params.get("txnId");
//                     handlePaymentFailure(errorMessage, txnId);
//                   }
//                 }}
//                 onLoadStart={() => setIsWebViewLoading(true)}
//                 onLoadEnd={() => setIsWebViewLoading(false)}
//                 onError={(syntheticEvent) =>
//                   handlePaymentError(syntheticEvent.nativeEvent.description)
//                 }
//                 onHttpError={() => handlePaymentError("Connection error")}
//                 style={styles.webView}
//                 incognito={true}
//                 cacheEnabled={false}
//                 domStorageEnabled={true}
//                 javaScriptEnabled={true}
//                 startInLoadingState={true}
//               />
//             )}
//           </SafeAreaView>
//         </Modal>

//         <PaymentSuccessModal
//           visible={showSuccessModal}
//           onClose={() => {
//             setShowSuccessModal(false);
//             router.push("/(root)/Cart");
//           }}
//           transactionId={transactionId}
//         />
//         <PaymentFailureModal
//           visible={showFailureModal}
//           onClose={() => setShowFailureModal(false)}
//           errorMessage={paymentError}
//           transactionId={transactionId}
//         />
//       </KeyboardAvoidingView>
//       <Toast />
//     </SafeAreaView>
//   );
// }

// const styles = StyleSheet.create({
//   safeArea: { flex: 1, backgroundColor: "#f9fafb" },
//   container: { flex: 1 },
//   contentContainer: { padding: 16, paddingBottom: 100 },
//   header: {
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     paddingVertical: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f0f0f0",
//     backgroundColor: "#f9fafb",
//   },
//   backButton: { padding: 4 },
//   headerTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#1f2937",
//     marginLeft: 16,
//   },
//   formContainer: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   section: { marginBottom: 24 },
//   sectionTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#e5e7eb",
//     paddingBottom: 4,
//   },
//   formTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#1f2937",
//     marginBottom: 12,
//   },
//   formField: { marginBottom: 16 },
//   inputLabelContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 6,
//     marginBottom: 4,
//   },
//   inputLabel: { fontSize: 14, fontFamily: "Cairo-SemiBold", color: "#4b5563" },
//   input: {
//     borderWidth: 1,
//     borderColor: "#e5e7eb",
//     borderRadius: 8,
//     padding: 12,
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#1f2937",
//     backgroundColor: "#fafafa",
//   },
//   inputError: { borderColor: "#ef4444" },
//   errorText: {
//     color: "#ef4444",
//     fontSize: 12,
//     fontFamily: "Cairo",
//     marginTop: 4,
//   },
//   helperText: {
//     fontSize: 12,
//     fontFamily: "Cairo",
//     color: "#6b7280",
//     marginTop: 4,
//   },
//   deliveryNote: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#10B981",
//     marginBottom: 16,
//     textAlign: "center",
//     backgroundColor: "#f0fdf4",
//     padding: 8,
//     borderRadius: 8,
//   },
//   card: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 16,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.08,
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   cardTitleContainer: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 16,
//   },
//   cardTitle: { fontSize: 18, fontFamily: "Cairo-SemiBold", color: "#1f2937" },
//   itemCount: { fontSize: 14, fontFamily: "Cairo", color: "#6b7280" },
//   itemRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 12,
//     paddingBottom: 12,
//     borderBottomWidth: 1,
//     borderBottomColor: "#f1f5f9",
//   },
//   itemDetails: { flex: 1, paddingRight: 8 },
//   itemName: {
//     fontSize: 15,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//     marginBottom: 4,
//   },
//   itemQuantity: { fontSize: 13, fontFamily: "Cairo", color: "#6b7280" },
//   itemPrice: { fontSize: 15, fontFamily: "Cairo-Bold", color: "#374151" },
//   summaryContainer: {
//     marginTop: 16,
//     paddingTop: 16,
//     borderTopWidth: 1,
//     borderTopColor: "#e5e7eb",
//   },
//   divider: { height: 1, backgroundColor: "#e5e7eb", marginVertical: 12 },
//   securityCard: {
//     backgroundColor: "#f0fdf4",
//     borderRadius: 16,
//     padding: 16,
//     marginBottom: 24,
//     borderWidth: 1,
//     borderColor: "#86efac",
//   },
//   securityHeader: {
//     flexDirection: "row",
//     alignItems: "center",
//     marginBottom: 12,
//     gap: 8,
//   },
//   securityTitle: {
//     fontSize: 16,
//     fontFamily: "Cairo-SemiBold",
//     color: "#047857",
//   },
//   securityText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#4B5563",
//     lineHeight: 22,
//   },
//   payButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 12,
//     padding: 18,
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 12,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//   },
//   payButtonDisabled: { opacity: 0.6 },
//   payButtonContent: { flexDirection: "row", alignItems: "center", gap: 10 },
//   payButtonText: { color: "white", fontSize: 16, fontFamily: "Cairo-Bold" },
//   modalBackground: {
//     flex: 1,
//     backgroundColor: "rgba(0, 0, 0, 0.5)",
//     justifyContent: "center",
//     alignItems: "center",
//   },
//   modalContainer: { flex: 1, backgroundColor: "#fff" },
//   modalContent: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "80%",
//     maxWidth: 300,
//   },
//   successModalContent: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     width: "90%",
//     maxWidth: 350,
//   },
//   lottieAnimation: { width: 200, height: 200 },
//   failureModal: { borderColor: "#E53935", borderWidth: 2 },
//   modalTitle: {
//     fontSize: 20,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   modalText: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   modalButton: {
//     backgroundColor: "#E53935",
//     borderRadius: 8,
//     paddingVertical: 12,
//     paddingHorizontal: 24,
//     marginTop: 24,
//   },
//   modalButtonText: { color: "white", fontSize: 16, fontFamily: "Cairo-Bold" },
//   webView: { flex: 1 },
//   webViewHeader: {
//     height: 56,
//     flexDirection: "row",
//     alignItems: "center",
//     paddingHorizontal: 16,
//     borderBottomWidth: 1,
//     borderBottomColor: "#E5E7EB",
//     backgroundColor: "#f9fafb",
//   },
//   webViewCloseButton: { padding: 8 },
//   webViewTitleContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     gap: 8,
//     flex: 1,
//     justifyContent: "center",
//     marginRight: 40,
//   },
//   webViewTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
//   loadingOverlay: {
//     position: "absolute",
//     top: 0,
//     left: 0,
//     right: 0,
//     bottom: 0,
//     backgroundColor: "rgba(255,255,255,0.95)",
//     justifyContent: "center",
//     alignItems: "center",
//     zIndex: 1000,
//   },
//   loadingCard: {
//     backgroundColor: "white",
//     borderRadius: 16,
//     padding: 24,
//     alignItems: "center",
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.84,
//     elevation: 5,
//     width: "80%",
//     maxWidth: 300,
//   },
//   loadingTitle: {
//     fontSize: 18,
//     fontFamily: "Cairo-Bold",
//     color: "#374151",
//     marginTop: 16,
//   },
//   loadingSubtext: {
//     fontSize: 14,
//     fontFamily: "Cairo",
//     color: "#6B7280",
//     textAlign: "center",
//     marginTop: 8,
//   },
//   errorValue: { fontSize: 14, fontFamily: "Cairo", color: "#DC2626" },
//   shippingFeeRow: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginVertical: 4,
//   },
//   shippingFeeValueContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//     justifyContent: "flex-end",
//   },
//   summaryLabel: { fontSize: 14, fontFamily: "Cairo", color: "#4b5563" },
//   summaryValue: {
//     fontSize: 14,
//     fontFamily: "Cairo-SemiBold",
//     color: "#374151",
//   },
// });

/********************************/

import React, { useState, useEffect, useRef, useCallback } from "react";
import {
  View,
  Text,
  ScrollView,
  Alert,
  ActivityIndicator,
  StyleSheet,
  Platform,
  TouchableOpacity,
  SafeAreaView,
  Modal,
  StatusBar,
  TextInput,
  KeyboardAvoidingView,
  BackHandler,
} from "react-native";
import { router, useNavigation } from "expo-router";
import { WebView } from "react-native-webview";
import { useFocusEffect } from "@react-navigation/native";
import {
  Shield,
  CreditCard,
  ArrowLeft,
  Lock,
  ChevronLeft,
  XCircle,
  User,
  Phone,
  Mail,
  MapPin,
} from "lucide-react-native";
import Toast from "react-native-toast-message";
import NetInfo from "@react-native-community/netinfo";
import * as SecureStore from "expo-secure-store";
import useCartStore from "../../store/cartStore";
import { OrderSummaryRow } from "../Components/OrderSummary";
import useShippingFee from "../hooks/useShippingFee";
import { useSafeAreaInsets } from "react-native-safe-area-context";
import LottieView from "lottie-react-native";
import { useUserContext } from "../contexts/UserContext";
import publicIP from "react-native-public-ip";
import axios from "axios";

const IS_PRODUCTION = process.env.EXPO_PUBLIC_ENV === "production";
const STRAPI_API_URL = IS_PRODUCTION
  ? process.env.EXPO_PUBLIC_STRAPI_API_URL_PROD
  : process.env.EXPO_PUBLIC_STRAPI_API_URL_DEV;
const SURL = IS_PRODUCTION
  ? process.env.EXPO_PUBLIC_SUCCESS_URL_PROD
  : process.env.EXPO_PUBLIC_SUCCESS_URL_DEV;
const FURL = IS_PRODUCTION
  ? process.env.EXPO_PUBLIC_FAILURE_URL_PROD
  : process.env.EXPO_PUBLIC_FAILURE_URL_DEV;
const FORM_DATA_KEY =
  process.env.EXPO_PUBLIC_FORM_DATA_KEY || "user_checkout_info";
const REQUEST_TIMEOUT =
  Number(process.env.EXPO_PUBLIC_REQUEST_TIMEOUT) || 30000;

const api = axios.create({
  baseURL: STRAPI_API_URL,
  auth: {
    username: process.env.EXPO_PUBLIC_STRAPI_API_USERNAME,
    password: process.env.EXPO_PUBLIC_STRAPI_API_PASSWORD,
  },
  timeout: REQUEST_TIMEOUT,
});

const PaymentSuccessModal: React.FC<{
  visible: boolean;
  onClose: () => void;
  transactionId: string | null;
}> = ({ visible, onClose }) => {
  const animationRef = useRef<LottieView>(null);

  useEffect(() => {
    if (visible && animationRef.current) animationRef.current.play();
  }, [visible]);

  return (
    <Modal
      visible={visible}
      transparent={true}
      animationType="fade"
      onRequestClose={onClose}
    >
      <View style={styles.modalBackground}>
        <View style={styles.successModalContent}>
          <LottieView
            ref={animationRef}
            source={require("../../assets/lotties/payment-success.json")}
            style={styles.lottieAnimation}
            loop={false}
            onAnimationFinish={onClose}
          />
        </View>
      </View>
    </Modal>
  );
};

const PaymentFailureModal: React.FC<{
  visible: boolean;
  onClose: () => void;
  errorMessage: string | null;
  transactionId: string | null;
}> = ({ visible, onClose, errorMessage, transactionId }) => (
  <Modal
    visible={visible}
    transparent={true}
    animationType="fade"
    onRequestClose={onClose}
  >
    <View style={styles.modalBackground}>
      <View style={[styles.modalContent, styles.failureModal]}>
        <XCircle size={48} color="#E53935" />
        <Text style={styles.modalTitle}>Payment Failed</Text>
        <Text style={styles.modalText}>
          {errorMessage || "An error occurred during payment."}
          {transactionId && `\nTransaction ID: ${transactionId}`}
        </Text>
        <TouchableOpacity style={styles.modalButton} onPress={onClose}>
          <Text style={styles.modalButtonText}>Try Again</Text>
        </TouchableOpacity>
      </View>
    </View>
  </Modal>
);

const PaymentLoadingOverlay: React.FC = () => (
  <View style={styles.loadingOverlay}>
    <View style={styles.loadingCard}>
      <ActivityIndicator size="large" color="#10B981" />
      <Text style={styles.loadingTitle}>Processing Payment</Text>
      <Text style={styles.loadingSubtext}>Please don't close this window</Text>
    </View>
  </View>
);

const REQUIRED_FIELDS = [
  "firstName",
  "lastName",
  "phone",
  "email",
  "state",
  "city",
  "address",
];
const PHONE_REGEX = /^\d{8,}$/;
const EMAIL_REGEX = /\S+@\S+\.\S+/;

const saveFormData = async (data: any) => {
  await SecureStore.setItemAsync(FORM_DATA_KEY, JSON.stringify(data));
};

const loadFormData = async () => {
  const savedData = await SecureStore.getItemAsync(FORM_DATA_KEY);
  return savedData ? JSON.parse(savedData) : null;
};

export default function CheckoutPage() {
  const insets = useSafeAreaInsets();
  const navigation = useNavigation();
  const { items, total, discountedTotal, appliedCoupon, clearCart } =
    useCartStore();
  const {
    shippingFee,
    loading: isLoadingShippingFee,
    error: shippingFeeError,
  } = useShippingFee();
  const { userData } = useUserContext();

  const [formData, setFormData] = useState({
    firstName: "",
    lastName: "",
    phone: "",
    email: "",
    state: "",
    city: "",
    address: "",
  });
  const [formErrors, setFormErrors] = useState<Record<string, string>>({});
  const [isProcessing, setIsProcessing] = useState(false);
  const [paymentError, setPaymentError] = useState<string | null>(null);
  const [showWebView, setShowWebView] = useState(false);
  const [paymentUrl, setPaymentUrl] = useState<string | null>(null);
  const [isWebViewLoading, setIsWebViewLoading] = useState(true);
  const [showSuccessModal, setShowSuccessModal] = useState(false);
  const [showFailureModal, setShowFailureModal] = useState(false);
  const [transactionId, setTransactionId] = useState<string | null>(null);
  const [isOrderCreated, setIsOrderCreated] = useState(false);
  const [ipAddress, setIpAddress] = useState("");

  useEffect(() => {
    const loadSavedData = async () => {
      const savedData = await loadFormData();
      if (savedData) setFormData(savedData);
      if (userData && !userData.isGuestMode) {
        setFormData((prev) => ({
          ...prev,
          firstName: userData.firstName || "",
          lastName: userData.lastName || "",
          email: userData.email || "",
          phone: userData.phone || "",
        }));
      }
    };
    loadSavedData();
  }, [userData]);

  useEffect(() => {
    if (items.length === 0) router.replace("/(root)/Cart");
  }, [items.length]);

  useEffect(() => {
    const fetchIp = async () => {
      const ip = await publicIP();
      setIpAddress(ip || "192.168.8.125");
    };
    fetchIp();
  }, []);

  const validateForm = () => {
    const errors: Record<string, string> = {};
    let isValid = true;

    REQUIRED_FIELDS.forEach((field) => {
      if (!formData[field as keyof typeof formData].trim()) {
        errors[field] = `${
          field.charAt(0).toUpperCase() + field.slice(1)
        } is required`;
        isValid = false;
      }
    });

    if (formData.email && !EMAIL_REGEX.test(formData.email)) {
      errors.email = "Invalid email address";
      isValid = false;
    }

    const cleanPhone = formData.phone.replace(/[^\d]/g, "");
    if (formData.phone && !PHONE_REGEX.test(cleanPhone)) {
      errors.phone = "Phone number must be at least 8 digits";
      isValid = false;
    }

    setFormErrors(errors);
    if (!isValid) {
      Toast.show({
        type: "error",
        text1: "Form Validation Error",
        text2: "Please fill in all required fields correctly",
        position: "top",
      });
    }
    return isValid;
  };

  const handleBackPress = useCallback(() => {
    if (showWebView) {
      Alert.alert(
        "Cancel Payment?",
        "Are you sure you want to cancel? This payment will not be processed.",
        [
          { text: "Continue Payment", style: "cancel" },
          {
            text: "Cancel Payment",
            style: "destructive",
            onPress: () => {
              setShowWebView(false);
              setPaymentUrl(null);
              setShowFailureModal(true);
            },
          },
        ]
      );
      return true;
    }
    router.push("/(root)/Cart");
    return true;
  }, [showWebView]);

  useEffect(() => {
    const backHandler = BackHandler.addEventListener(
      "hardwareBackPress",
      handleBackPress
    );
    return () => backHandler.remove();
  }, [handleBackPress]);

  useFocusEffect(
    useCallback(() => {
      navigation.setOptions({
        gestureEnabled: !showWebView,
        headerShown: false,
      });
    }, [showWebView])
  );

  const handlePaymentSuccess = async (txnId: string) => {
    if (isOrderCreated) return;
    setIsOrderCreated(true);
    setTransactionId(txnId);

    const orderId = `TX${new Date()
      .toISOString()
      .replace(/[^0-9]/g, "")
      .slice(0, 14)}${Math.random().toString(36).slice(2, 6)}`;
    const subtotal = total;
    const discountAmount = appliedCoupon
      ? appliedCoupon.type === "percentage"
        ? (total * appliedCoupon.amount) / 100
        : appliedCoupon.amount
      : 0;
    const orderTotal = (discountedTotal || total) + shippingFee;

    const orderData = {
      data: {
        orderId,
        OrderStatus: "Pending",
        subtotal: Number(subtotal.toFixed(2)),
        discountAmount: Number(discountAmount.toFixed(2)),
        shippingFee: Number(shippingFee.toFixed(2)),
        OrderTotal: Number(orderTotal.toFixed(2)),
        OrderDetails: JSON.stringify(items),
        shippingInfo: JSON.stringify({
          state: formData.state,
          city: formData.city,
          address: formData.address,
          phone: formData.phone,
        }),
        paymentStatus: "success",
        paymentId: orderId,
        isGuestOrder: userData?.isGuestMode || !userData,
        guestInfo:
          userData?.isGuestMode || !userData
            ? JSON.stringify({
                firstName: formData.firstName,
                lastName: formData.lastName,
                email: formData.email,
                phone: formData.phone,
              })
            : null,
        auth: userData && !userData.isGuestMode ? userData.strapiId : null,
      },
    };

    try {
      const response = await api.post("/api/orders", orderData);
      if (response.status !== 200) {
        throw new Error("Failed to create order");
      }
    } catch (error) {
      console.error("Error creating order:", error);
      Toast.show({
        type: "error",
        text1: "Order Creation Failed",
        text2: "Please contact support",
        position: "top",
      });
      return;
    }

    await saveFormData(formData);
    clearCart();
    setShowWebView(false);
    setPaymentUrl(null);
    Toast.show({
      type: "success",
      text1: "Payment Successful",
      text2: "Thank you for your purchase!",
      position: "top",
    });
    setShowSuccessModal(true);
  };

  const handlePaymentFailure = (
    errorMessage: string | null,
    txnId: string | null
  ) => {
    setShowWebView(false);
    setPaymentUrl(null);
    setTransactionId(txnId);
    setPaymentError(errorMessage || "Payment failed. Please try again.");
    setShowFailureModal(true);
  };

  const handlePaymentError = (errorMessage: string) => {
    setPaymentError(errorMessage);
    setShowFailureModal(true);
  };

  const formatAmount = (amount: number) => Number(amount.toFixed(2)).toString();

  const subtotal = total;
  const discount = appliedCoupon
    ? appliedCoupon.type === "percentage"
      ? (total * appliedCoupon.amount) / 100
      : appliedCoupon.amount
    : 0;
  const finalTotal = (discountedTotal || total) + shippingFee;

  const handlePayment = async () => {
    if (isProcessing || !validateForm()) return;

    try {
      const netInfo = await NetInfo.fetch();
      if (!netInfo.isConnected)
        throw new Error("No internet connection detected");

      setIsProcessing(true);
      setPaymentError(null);

      const customerInfo = {
        name: `${formData.firstName} ${formData.lastName}`,
        phone: formData.phone,
        platform: Platform.OS,
      };

      const response = await api.post("/api/payments/initiate", {
        amount: finalTotal,
        customerInfo,
        ipAddress,
      });

      const data = response.data;
      const paymentUrl = data.paymentUrl;

      if (!paymentUrl || !paymentUrl.startsWith("https://"))
        throw new Error("Invalid or insecure payment URL received");

      setPaymentUrl(paymentUrl);
      setShowWebView(true);

      setTimeout(() => {
        if (showWebView) checkPaymentStatus(data.merchantTxnId);
      }, 60000);
    } catch (error: any) {
      let errorMessage = "Payment initiation failed";
      if (axios.isAxiosError(error)) {
        errorMessage = error.response?.data?.message || error.message;
      } else if (error.message) {
        errorMessage = error.message;
      }
      console.error("Payment Error:", error);
      setPaymentError(errorMessage);
      handlePaymentError(errorMessage);
    } finally {
      setIsProcessing(false);
    }
  };

  const checkPaymentStatus = async (merchantTxnId: string) => {
    try {
      const response = await api.get(`/api/payments/verify/${merchantTxnId}`);
      const data = response.data;
      if (data.finalStatus === "success") {
        handlePaymentSuccess(data.txnId);
      } else if (
        data.finalStatus === "failed" ||
        data.finalStatus === "cancelled"
      ) {
        handlePaymentFailure(data.errorMessage || "Payment failed", data.txnId);
      }
    } catch (error) {
      console.error("Error checking payment status:", error);
    }
  };

  if (
    !process.env.EXPO_PUBLIC_STRAPI_API_URL_PROD ||
    !process.env.EXPO_PUBLIC_STRAPI_API_URL_DEV ||
    !process.env.EXPO_PUBLIC_STRAPI_API_USERNAME ||
    !process.env.EXPO_PUBLIC_STRAPI_API_PASSWORD
  ) {
    return (
      <View style={styles.errorContainer}>
        <Text style={styles.errorText}>
          Critical environment variables are missing. Please contact support.
        </Text>
      </View>
    );
  }

  if (items.length === 0) return null;

  return (
    <SafeAreaView style={[styles.safeArea, { paddingTop: insets.top }]}>
      <KeyboardAvoidingView
        behavior={Platform.OS === "ios" ? "padding" : "height"}
        style={styles.container}
      >
        <StatusBar barStyle="dark-content" backgroundColor="#f9fafb" />
        <View style={styles.header}>
          <TouchableOpacity
            onPress={handleBackPress}
            style={styles.backButton}
            hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
          >
            <ChevronLeft color="#E53935" size={28} />
          </TouchableOpacity>
          <Text style={styles.headerTitle}>Secure Checkout</Text>
        </View>

        <ScrollView
          style={styles.container}
          contentContainerStyle={styles.contentContainer}
          showsVerticalScrollIndicator={false}
        >
          <View style={styles.formContainer}>
            <Text style={styles.formTitle}>Delivery Information</Text>
            <Text style={styles.deliveryNote}>
              Orders will be delivered within the next business day.
            </Text>

            <View style={styles.section}>
              <Text style={styles.sectionTitle}>Personal Information</Text>
              {[
                { field: "firstName", label: "First Name *", Icon: User },
                { field: "lastName", label: "Last Name *", Icon: User },
                { field: "email", label: "Email *", Icon: Mail },
                { field: "phone", label: "Phone Number *", Icon: Phone },
              ].map(({ field, label, Icon }) => (
                <View key={field} style={styles.formField}>
                  <View style={styles.inputLabelContainer}>
                    <Icon size={16} color="#4b5563" />
                    <Text style={styles.inputLabel}>{label}</Text>
                  </View>
                  <TextInput
                    style={[
                      styles.input,
                      formErrors[field] && styles.inputError,
                    ]}
                    value={formData[field as keyof typeof formData]}
                    onChangeText={(text) =>
                      setFormData((prev) => ({
                        ...prev,
                        [field]:
                          field === "phone" ? text.replace(/[^\d]/g, "") : text,
                      }))
                    }
                    placeholder={`Enter your ${field}`}
                    keyboardType={
                      field === "email"
                        ? "email-address"
                        : field === "phone"
                        ? "phone-pad"
                        : "default"
                    }
                    autoCapitalize={field === "email" ? "none" : "words"}
                    maxLength={field === "phone" ? 15 : undefined}
                  />
                  {formErrors[field] && (
                    <Text style={styles.errorText}>{formErrors[field]}</Text>
                  )}
                  {field === "phone" && !formErrors.phone && (
                    <Text style={styles.helperText}>
                      Enter your Kuwait mobile number (minimum 8 digits)
                    </Text>
                  )}
                </View>
              ))}
            </View>

            <View style={styles.section}>
              <Text style={styles.sectionTitle}>Delivery Address</Text>
              {[
                { field: "state", label: "State *" },
                { field: "city", label: "City *" },
                {
                  field: "address",
                  label: "Delivery Address *",
                  multiline: true,
                },
              ].map(({ field, label, multiline }) => (
                <View key={field} style={styles.formField}>
                  <View style={styles.inputLabelContainer}>
                    <MapPin size={16} color="#4b5563" />
                    <Text style={styles.inputLabel}>{label}</Text>
                  </View>
                  <TextInput
                    style={[
                      styles.input,
                      formErrors[field] && styles.inputError,
                    ]}
                    value={formData[field as keyof typeof formData]}
                    onChangeText={(text) =>
                      setFormData((prev) => ({ ...prev, [field]: text }))
                    }
                    placeholder={`Enter your ${field}`}
                    multiline={multiline}
                    numberOfLines={multiline ? 3 : 1}
                  />
                  {formErrors[field] && (
                    <Text style={styles.errorText}>{formErrors[field]}</Text>
                  )}
                </View>
              ))}
            </View>
          </View>

          <View style={styles.card}>
            <View style={styles.cardTitleContainer}>
              <Text style={styles.cardTitle}>Order Summary</Text>
              <Text style={styles.itemCount}>{items.length} items</Text>
            </View>
            {items.map((item) => (
              <View key={item.documentId} style={styles.itemRow}>
                <View style={styles.itemDetails}>
                  <Text style={styles.itemName} numberOfLines={1}>
                    {item.name}
                  </Text>
                  <Text style={styles.itemQuantity}>Qty: {item.quantity}</Text>
                </View>
                <Text style={styles.itemPrice}>
                  {((item.salesPrice || item.price) * item.quantity).toFixed(2)}{" "}
                  KWD
                </Text>
              </View>
            ))}

            <View style={styles.summaryContainer}>
              <OrderSummaryRow
                label="Subtotal"
                value={`${subtotal.toFixed(2)} KWD`}
              />
              {appliedCoupon && (
                <OrderSummaryRow
                  label={`Discount (${appliedCoupon.code})`}
                  value={`- ${discount.toFixed(2)} KWD`}
                  isDiscount
                />
              )}
              <View style={styles.shippingFeeRow}>
                <Text style={styles.summaryLabel}>Shipping Fee</Text>
                <View style={styles.shippingFeeValueContainer}>
                  {isLoadingShippingFee ? (
                    <ActivityIndicator size="small" color="#10B981" />
                  ) : shippingFeeError ? (
                    <Text style={styles.errorValue}>Error loading fee</Text>
                  ) : (
                    <Text style={styles.summaryValue}>{`${shippingFee.toFixed(
                      2
                    )} KWD`}</Text>
                  )}
                </View>
              </View>
              <View style={styles.divider} />
              <OrderSummaryRow
                label="Total Amount"
                value={`${formatAmount(finalTotal)} KWD`}
                isTotal
                isLoading={isLoadingShippingFee}
              />
            </View>
          </View>

          <View style={styles.securityCard}>
            <View style={styles.securityHeader}>
              <Lock size={20} color="#10B981" />
              <Text style={styles.securityTitle}>Secure Payment</Text>
            </View>
            <Text style={styles.securityText}>
              • SSL encrypted payment processing • Verified by Bookeey Payment
              Gateway • Your payment details are protected
            </Text>
          </View>

          <TouchableOpacity
            style={[
              styles.payButton,
              (isProcessing || isLoadingShippingFee) &&
                styles.payButtonDisabled,
            ]}
            onPress={handlePayment}
            disabled={isProcessing || isLoadingShippingFee}
          >
            {isProcessing ? (
              <ActivityIndicator color="white" size="small" />
            ) : (
              <View style={styles.payButtonContent}>
                <CreditCard size={20} color="white" />
                <Text style={styles.payButtonText}>
                  Pay {formatAmount(finalTotal)} KWD
                </Text>
              </View>
            )}
          </TouchableOpacity>
          {paymentError && <Text style={styles.errorText}>{paymentError}</Text>}
        </ScrollView>

        <Modal
          visible={showWebView}
          animationType="slide"
          onRequestClose={handleBackPress}
        >
          <SafeAreaView style={styles.modalContainer}>
            <View style={styles.webViewHeader}>
              <TouchableOpacity
                onPress={handleBackPress}
                style={styles.webViewCloseButton}
                hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
              >
                <ArrowLeft color="#E53935" size={24} />
              </TouchableOpacity>
              <View style={styles.webViewTitleContainer}>
                <Lock size={16} color="#10B981" />
                <Text style={styles.webViewTitle}>Secure Payment</Text>
              </View>
            </View>
            {isWebViewLoading && <PaymentLoadingOverlay />}
            {paymentUrl && (
              <WebView
                source={{ uri: paymentUrl }}
                onNavigationStateChange={(navState) => {
                  if (navState.url.includes(SURL) && !navState.loading) {
                    const params = new URLSearchParams(
                      navState.url.split("?")[1]
                    );
                    const txnId = params.get("txnId");
                    handlePaymentSuccess(txnId!);
                  } else if (navState.url.includes(FURL) && !navState.loading) {
                    const params = new URLSearchParams(
                      navState.url.split("?")[1]
                    );
                    const errorMessage = params.get("errorMessage");
                    const txnId = params.get("txnId");
                    handlePaymentFailure(errorMessage, txnId);
                  }
                }}
                onLoadStart={() => setIsWebViewLoading(true)}
                onLoadEnd={() => setIsWebViewLoading(false)}
                onError={(syntheticEvent) =>
                  handlePaymentError(syntheticEvent.nativeEvent.description)
                }
                onHttpError={() => handlePaymentError("Connection error")}
                style={styles.webView}
                incognito={true}
                cacheEnabled={false}
                domStorageEnabled={true}
                javaScriptEnabled={true}
                startInLoadingState={true}
              />
            )}
          </SafeAreaView>
        </Modal>

        <PaymentSuccessModal
          visible={showSuccessModal}
          onClose={() => {
            setShowSuccessModal(false);
            router.push("/(root)/Cart");
          }}
          transactionId={transactionId}
        />
        <PaymentFailureModal
          visible={showFailureModal}
          onClose={() => setShowFailureModal(false)}
          errorMessage={paymentError}
          transactionId={transactionId}
        />
      </KeyboardAvoidingView>
      <Toast />
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  safeArea: { flex: 1, backgroundColor: "#f9fafb" },
  container: { flex: 1 },
  contentContainer: { padding: 16, paddingBottom: 100 },
  header: {
    flexDirection: "row",
    alignItems: "center",
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: "#f0f0f0",
    backgroundColor: "#f9fafb",
  },
  backButton: { padding: 4 },
  headerTitle: {
    fontSize: 20,
    fontFamily: "Cairo-Bold",
    color: "#1f2937",
    marginLeft: 16,
  },
  formContainer: {
    backgroundColor: "white",
    borderRadius: 16,
    padding: 16,
    marginBottom: 16,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.08,
    shadowRadius: 4,
    elevation: 3,
  },
  section: { marginBottom: 24 },
  sectionTitle: {
    fontSize: 16,
    fontFamily: "Cairo-SemiBold",
    color: "#1f2937",
    marginBottom: 12,
    borderBottomWidth: 1,
    borderBottomColor: "#e5e7eb",
    paddingBottom: 4,
  },
  formTitle: {
    fontSize: 18,
    fontFamily: "Cairo-SemiBold",
    color: "#1f2937",
    marginBottom: 12,
  },
  formField: { marginBottom: 16 },
  inputLabelContainer: {
    flexDirection: "row",
    alignItems: "center",
    gap: 6,
    marginBottom: 4,
  },
  inputLabel: { fontSize: 14, fontFamily: "Cairo-SemiBold", color: "#4b5563" },
  input: {
    borderWidth: 1,
    borderColor: "#e5e7eb",
    borderRadius: 8,
    padding: 12,
    fontSize: 14,
    fontFamily: "Cairo",
    color: "#1f2937",
    backgroundColor: "#fafafa",
  },
  inputError: { borderColor: "#ef4444" },
  errorText: {
    color: "#ef4444",
    fontSize: 12,
    fontFamily: "Cairo",
    marginTop: 4,
  },
  helperText: {
    fontSize: 12,
    fontFamily: "Cairo",
    color: "#6b7280",
    marginTop: 4,
  },
  deliveryNote: {
    fontSize: 14,
    fontFamily: "Cairo-SemiBold",
    color: "#10B981",
    marginBottom: 16,
    textAlign: "center",
    backgroundColor: "#f0fdf4",
    padding: 8,
    borderRadius: 8,
  },
  card: {
    backgroundColor: "white",
    borderRadius: 16,
    padding: 16,
    marginBottom: 16,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.08,
    shadowRadius: 4,
    elevation: 3,
  },
  cardTitleContainer: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: 16,
  },
  cardTitle: { fontSize: 18, fontFamily: "Cairo-SemiBold", color: "#1f2937" },
  itemCount: { fontSize: 14, fontFamily: "Cairo", color: "#6b7280" },
  itemRow: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: 12,
    paddingBottom: 12,
    borderBottomWidth: 1,
    borderBottomColor: "#f1f5f9",
  },
  itemDetails: { flex: 1, paddingRight: 8 },
  itemName: {
    fontSize: 15,
    fontFamily: "Cairo-SemiBold",
    color: "#374151",
    marginBottom: 4,
  },
  itemQuantity: { fontSize: 13, fontFamily: "Cairo", color: "#6b7280" },
  itemPrice: { fontSize: 15, fontFamily: "Cairo-Bold", color: "#374151" },
  summaryContainer: {
    marginTop: 16,
    paddingTop: 16,
    borderTopWidth: 1,
    borderTopColor: "#e5e7eb",
  },
  divider: { height: 1, backgroundColor: "#e5e7eb", marginVertical: 12 },
  securityCard: {
    backgroundColor: "#f0fdf4",
    borderRadius: 16,
    padding: 16,
    marginBottom: 24,
    borderWidth: 1,
    borderColor: "#86efac",
  },
  securityHeader: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 12,
    gap: 8,
  },
  securityTitle: {
    fontSize: 16,
    fontFamily: "Cairo-SemiBold",
    color: "#047857",
  },
  securityText: {
    fontSize: 14,
    fontFamily: "Cairo",
    color: "#4B5563",
    lineHeight: 22,
  },
  payButton: {
    backgroundColor: "#E53935",
    borderRadius: 12,
    padding: 18,
    alignItems: "center",
    justifyContent: "center",
    marginBottom: 12,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
  },
  payButtonDisabled: { opacity: 0.6 },
  payButtonContent: { flexDirection: "row", alignItems: "center", gap: 10 },
  payButtonText: { color: "white", fontSize: 16, fontFamily: "Cairo-Bold" },
  modalBackground: {
    flex: 1,
    backgroundColor: "rgba(0, 0, 0, 0.5)",
    justifyContent: "center",
    alignItems: "center",
  },
  modalContainer: { flex: 1, backgroundColor: "#fff" },
  modalContent: {
    backgroundColor: "white",
    borderRadius: 16,
    padding: 24,
    alignItems: "center",
    width: "80%",
    maxWidth: 300,
  },
  successModalContent: {
    backgroundColor: "white",
    borderRadius: 16,
    padding: 24,
    alignItems: "center",
    width: "90%",
    maxWidth: 350,
  },
  lottieAnimation: { width: 200, height: 200 },
  failureModal: { borderColor: "#E53935", borderWidth: 2 },
  modalTitle: {
    fontSize: 20,
    fontFamily: "Cairo-Bold",
    color: "#374151",
    marginTop: 16,
  },
  modalText: {
    fontSize: 14,
    fontFamily: "Cairo",
    color: "#6B7280",
    textAlign: "center",
    marginTop: 8,
  },
  modalButton: {
    backgroundColor: "#E53935",
    borderRadius: 8,
    paddingVertical: 12,
    paddingHorizontal: 24,
    marginTop: 24,
  },
  modalButtonText: { color: "white", fontSize: 16, fontFamily: "Cairo-Bold" },
  webView: { flex: 1 },
  webViewHeader: {
    height: 56,
    flexDirection: "row",
    alignItems: "center",
    paddingHorizontal: 16,
    borderBottomWidth: 1,
    borderBottomColor: "#E5E7EB",
    backgroundColor: "#f9fafb",
  },
  webViewCloseButton: { padding: 8 },
  webViewTitleContainer: {
    flexDirection: "row",
    alignItems: "center",
    gap: 8,
    flex: 1,
    justifyContent: "center",
    marginRight: 40,
  },
  webViewTitle: {
    fontSize: 18,
    fontFamily: "Cairo-SemiBold",
    color: "#374151",
  },
  loadingOverlay: {
    position: "absolute",
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: "rgba(255,255,255,0.95)",
    justifyContent: "center",
    alignItems: "center",
    zIndex: 1000,
  },
  loadingCard: {
    backgroundColor: "white",
    borderRadius: 16,
    padding: 24,
    alignItems: "center",
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
    width: "80%",
    maxWidth: 300,
  },
  loadingTitle: {
    fontSize: 18,
    fontFamily: "Cairo-Bold",
    color: "#374151",
    marginTop: 16,
  },
  loadingSubtext: {
    fontSize: 14,
    fontFamily: "Cairo",
    color: "#6B7280",
    textAlign: "center",
    marginTop: 8,
  },
  errorValue: { fontSize: 14, fontFamily: "Cairo", color: "#DC2626" },
  shippingFeeRow: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginVertical: 4,
  },
  shippingFeeValueContainer: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "flex-end",
  },
  summaryLabel: { fontSize: 14, fontFamily: "Cairo", color: "#4b5563" },
  summaryValue: {
    fontSize: 14,
    fontFamily: "Cairo-SemiBold",
    color: "#374151",
  },
  errorContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    padding: 16,
  },
  //   errorText: {
  //     fontSize: 16,
  //     fontFamily: "Cairo",
  //     color: "#DC2626",
  //     textAlign: "center",
  //   },
});
